{"version":3,"file":"list.js","sources":["../../../src/material/list/list-module.ts","../../../src/material/list/selection-list.ts","../../../src/material/list/list.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  SPACE,\n  ENTER,\n  HOME,\n  END,\n  UP_ARROW,\n  DOWN_ARROW,\n  A,\n  hasModifierKey,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme. The accent theme palette is the default and doesn't need to be set.\n    '[class.mat-primary]': 'color === \"primary\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text', {static: false}) _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list mat-list-base',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      case A:\n        if (hasModifierKey(event, 'ctrlKey')) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple, OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler, {static: false}) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler, {static: false}) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n"],"names":[],"mappings":"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"}