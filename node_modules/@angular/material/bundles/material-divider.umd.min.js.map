{"version":3,"file":"material-divider.umd.min.js","sources":["../../src/material/divider/divider.ts","../../src/material/divider/divider-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n"],"names":["MatDivider","this","_vertical","_inset","Object","defineProperty","prototype","value","coerceBooleanProperty","type","Component","args","selector","host","role","[attr.aria-orientation]","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","class","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","propDecorators","MatDividerModule","NgModule","imports","MatCommonModule","CommonModule","exports","declarations"],"mappings":";;;;;;;8hBAWA,IAAAA,GAAA,WAAA,QAAAA,KAqBUC,KAAVC,WAA+B,EAMrBD,KAAVE,QAA4B,EAH5B,MANEC,QAAFC,eACML,EADNM,UAAA,gBAAE,WAC0B,MAAOL,MAAKC,eACtC,SAAaK,GAAkBN,KAAKC,UAAYM,EAAAA,sBAAsBD,oCAItEH,OAAFC,eACML,EADNM,UAAA,aAAE,WACuB,MAAOL,MAAKE,YACnC,SAAUI,GAAkBN,KAAKE,OAASK,EAAAA,sBAAsBD,mDA1BlEE,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEC,MACFC,KAAA,YACMC,0BAAN,uCACIC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACIC,MAAJ,eAEAC,SAAA,GACAC,QAAA,+SACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGA3B,EAAA4B,kEASA5B,KCrBA6B,EAAA,WAAA,QAAAA,MAK+B,sBAL/BpB,KAACqB,EAAAA,SAADnB,OACEoB,SAAUC,EAAAA,gBAAiBC,EAAAA,cAC3BC,SAAUlC,EAAYgC,EAAAA,iBACtBG,cAAenC,OAEjB6B"}