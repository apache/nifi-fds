{"version":3,"file":"cdk-accordion.umd.min.js","sources":["../../src/cdk/accordion/accordion.ts","../../src/cdk/accordion/accordion-item.ts","../../src/cdk/accordion/accordion-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    this._openCloseAll(true);\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAll(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  private _openCloseAll(expanded: boolean): void {\n    if (this.multi) {\n      this._openCloseAllActions.next(expanded);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CdkAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n    // to the same accordion.\n    {provide: CdkAccordion, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n"],"names":["nextId","CdkAccordion","this","_stateChanges","Subject","_openCloseAllActions","id","_multi","Object","defineProperty","prototype","multi","coerceBooleanProperty","openAll","_openCloseAll","closeAll","ngOnChanges","changes","next","ngOnDestroy","complete","expanded","type","Directive","args","selector","exportAs","Input","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_this","_openCloseAllSubscription","Subscription","EMPTY","closed","EventEmitter","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","providers","provide","useValue","undefined","decorators","Optional","SkipSelf","ChangeDetectorRef","UniqueSelectionDispatcher","Output","CdkAccordionModule","NgModule","exports","declarations"],"mappings":"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"}