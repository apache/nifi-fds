{"version":3,"sources":["ng://@covalent/core/layout/layout.component.ts","node_modules/tslib/tslib.es6.js","ng://@covalent/core/layout/layout-toggle.class.ts","ng://@covalent/core/layout/layout.directives.ts","ng://@covalent/core/layout/layout-nav/layout-nav.component.ts","ng://@covalent/core/layout/layout-nav-list/layout-nav-list.component.ts","ng://@covalent/core/layout/layout-nav-list/layout-nav-list.directives.ts","ng://@covalent/core/layout/layout-card-over/layout-card-over.component.ts","ng://@covalent/core/layout/layout-manage-list/layout-manage-list.component.ts","ng://@covalent/core/layout/layout-manage-list/layout-manage-list.directives.ts","ng://@covalent/core/layout/layout-footer/layout-footer.component.ts","ng://@covalent/core/layout/navigation-drawer/navigation-drawer.component.ts","ng://@covalent/core/layout/layout.module.ts"],"names":["TdLayoutComponent","Object","defineProperty","prototype","this","mode","toggle","sidenav","opened","open","close","Component","args","selector","template","ViewChild","MatSidenav","Input","sidenavWidth","containerAutosize","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","_super","_TdLayoutToggleMixinBase","mixinDisabled","LayoutToggleBase","LayoutToggle","tslib_1.__extends","hideWhenOpened","_hideWhenOpened","_initialized","_toggleVisibility","ngAfterViewInit","_this","_layout","_toggleSubs","_animationStarted","subscribe","ngOnDestroy","unsubscribe","undefined","clickListener","event","preventDefault","disabled","onClick","_noLayoutMessage","_renderer","setStyle","_elementRef","nativeElement","console","warn","HostListener","call","addClass","TdLayoutToggleDirective","tdLayoutToggle","Directive","decorators","type","Optional","Inject","forwardRef","Renderer2","ElementRef","layout","renderer","elementRef","TdLayoutCloseDirective","tdLayoutClose","TdLayoutOpenDirective","tdLayoutOpen","TdLayoutNavComponent","_router","navigationRoute","handleNavigationClick","routerEnabled","navigateByUrl","Router","color","TdLayoutNavListComponent","TdLayoutNavListToggleDirective","tdLayoutNavListToggle","TdLayoutNavListCloseDirective","tdLayoutNavListClose","TdLayoutNavListOpenDirective","tdLayoutNavListOpen","TdLayoutCardOverComponent","cardWidth","TdLayoutManageListComponent","TdLayoutManageListToggleDirective","tdLayoutManageListToggle","TdLayoutManageListCloseDirective","tdLayoutManageListClose","TdLayoutManageListOpenDirective","tdLayoutManageListOpen","TdLayoutFooterComponent","_color","removeClass","TdNavigationDrawerMenuDirective","TdNavigationDrawerToolbarDirective","TdNavigationDrawerComponent","_menuToggled","_drawerMenu","length","_toolbar","_backgroundImage","backgroundUrl","sanitizedUrl","_sanitize","sanitize","SecurityContext","RESOURCE_URL","STYLE","ngOnInit","_closeSubscription","openedChange","toggleMenu","isMenuAvailable","animations","tdCollapseAnimation","DomSanitizer","ContentChildren","TD_LAYOUTS","CovalentLayoutModule","NgModule","imports","CommonModule","ScrollDispatchModule","MatSidenavModule","MatToolbarModule","MatButtonModule","MatIconModule","MatCardModule","MatDividerModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from './layout-toggle.class';\n\n@Component({\n  selector: 'td-layout',\n  styleUrls: ['./layout.component.scss' ],\n  templateUrl: './layout.component.html',\n})\nexport class TdLayoutComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"over\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'over';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"false\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = false;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"320px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '320px';\n\n  /**\n   * containerAutosize?: boolean\n   *\n   * Sets \"autosize\" of the sidenav-container.\n   * Defaults to \"false\".\n   *\n   * See documentation for more info and potential performance risks.\n   * \n   * https://github.com/angular/material2/blob/master/src/lib/sidenav/sidenav.md#resizing-an-open-sidenav\n   */\n  @Input('containerAutosize') containerAutosize: boolean = false;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.close();\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Input, HostBinding, HostListener, Renderer2, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nimport { Subscription } from 'rxjs';\n\nexport interface ILayoutTogglable {\n  opened: boolean;\n  sidenav: MatSidenav;\n  toggle(): Promise<MatDrawerToggleResult>;\n  open(): Promise<MatDrawerToggleResult>;\n  close(): Promise<MatDrawerToggleResult>;\n}\n\nexport class LayoutToggleBase { }\n\n/* tslint:disable-next-line */\nexport const _TdLayoutToggleMixinBase = mixinDisabled(LayoutToggleBase);\n\nexport abstract class LayoutToggle extends _TdLayoutToggleMixinBase implements AfterViewInit, OnDestroy, ICanDisable {\n\n  private _toggleSubs: Subscription;\n\n  private _initialized: boolean = false;\n  private _hideWhenOpened: boolean = false;\n\n  /**\n   * hideWhenOpened?: boolean\n   * When this is set to true, the host will be hidden when\n   * the sidenav is opened.\n   */\n  @Input('hideWhenOpened')\n  set hideWhenOpened(hideWhenOpened: boolean) {\n    this._hideWhenOpened = hideWhenOpened;\n    if (this._initialized) {\n      this._toggleVisibility();\n    }\n  }\n\n  constructor(protected _layout: ILayoutTogglable,\n              private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    super();\n    // if layout has not been provided\n    // show warn message\n    if (!this._layout) {\n      this._noLayoutMessage();\n    }\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-menu-button');\n  }\n\n  ngAfterViewInit(): void {\n    this._initialized = true;\n    if (this._layout && this._layout.sidenav) {\n      this._toggleSubs = this._layout.sidenav._animationStarted.subscribe(() => {\n        this._toggleVisibility();\n      });\n    }\n    // execute toggleVisibility since the onOpenStart and onCloseStart\n    // methods might not be executed always when the element is rendered\n    this._toggleVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._toggleSubs) {\n      this._toggleSubs.unsubscribe();\n      this._toggleSubs = undefined;\n    }\n  }\n\n  /**\n   * Listens to host click event to trigger the layout toggle\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    event.preventDefault();\n    if (!this.disabled) {\n      // if layout has been provided, try triggering the click on it\n      // else show warn message\n      if (this._layout && this._layout.open) {\n        this.onClick();\n      } else {\n        this._noLayoutMessage();\n      }\n    }\n  }\n\n  abstract onClick(): void;\n\n  private _toggleVisibility(): void {\n    if (this._layout) {\n      if (this._layout.sidenav.opened && this._hideWhenOpened) {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n      } else {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'display', '');\n      }\n    }\n  }\n\n  private _noLayoutMessage(): void {\n    /* tslint:disable-next-line */\n    console.warn('Covalent: Parent layout not found for layout toggle directive');\n  }\n\n}\n","import { Optional, Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutComponent } from './layout.component';\nimport { LayoutToggle } from './layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutToggle]',\n})\nexport class TdLayoutToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutToggle') \n  set tdLayoutToggle(tdLayoutToggle: boolean) {\n    this.disabled = !(<any>tdLayoutToggle === '' || tdLayoutToggle);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutClose]',\n})\nexport class TdLayoutCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutClose') \n  set tdLayoutClose(tdLayoutClose: boolean) {\n    this.disabled = !(<any>tdLayoutClose === '' || tdLayoutClose);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutOpen]',\n})\nexport class TdLayoutOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutOpen') \n  set tdLayoutClose(tdLayoutOpen: boolean) {\n    this.disabled = !(<any>tdLayoutOpen === '' || tdLayoutOpen);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n","import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styleUrls: ['./layout-nav.component.scss' ],\n  templateUrl: './layout-nav.component.html',\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n}\n","import { Component, Input, ViewChild, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-nav-list',\n  styleUrls: ['./layout-nav-list.component.scss' ],\n  templateUrl: './layout-nav-list.component.html',\n})\nexport class TdLayoutNavListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"350px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '350px';\n\n  /**\n   * containerAutosize?: boolean\n   *\n   * Sets \"autosize\" of the sidenav-container.\n   * Defaults to \"false\".\n   *\n   * See documentation for more info and potential performance risks.\n   * \n   * https://github.com/angular/material2/blob/master/src/lib/sidenav/sidenav.md#resizing-an-open-sidenav\n   */\n  @Input('containerAutosize') containerAutosize: boolean = false;\n  \n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.close();\n  }\n\n}\n","import { Optional, Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutNavListComponent } from './layout-nav-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutNavListToggle]',\n})\nexport class TdLayoutNavListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListToggle') \n  set tdLayoutNavListToggle(tdLayoutNavListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutNavListToggle === '' || tdLayoutNavListToggle);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListClose]',\n})\nexport class TdLayoutNavListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutNavListClose') \n  set tdLayoutNavListClose(tdLayoutNavListClose: boolean) {\n    this.disabled = !(<any>tdLayoutNavListClose === '' || tdLayoutNavListClose);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListOpen]',\n})\nexport class TdLayoutNavListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListOpen') \n  set tdLayoutNavListOpen(tdLayoutNavListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutNavListOpen === '' || tdLayoutNavListOpen);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'td-layout-card-over',\n  styleUrls: ['./layout-card-over.component.scss' ],\n  templateUrl: './layout-card-over.component.html',\n})\nexport class TdLayoutCardOverComponent {\n\n  /**\n   * cardTitle?: string\n   *\n   * Title set in card.\n   */\n  @Input('cardTitle') cardTitle: string;\n\n  /**\n   * cardSubtitle?: string\n   *\n   * Subtitle set in card.\n   */\n  @Input('cardSubtitle') cardSubtitle: string;\n\n  /**\n   * cardWidth?: string\n   *\n   * Card flex width in %.\n   * Defaults to 70%.\n   */\n  @Input('cardWidth') cardWidth: number = 70;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n}\n","import { Component, Directive, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-manage-list',\n  styleUrls: ['./layout-manage-list.component.scss' ],\n  templateUrl: './layout-manage-list.component.html',\n})\nexport class TdLayoutManageListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"257px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '257px';\n\n  /**\n   * containerAutosize?: boolean\n   *\n   * Sets \"autosize\" of the sidenav-container.\n   * Defaults to \"false\".\n   *\n   * See documentation for more info and potential performance risks.\n   * \n   * https://github.com/angular/material2/blob/master/src/lib/sidenav/sidenav.md#resizing-an-open-sidenav\n   */\n  @Input('containerAutosize') containerAutosize: boolean = false;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.close();\n  }\n\n}\n","import { Optional, Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutManageListComponent } from './layout-manage-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutManageListToggle]',\n})\nexport class TdLayoutManageListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListToggle') \n  set tdLayoutManageListToggle(tdLayoutManageListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutManageListToggle === '' || tdLayoutManageListToggle);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListClose]',\n})\nexport class TdLayoutManageListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutManageListClose') \n  set tdLayoutManageListClose(tdLayoutManageListClose: boolean) {\n    this.disabled = !(<any>tdLayoutManageListClose === '' || tdLayoutManageListClose);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListOpen]',\n})\nexport class TdLayoutManageListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListOpen') \n  set tdLayoutManageListOpen(tdLayoutManageListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutManageListOpen === '' || tdLayoutManageListOpen);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n","import { Component, Input, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td-layout-footer,td-layout-footer-inner',\n  styleUrls: ['./layout-footer.component.scss' ],\n  templateUrl: './layout-footer.component.html',\n})\nexport class TdLayoutFooterComponent {\n\n  private _color: 'primary' | 'accent' | 'warn';\n\n  /**\n   * color?: string\n   *\n   * Optional color option: primary | accent | warn.\n   */\n  @Input('color')\n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-footer');\n  }\n\n}\n","import { Component, Directive, Input, ContentChildren, OnInit, OnDestroy, forwardRef, Inject,\n         QueryList, SecurityContext, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SafeResourceUrl, SafeStyle, DomSanitizer } from '@angular/platform-browser';\nimport { MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { Subscription } from 'rxjs';\n\nimport { TdLayoutComponent } from '../layout.component';\n\nimport { tdCollapseAnimation } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-navigation-drawer-menu]',\n})\nexport class TdNavigationDrawerMenuDirective {\n\n}\n\n@Directive({\n  selector: '[td-navigation-drawer-toolbar]',\n})\nexport class TdNavigationDrawerToolbarDirective {\n\n}\n\n@Component({\n  selector: 'td-navigation-drawer',\n  styleUrls: ['./navigation-drawer.component.scss' ],\n  templateUrl: './navigation-drawer.component.html',\n  animations: [ tdCollapseAnimation ],\n})\nexport class TdNavigationDrawerComponent implements OnInit, OnDestroy {\n\n  private _closeSubscription: Subscription;\n  private _menuToggled: boolean = false;\n  private _backgroundImage: SafeStyle;\n\n  get menuToggled(): boolean {\n    return this._menuToggled;\n  }\n\n  @ContentChildren(TdNavigationDrawerMenuDirective) _drawerMenu: QueryList<TdNavigationDrawerMenuDirective>;\n\n  @ContentChildren(TdNavigationDrawerToolbarDirective) _toolbar: QueryList<TdNavigationDrawerToolbarDirective>;\n\n  /**\n   * Checks if there is a [TdNavigationDrawerMenuDirective] has content.\n   */\n  get isMenuAvailable(): boolean {\n    return this._drawerMenu ? this._drawerMenu.length > 0 : false;\n  }\n\n  /**\n   * Checks if there is a [TdNavigationDrawerToolbarDirective] has content.\n   */\n  get isCustomToolbar(): boolean {\n    return this._toolbar ? this._toolbar.length > 0 : false;\n  }\n\n  /**\n   * Checks if there is a background image for the toolbar.\n   */\n  get isBackgroundAvailable(): boolean {\n    return !!this._backgroundImage;\n  }\n\n  /**\n   * sidenavTitle?: string\n   * Title set in sideNav.\n   */\n  @Input('sidenavTitle') sidenavTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * avatar?: string\n   *\n   * avatar url to be displayed before the title\n   * If [icon] or [logo] are set, then this will not be shown.\n   */\n  @Input('avatar') avatar: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, default is used.\n   */\n  @Input('color') color: string;\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and sidenavTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * backgroundUrl?: SafeResourceUrl\n   *\n   * image to be displayed as the background of the toolbar.\n   * URL used will be sanitized, but it should be always from a trusted source to avoid XSS.\n   */\n  @Input('backgroundUrl')\n  // TODO Angular complains with warnings if this is type [SafeResourceUrl].. so we will make it <any> until its fixed.\n  // https://github.com/webpack/webpack/issues/2977\n  set backgroundUrl(backgroundUrl: any) {\n    if (backgroundUrl) {\n      let sanitizedUrl: string = this._sanitize.sanitize(SecurityContext.RESOURCE_URL, backgroundUrl);\n      this._backgroundImage = this._sanitize.sanitize(SecurityContext.STYLE, 'url(' + sanitizedUrl + ')');\n    }\n  }\n  get backgroundImage(): SafeStyle {\n    return this._backgroundImage;\n  }\n\n  /**\n   * name?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel.\n   * if [email] is not set, then [name] will be the toggle menu text.\n   */\n  @Input('name') name: string;\n\n  /**\n   * email?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel in the [toggle] menu text.\n   * if [email] and [name] are not set, then the toggle menu is not rendered.\n   */\n  @Input('email') email: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) private _layout: TdLayoutComponent,\n              @Optional() private _router: Router,\n              private _sanitize: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this._closeSubscription = this._layout.sidenav.openedChange.subscribe((opened: boolean) => {\n      if (!opened) {\n        this._menuToggled = false;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._closeSubscription) {\n      this._closeSubscription.unsubscribe();\n      this._closeSubscription = undefined;\n    }\n  }\n\n  toggleMenu(): void {\n    if (this.isMenuAvailable) {\n      this._menuToggled = !this._menuToggled;\n    }\n  }\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n      this.close();\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this._layout.toggle();\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this._layout.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this._layout.close();\n  }\n}\n","import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\n\nimport { TdLayoutComponent } from './layout.component';\nimport { TdLayoutToggleDirective, TdLayoutCloseDirective, TdLayoutOpenDirective } from './layout.directives';\nimport { TdLayoutNavComponent } from './layout-nav/layout-nav.component';\nimport { TdLayoutNavListComponent } from './layout-nav-list/layout-nav-list.component';\nimport {\n  TdLayoutNavListToggleDirective, TdLayoutNavListCloseDirective, TdLayoutNavListOpenDirective,\n} from './layout-nav-list/layout-nav-list.directives';\nimport { TdLayoutCardOverComponent } from './layout-card-over/layout-card-over.component';\nimport { TdLayoutManageListComponent } from './layout-manage-list/layout-manage-list.component';\nimport {\n  TdLayoutManageListToggleDirective, TdLayoutManageListCloseDirective, TdLayoutManageListOpenDirective,\n} from './layout-manage-list/layout-manage-list.directives';\nimport { TdLayoutFooterComponent } from './layout-footer/layout-footer.component';\n\nimport {\n  TdNavigationDrawerComponent, TdNavigationDrawerMenuDirective, TdNavigationDrawerToolbarDirective,\n} from './navigation-drawer/navigation-drawer.component';\n\nconst TD_LAYOUTS: Type<any>[] = [\n  TdLayoutComponent,\n  TdLayoutToggleDirective,\n  TdLayoutCloseDirective,\n  TdLayoutOpenDirective,\n\n  TdLayoutNavComponent,\n\n  TdLayoutNavListComponent,\n  TdLayoutNavListToggleDirective,\n  TdLayoutNavListCloseDirective,\n  TdLayoutNavListOpenDirective,\n\n  TdLayoutCardOverComponent,\n\n  TdLayoutManageListComponent,\n  TdLayoutManageListToggleDirective,\n  TdLayoutManageListCloseDirective,\n  TdLayoutManageListOpenDirective,\n\n  TdLayoutFooterComponent,\n\n  TdNavigationDrawerComponent,\n  TdNavigationDrawerMenuDirective,\n  TdNavigationDrawerToolbarDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ScrollDispatchModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatDividerModule,\n  ],\n  declarations: [\n    TD_LAYOUTS,\n  ],\n  exports: [\n    TD_LAYOUTS,\n  ],\n})\nexport class CovalentLayoutModule {\n\n}\n"]}