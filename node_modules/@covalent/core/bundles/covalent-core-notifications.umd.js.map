{"version":3,"file":"covalent-core-notifications.umd.js","sources":["../../../../src/platform/core/notifications/notification-count.component.ts","../../../../src/platform/core/notifications/notifications.module.ts"],"sourcesContent":["import {\n  Component,\n  Input,\n  HostBinding,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef,\n  AfterContentInit,\n} from '@angular/core';\n\nexport enum TdNotificationCountPositionY {\n  Top = 'top',\n  Bottom = 'bottom',\n  Center = 'center',\n}\n\nexport enum TdNotificationCountPositionX {\n  Before = 'before',\n  After = 'after',\n  Center = 'center',\n}\n\nexport const DEFAULT_NOTIFICATION_LIMIT: number = 99;\n\n@Component({\n  selector: 'td-notification-count',\n  styleUrls: ['./notification-count.component.scss'],\n  templateUrl: './notification-count.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNotificationCountComponent implements AfterContentInit {\n  private _notifications: number | boolean = 0;\n  private _positionY: TdNotificationCountPositionY;\n  private _positionX: TdNotificationCountPositionX;\n  private _limit: number = DEFAULT_NOTIFICATION_LIMIT;\n\n  /**\n   * Div content wrapper of `ng-content`.\n   */\n  @ViewChild('content', { static: true }) content: ElementRef;\n\n  /**\n   * color?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the notification tip. Defaults to \"warn\"\n   */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'warn';\n\n  /**\n   * positionX?: TdNotificationCountPositionX or \"before\" | \"after\" | \"center\"\n   * Sets the X position of the notification tip.\n   * Defaults to \"after\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionX(positionX: TdNotificationCountPositionX) {\n    this._positionX = positionX;\n  }\n  get positionX(): TdNotificationCountPositionX {\n    return this._positionX;\n  }\n\n  /**\n   * positionY?: TdNotificationCountPositionY or \"top\" | \"bottom\" | \"center\"\n   * Sets the Y position of the notification tip.\n   * Defaults to \"top\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionY(positionY: TdNotificationCountPositionY) {\n    this._positionY = positionY;\n  }\n  get positionY(): TdNotificationCountPositionY {\n    return this._positionY;\n  }\n\n  /**\n   * notifications?: number | boolean\n   * Number for the notification count. Shows component only if the input is a positive number or 'true'\n   */\n  @Input()\n  set notifications(notifications: number | boolean) {\n    this._notifications = notifications;\n  }\n\n  /**\n   * limit?: number\n   * Limit for notification count. If the number of notifications is greater than limit, then + will be added. Defaults to 99.\n   */\n  @Input()\n  set limit(limit: number) {\n    this._limit = limit;\n  }\n\n  @HostBinding('class.td-notification-hidden')\n  get hideHost(): boolean {\n    return !this.show && !this._hasContent();\n  }\n\n  /**\n   * Sets the component in its 'noCount' state if [notifications] is a boolean 'true'.\n   * Makes the notification tip show without a count.\n   */\n  get noCount(): string | boolean {\n    return this._notifications === true;\n  }\n\n  /**\n   * Notification display string when a count is available.\n   * Anything over 99 gets set as 99+\n   */\n  get notificationsDisplay(): string {\n    if (this._notifications > this._limit) {\n      return `${this._limit}+`;\n    }\n    return this._notifications.toString();\n  }\n\n  /**\n   * Shows notification tip only when [notifications] is true or a positive integer.\n   */\n  get show(): boolean {\n    return this._notifications === true || (!isNaN(<any>this._notifications) && this._notifications > 0);\n  }\n\n  /**\n   * Check if [positionX] and [positionY] have been set as inputs, else use defaults depending on component content.\n   */\n  ngAfterContentInit(): void {\n    if (!this._positionX) {\n      this.positionX = this._hasContent() ? TdNotificationCountPositionX.After : TdNotificationCountPositionX.Center;\n    }\n    if (!this._positionY) {\n      this.positionY = this._hasContent() ? TdNotificationCountPositionY.Top : TdNotificationCountPositionY.Center;\n    }\n  }\n\n  /**\n   * Method to check if element has any kind of content (elements or text)\n   */\n  private _hasContent(): boolean {\n    if (this.content) {\n      const contentElement: HTMLElement = this.content.nativeElement;\n      return contentElement && (contentElement.children.length > 0 || !!contentElement.textContent.trim());\n    }\n    return false;\n  }\n}\n","import { Type } from '@angular/core';\nimport { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdNotificationCountComponent } from './notification-count.component';\n\nconst TD_NOTIFICATIONS: Type<any>[] = [TdNotificationCountComponent];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [TD_NOTIFICATIONS],\n  exports: [TD_NOTIFICATIONS],\n})\nexport class CovalentNotificationsModule {}\n"],"names":["Component","ChangeDetectionStrategy","ViewChild","Input","HostBinding","NgModule","CommonModule"],"mappings":"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"}