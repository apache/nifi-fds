{"version":3,"sources":["ng://@covalent/core/notifications/notification-count.component.ts","ng://@covalent/core/notifications/notifications.module.ts"],"names":["Top","Bottom","Center","Before","After","TdNotificationCountComponent","Object","defineProperty","prototype","this","_positionX","positionX","_positionY","positionY","notifications","_notifications","limit","_limit","show","_hasContent","toString","isNaN","ngAfterContentInit","TdNotificationCountPositionX","TdNotificationCountPositionY","content","contentElement","nativeElement","children","length","textContent","trim","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","Input","HostBinding","color","TD_NOTIFICATIONS","CovalentNotificationsModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"oaAIEA,IAAM,MACNC,OAAS,SACTC,OAAS,aAITC,OAAS,SACTC,MAAQ,QACRF,OAAS,UAKXG,GA6BEC,OAAAC,eACIF,EAAAG,UAAA,YAAS,KAGb,WACE,OAAOC,KAAKC,gBALd,SACcC,GACZF,KAAKC,WAAaC,mCAWpBL,OAAAC,eACIF,EAAAG,UAAA,YAAS,KAGb,WACE,OAAOC,KAAKG,gBALd,SACcC,GACZJ,KAAKG,WAAaC,mCAUpBP,OAAAC,eACIF,EAAAG,UAAA,gBAAa,KADjB,SACkBM,GAChBL,KAAKM,eAAiBD,mCAOxBR,OAAAC,eACIF,EAAAG,UAAA,QAAK,KADT,SACUQ,GACRP,KAAKQ,OAASD,mCAGhBV,OAAAC,eACIF,EAAAG,UAAA,WAAQ,KADZ,WAEE,OAAQC,KAAKS,OAAST,KAAKU,+CAO7Bb,OAAAC,eAAIF,EAAAG,UAAA,UAAO,KAAX,WACE,OAA+B,IAAxBC,KAAKM,gDAOdT,OAAAC,eAAIF,EAAAG,UAAA,uBAAoB,KAAxB,WACE,OAAIC,KAAKM,eAAiBN,KAAKQ,OACnBR,KAAKQ,OAAM,IAEhBR,KAAKM,eAAeK,4CAM7Bd,OAAAC,eAAIF,EAAAG,UAAA,OAAI,KAAR,WACE,OAA+B,IAAxBC,KAAKM,iBAA6BM,MAAWZ,KAAmB,iBAA2B,EAAtBA,KAAKM,gDAMnFV,EAAAG,UAAAc,mBAAA,WACOb,KAAKC,aACRD,KAAKE,UAAYF,KAAKU,cAAgBI,EAA6BnB,MAAQmB,EAA6BrB,QAErGO,KAAKG,aACRH,KAAKI,UAAYJ,KAAKU,cAAgBK,EAA6BxB,IAAMwB,EAA6BtB,SAOlGG,EAAAG,UAAAW,YAAR,WACE,GAAIV,KAAKgB,QAAS,KACZC,EAA8BjB,KAAKgB,QAAQE,cAC/C,OAAOD,IAAoD,EAAjCA,EAAeE,SAASC,UAAgBH,EAAeI,YAAYC,QAE/F,OAAO,uBAvHVC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,wBAEVC,SAAA,8nBACAC,gBAAiBC,EAAAA,wBAAwBC,4iDAYxCC,EAAAA,UAASN,KAAA,CAAC,0BAMVO,EAAAA,yBAOAA,EAAAA,yBAaAA,EAAAA,6BAYAA,EAAAA,qBASAA,EAAAA,wBAKAC,EAAAA,YAAWR,KAAA,CAAC,mCAsDf5B,GA1HA,SAAAA,IAQUI,KAAAM,eAAmC,EAGnCN,KAAAQ,OAbwC,GAwBvCR,KAAAiC,MAAuC,WChC5CC,EAAgC,CACpCtC,GAGFuC,uBAACC,EAAAA,SAAQZ,KAAA,CAAC,CACRa,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZL,GAEFM,QAAS,CACPN,OAKJC,GAbA,SAAAA,oIDIkD","sourcesContent":["import { Component, Input, HostBinding, ChangeDetectionStrategy,\n         ViewChild, ElementRef, AfterContentInit } from '@angular/core';\n\nexport enum TdNotificationCountPositionY {\n  Top = 'top',\n  Bottom = 'bottom',\n  Center = 'center',\n}\n\nexport enum TdNotificationCountPositionX {\n  Before = 'before',\n  After = 'after',\n  Center = 'center',\n}\n\nexport const DEFAULT_NOTIFICATION_LIMIT: number = 99;\n\n@Component({\n  selector: 'td-notification-count',\n  styleUrls: ['./notification-count.component.scss' ],\n  templateUrl: './notification-count.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdNotificationCountComponent implements AfterContentInit {\n\n  private _notifications: number | boolean = 0;\n  private _positionY: TdNotificationCountPositionY;\n  private _positionX: TdNotificationCountPositionX;\n  private _limit: number = DEFAULT_NOTIFICATION_LIMIT;\n\n  /**\n   * Div content wrapper of `ng-content`.\n   */\n  @ViewChild('content') content: ElementRef;\n\n  /**\n   * color?: \"primary\" | \"accent\" | \"warn\"\n   * Sets the theme color of the notification tip. Defaults to \"warn\"\n   */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'warn';\n\n  /**\n   * positionX?: TdNotificationCountPositionX or \"before\" | \"after\" | \"center\"\n   * Sets the X position of the notification tip.\n   * Defaults to \"after\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionX(positionX: TdNotificationCountPositionX) {\n    this._positionX = positionX;\n  }\n  get positionX(): TdNotificationCountPositionX {\n    return this._positionX;\n  }\n\n  /**\n   * positionY?: TdNotificationCountPositionY or \"top\" | \"bottom\" | \"center\"\n   * Sets the Y position of the notification tip.\n   * Defaults to \"top\" if it has content, else 'center'.\n   */\n  @Input()\n  set positionY(positionY: TdNotificationCountPositionY) {\n    this._positionY = positionY;\n  }\n  get positionY(): TdNotificationCountPositionY {\n    return this._positionY;\n  }\n\n  /**\n   * notifications?: number | boolean\n   * Number for the notification count. Shows component only if the input is a positive number or 'true'\n   */\n  @Input()\n  set notifications(notifications: number | boolean) {\n    this._notifications = notifications;\n  }\n\n   /**\n    * limit?: number\n    * Limit for notification count. If the number of notifications is greater than limit, then + will be added. Defaults to 99.\n    */\n  @Input()\n  set limit(limit: number) {\n    this._limit = limit;\n  }\n\n  @HostBinding('class.td-notification-hidden')\n  get hideHost(): boolean {\n    return !this.show && !this._hasContent();\n  }\n\n  /**\n   * Sets the component in its 'noCount' state if [notifications] is a boolean 'true'.\n   * Makes the notification tip show without a count.\n   */\n  get noCount(): string | boolean {\n    return this._notifications === true;\n  }\n\n  /**\n   * Notification display string when a count is available.\n   * Anything over 99 gets set as 99+\n   */\n  get notificationsDisplay(): string {\n    if (this._notifications > this._limit) {\n      return `${this._limit}+`;\n    }\n    return this._notifications.toString();\n  }\n\n  /**\n   * Shows notification tip only when [notifications] is true or a positive integer.\n   */\n  get show(): boolean {\n    return this._notifications === true || (!isNaN(<any>this._notifications) && this._notifications > 0);\n  }\n\n  /**\n   * Check if [positionX] and [positionY] have been set as inputs, else use defaults depending on component content.\n   */\n  ngAfterContentInit(): void {\n    if (!this._positionX) {\n      this.positionX = this._hasContent() ? TdNotificationCountPositionX.After : TdNotificationCountPositionX.Center;\n    }\n    if (!this._positionY) {\n      this.positionY = this._hasContent() ? TdNotificationCountPositionY.Top : TdNotificationCountPositionY.Center;\n    }\n  }\n\n  /**\n   * Method to check if element has any kind of content (elements or text)\n   */\n  private _hasContent(): boolean {\n    if (this.content) {\n      let contentElement: HTMLElement = this.content.nativeElement;\n      return contentElement && (contentElement.children.length > 0 || !!contentElement.textContent.trim());\n    }\n    return false;\n  }\n\n}\n","import { Type } from '@angular/core';\nimport { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdNotificationCountComponent } from './notification-count.component';\n\nconst TD_NOTIFICATIONS: Type<any>[] = [\n  TdNotificationCountComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TD_NOTIFICATIONS,\n  ],\n  exports: [\n    TD_NOTIFICATIONS,\n  ],\n})\nexport class CovalentNotificationsModule {\n\n}\n"]}