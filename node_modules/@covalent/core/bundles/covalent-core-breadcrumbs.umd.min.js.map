{"version":3,"sources":["../../../src/platform/core/breadcrumbs/breadcrumb/breadcrumb.component.ts","../../../../src/platform/core/breadcrumbs/breadcrumbs.component.ts","../../../../src/platform/core/breadcrumbs/breadcrumbs.module.ts"],"names":["TdBreadcrumbComponent","_elementRef","_changeDetectorRef","this","_displayCrumb","_width","_displayIcon","_separatorIcon","Object","defineProperty","prototype","separatorIcon","_this","setTimeout","markForCheck","displayIcon","shouldDisplay","undefined","ngAfterViewInit","getBoundingClientRect","width","_handleIconClick","event","stopPropagation","preventDefault","Component","args","selector","template","host","class","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ChangeDetectorRef","HostBinding","TdBreadcrumbsComponent","_resizeSubscription","Subscription","EMPTY","_widthSubject","Subject","_resizing","hiddenBreadcrumbs","setCrumbIcons","ngOnInit","merge","fromEvent","window","pipe","debounceTime","asObservable","distinctUntilChanged","subscribe","_calculateVisibility","ngDoCheck","nativeElement","next","nativeElementWidth","ngAfterContentInit","_contentChildrenSub","_breadcrumbs","changes","startWith","ngOnDestroy","unsubscribe","element","style","getComputedStyle","borderLeft","parseInt","borderRight","marginLeft","marginRight","paddingLeft","paddingRight","length","breadcrumbArray_1","toArray","forEach","breadcrumb","index","crumbsArray","crumbWidthSum","hiddenCrumbs","i","displayCrumb","push","ContentChildren","descendants","Input","NgModule","imports","CommonModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  HostBinding,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'td-breadcrumb, a[td-breadcrumb]',\n  styleUrls: ['./breadcrumb.component.scss'],\n  templateUrl: './breadcrumb.component.html',\n  /* tslint:disable-next-line */\n  host: {\n    class: 'mat-button td-breadcrumb',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbComponent implements AfterViewInit {\n  private _displayCrumb: boolean = true;\n  private _width: number = 0;\n  private _displayIcon: boolean = true;\n  private _separatorIcon: string = 'chevron_right';\n\n  // Sets the icon url shown between breadcrumbs. Defaults to 'chevron_right'\n  public get separatorIcon(): string {\n    return this._separatorIcon;\n  }\n  public set separatorIcon(separatorIcon: string) {\n    this._separatorIcon = separatorIcon;\n    setTimeout(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  // Should show the right chevron or not before the label\n  public get displayIcon(): boolean {\n    return this._displayIcon;\n  }\n  public set displayIcon(displayIcon: boolean) {\n    this._displayIcon = displayIcon;\n    setTimeout(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  get displayCrumb(): boolean {\n    return this._displayCrumb;\n  }\n\n  /**\n   * Whether to display the crumb or not\n   */\n  set displayCrumb(shouldDisplay: boolean) {\n    this._displayCrumb = shouldDisplay;\n    setTimeout(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Width of the DOM element of the crumb\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Gets the display style of the crumb\n   */\n  @HostBinding('style.display')\n  get displayBinding(): string {\n    // Set the display to none on the component, just in case the end user is hiding\n    // and showing them instead of the component doing itself for reasons like responsive\n    return this._displayCrumb ? undefined : 'none';\n  }\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    // set the width from the actual rendered DOM element\n    setTimeout(() => {\n      this._width = (<HTMLElement>this._elementRef.nativeElement).getBoundingClientRect().width;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /**\n   * Stop click propagation when clicking on icon\n   */\n  _handleIconClick(event: Event): void {\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\n","import {\n  Component,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  DoCheck,\n  ChangeDetectorRef,\n  ElementRef,\n  Input,\n} from '@angular/core';\n\nimport { Subscription, Subject, fromEvent, merge } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';\n\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@Component({\n  selector: 'td-breadcrumbs',\n  styleUrls: ['./breadcrumbs.component.scss'],\n  templateUrl: './breadcrumbs.component.html',\n  /* tslint:disable-next-line */\n  host: {\n    class: 'td-breadcrumbs',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TdBreadcrumbsComponent implements OnInit, DoCheck, AfterContentInit, OnDestroy {\n  private _resizeSubscription: Subscription = Subscription.EMPTY;\n  private _widthSubject: Subject<number> = new Subject<number>();\n  private _contentChildrenSub: Subscription;\n  private _resizing: boolean = false;\n  private _separatorIcon: string = 'chevron_right';\n\n  // all the sub components, which are the individual breadcrumbs\n  @ContentChildren(TdBreadcrumbComponent, { descendants: true }) _breadcrumbs: QueryList<TdBreadcrumbComponent>;\n  // the list of hidden breadcrumbs not shown right now (responsive)\n  hiddenBreadcrumbs: TdBreadcrumbComponent[] = [];\n\n  /**\n   * Sets the icon url shown between breadcrumbs. Defaults to 'chevron_right'.\n   */\n  @Input() public set separatorIcon(separatorIcon: string) {\n    this._separatorIcon = separatorIcon;\n    this.setCrumbIcons();\n  }\n  public get separatorIcon(): string {\n    return this._separatorIcon;\n  }\n\n  constructor(private _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this._resizeSubscription = merge(\n      fromEvent(window, 'resize').pipe(debounceTime(10)),\n      this._widthSubject.asObservable().pipe(distinctUntilChanged()),\n    ).subscribe(() => {\n      if (!this._resizing) {\n        this._resizing = true;\n        setTimeout(() => {\n          this._calculateVisibility();\n          this._resizing = false;\n          this._changeDetectorRef.markForCheck();\n        }, 100);\n      }\n    });\n  }\n\n  ngDoCheck(): void {\n    if (this._elementRef && this._elementRef.nativeElement) {\n      this._widthSubject.next(this.nativeElementWidth);\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._contentChildrenSub = this._breadcrumbs.changes.pipe(startWith(this._breadcrumbs)).subscribe(() => {\n      this.setCrumbIcons();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._resizeSubscription.unsubscribe();\n    this._contentChildrenSub.unsubscribe();\n  }\n\n  /*\n   * Current width of the element container\n   */\n  get nativeElementWidth(): number {\n    const element: HTMLElement = <HTMLElement>this._elementRef.nativeElement;\n    // Need to take into account border, margin and padding that might be around all the crumbs\n    const style: CSSStyleDeclaration = window.getComputedStyle(element);\n    const borderLeft: number = parseInt(style.borderLeft, 10);\n    const borderRight: number = parseInt(style.borderRight, 10);\n    const marginLeft: number = parseInt(style.marginLeft, 10);\n    const marginRight: number = parseInt(style.marginRight, 10);\n    const paddingLeft: number = parseInt(style.paddingLeft, 10);\n    const paddingRight: number = parseInt(style.paddingRight, 10);\n\n    return (\n      element.getBoundingClientRect().width -\n      borderLeft -\n      borderRight -\n      marginLeft -\n      marginRight -\n      paddingLeft -\n      paddingRight\n    );\n  }\n\n  /**\n   * The total count of individual breadcrumbs\n   */\n  get count(): number {\n    return this._breadcrumbs ? this._breadcrumbs.length : 0;\n  }\n\n  /**\n   * Set the crumb icon separators\n   */\n  private setCrumbIcons(): void {\n    if (this._breadcrumbs) {\n      const breadcrumbArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n      breadcrumbArray.forEach((breadcrumb: TdBreadcrumbComponent, index: number) => {\n        breadcrumb.separatorIcon = this.separatorIcon;\n        // don't show the icon on the last breadcrumb\n        breadcrumb.displayIcon = index < breadcrumbArray.length - 1;\n      });\n    }\n  }\n\n  private _calculateVisibility(): void {\n    const crumbsArray: TdBreadcrumbComponent[] = this._breadcrumbs.toArray();\n    let crumbWidthSum: number = 0;\n    const hiddenCrumbs: TdBreadcrumbComponent[] = [];\n    // loop through crumbs in reverse order to calculate which ones should be removed\n    for (let i: number = crumbsArray.length - 1; i >= 0; i--) {\n      const breadcrumb: TdBreadcrumbComponent = crumbsArray[i];\n      // if crumb exceeds width, then we skip it from the sum and add it into the hiddencrumbs array\n      // and hide it\n      if (crumbWidthSum + breadcrumb.width > this.nativeElementWidth) {\n        breadcrumb.displayCrumb = false;\n        hiddenCrumbs.push(breadcrumb);\n      } else {\n        // else we show it\n        breadcrumb.displayCrumb = true;\n      }\n      crumbWidthSum += breadcrumb.width;\n    }\n    this.hiddenBreadcrumbs = hiddenCrumbs;\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdBreadcrumbsComponent } from './breadcrumbs.component';\nimport { TdBreadcrumbComponent } from './breadcrumb/breadcrumb.component';\n\n@NgModule({\n  imports: [CommonModule, MatIconModule],\n  declarations: [TdBreadcrumbsComponent, TdBreadcrumbComponent],\n  exports: [TdBreadcrumbsComponent, TdBreadcrumbComponent],\n})\nexport class CovalentBreadcrumbsModule {}\n"]}