{"version":3,"sources":["../../../../src/platform/core/json-formatter/json-formatter.component.ts","../../../../src/platform/core/json-formatter/json-formatter.module.ts"],"names":["TdJsonFormatterComponent","_changeDetectorRef","_dir","this","_open","_levelsOpen","Object","defineProperty","prototype","levelsOpen","Number","isInteger","Error","elipsis","_key","length","KEY_MAX_LENGTH","substring","key","_data","data","parseChildren","_children","dir","refresh","markForCheck","toggle","isObject","getType","isArray","Array","hasChildren","getValue","value","type","Date","toString","replace","getObjectName","object","date","call","isNaN","getTime","constructor","results","exec","getPreview","previewData","_this","startChar","endChar","slice","PREVIEW_LIMIT","map","obj","previewString","join","ellipsis","PREVIEW_STRING_MAX_LENGTH","keys","Component","args","changeDetection","ChangeDetectionStrategy","OnPush","selector","template","animations","tdCollapseAnimation","ChangeDetectorRef","Dir","decorators","Optional","Input","NgModule","imports","CommonModule","MatTooltipModule","MatIconModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, Input, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';\nimport { Dir } from '@angular/cdk/bidi';\nimport { tdCollapseAnimation } from '@covalent/core/common';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'td-json-formatter',\n  styleUrls: ['./json-formatter.component.scss'],\n  templateUrl: './json-formatter.component.html',\n  animations: [tdCollapseAnimation],\n})\nexport class TdJsonFormatterComponent {\n  /**\n   * Max length for property names. Any names bigger than this get trunctated.\n   */\n  private static KEY_MAX_LENGTH: number = 30;\n\n  /**\n   * Max length for preview string. Any names bigger than this get trunctated.\n   */\n  private static PREVIEW_STRING_MAX_LENGTH: number = 80;\n\n  /**\n   * Max tooltip preview elements.\n   */\n  private static PREVIEW_LIMIT: number = 5;\n\n  private _key: string;\n  private _data: any;\n  private _children: string[];\n  private _open: boolean = false;\n  private _levelsOpen: number = 0;\n\n  /**\n   * levelsOpen?: number\n   * Levels opened by default when JS object is formatted and rendered.\n   */\n  @Input('levelsOpen')\n  set levelsOpen(levelsOpen: number) {\n    if (!Number.isInteger(levelsOpen)) {\n      throw new Error('[levelsOpen] needs to be an integer.');\n    }\n    this._levelsOpen = levelsOpen;\n    this._open = levelsOpen > 0;\n  }\n  get levelsOpen(): number {\n    return this._levelsOpen;\n  }\n\n  get open(): boolean {\n    return this._open;\n  }\n\n  /**\n   * key?: string\n   * Tag to be displayed next to formatted object.\n   */\n  @Input('key')\n  set key(key: string) {\n    this._key = key;\n  }\n  get key(): string {\n    const elipsis: string = this._key && this._key.length > TdJsonFormatterComponent.KEY_MAX_LENGTH ? '…' : '';\n    return this._key ? this._key.substring(0, TdJsonFormatterComponent.KEY_MAX_LENGTH) + elipsis : this._key;\n  }\n\n  /**\n   * data: any\n   * JS object to be formatted.\n   */\n  @Input('data')\n  set data(data: any) {\n    this._data = data;\n    this.parseChildren();\n  }\n  get data(): any {\n    return this._data;\n  }\n\n  get children(): string[] {\n    return this._children;\n  }\n\n  get isRTL(): boolean {\n    if (this._dir) {\n      return this._dir.dir === 'rtl';\n    }\n    return false;\n  }\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir: Dir) {}\n\n  /**\n   * Refreshes json-formatter and rerenders [data]\n   */\n  refresh(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Toggles collapse/expanded state of component.\n   */\n  toggle(): void {\n    this._open = !this._open;\n  }\n\n  isObject(): boolean {\n    return this.getType(this._data) === 'object';\n  }\n\n  isArray(): boolean {\n    return Array.isArray(this._data);\n  }\n\n  hasChildren(): boolean {\n    return this._children && this._children.length > 0;\n  }\n\n  /**\n   * Gets parsed value depending on value type.\n   */\n  getValue(value: any): string {\n    const type: string = this.getType(value);\n    if (type === 'undefined' || type === 'null') {\n      return type;\n    } else if (type === 'date') {\n      value = new Date(value).toString();\n    } else if (type === 'string') {\n      value = '\"' + value + '\"';\n    } else if (type === 'function') {\n      // Remove content of the function\n      return (\n        value\n          .toString()\n          .replace(/[\\r\\n]/g, '')\n          .replace(/\\{.*\\}/, '') + '{…}'\n      );\n    } else if (Array.isArray(value)) {\n      return this.getObjectName() + ' [' + value.length + ']';\n    }\n    return value;\n  }\n\n  /**\n   * Gets type of object.\n   * returns 'null' if object is null and 'date' if value is object and can be parsed to a date.\n   */\n  getType(object: any): string {\n    if (typeof object === 'object') {\n      if (!object) {\n        return 'null';\n      }\n      if (Array.isArray(object)) {\n        return 'object';\n      }\n      const date: Date = new Date(object);\n      if (Object.prototype.toString.call(date) === '[object Date]' && !Number.isNaN(date.getTime())) {\n        return 'date';\n      }\n    }\n    return typeof object;\n  }\n\n  /**\n   * Generates string representation depending if its an object or function.\n   * see: http://stackoverflow.com/a/332429\n   */\n  getObjectName(): string {\n    const object: any = this._data;\n    if (this.isObject() && !object.constructor) {\n      return 'Object';\n    }\n    const funcNameRegex: RegExp = /function (.{1,})\\(/;\n    const results: RegExpExecArray = funcNameRegex.exec(object.constructor.toString());\n    if (results && results.length > 1) {\n      return results[1];\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * Creates preview of nodes children to render in tooltip depending if its an array or an object.\n   */\n  getPreview(): string {\n    let previewData: string[];\n    let startChar: string = '{ ';\n    let endChar: string = ' }';\n    if (this.isArray()) {\n      const previewArray: any[] = this._data.slice(0, TdJsonFormatterComponent.PREVIEW_LIMIT);\n      previewData = previewArray.map((obj: any) => {\n        return this.getValue(obj);\n      });\n      startChar = '[';\n      endChar = ']';\n    } else {\n      const previewKeys: string[] = this._children.slice(0, TdJsonFormatterComponent.PREVIEW_LIMIT);\n      previewData = previewKeys.map((key: string) => {\n        return key + ': ' + this.getValue(this._data[key]);\n      });\n    }\n    const previewString: string = previewData.join(', ');\n    const ellipsis: string =\n      previewData.length >= TdJsonFormatterComponent.PREVIEW_LIMIT ||\n      previewString.length > TdJsonFormatterComponent.PREVIEW_STRING_MAX_LENGTH\n        ? '…'\n        : '';\n    return (\n      startChar + previewString.substring(0, TdJsonFormatterComponent.PREVIEW_STRING_MAX_LENGTH) + ellipsis + endChar\n    );\n  }\n\n  private parseChildren(): void {\n    if (this.isObject()) {\n      this._children = Object.keys(this._data);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { TdJsonFormatterComponent } from './json-formatter.component';\n\n@NgModule({\n  imports: [CommonModule, MatTooltipModule, MatIconModule],\n  declarations: [TdJsonFormatterComponent],\n  exports: [TdJsonFormatterComponent],\n})\nexport class CovalentJsonFormatterModule {}\n"]}