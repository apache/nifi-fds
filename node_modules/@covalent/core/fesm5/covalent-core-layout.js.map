{"version":3,"file":"covalent-core-layout.js.map","sources":["ng://@covalent/core/layout/layout.component.ts","ng://@covalent/core/layout/layout-toggle.class.ts","ng://@covalent/core/layout/layout.directives.ts","ng://@covalent/core/layout/layout-nav/layout-nav.component.ts","ng://@covalent/core/layout/layout-nav-list/layout-nav-list.component.ts","ng://@covalent/core/layout/layout-nav-list/layout-nav-list.directives.ts","ng://@covalent/core/layout/layout-card-over/layout-card-over.component.ts","ng://@covalent/core/layout/layout-manage-list/layout-manage-list.component.ts","ng://@covalent/core/layout/layout-manage-list/layout-manage-list.directives.ts","ng://@covalent/core/layout/layout-footer/layout-footer.component.ts","ng://@covalent/core/layout/navigation-drawer/navigation-drawer.component.ts","ng://@covalent/core/layout/layout.module.ts"],"sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from './layout-toggle.class';\n\n@Component({\n  selector: 'td-layout',\n  styleUrls: ['./layout.component.scss' ],\n  templateUrl: './layout.component.html',\n})\nexport class TdLayoutComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"over\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'over';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"false\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = false;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"320px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '320px';\n\n  /**\n   * containerAutosize?: boolean\n   *\n   * Sets \"autosize\" of the sidenav-container.\n   * Defaults to \"false\".\n   *\n   * See documentation for more info and potential performance risks.\n   * \n   * https://github.com/angular/material2/blob/master/src/lib/sidenav/sidenav.md#resizing-an-open-sidenav\n   */\n  @Input('containerAutosize') containerAutosize: boolean = false;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.close();\n  }\n\n}\n","import { Input, HostBinding, HostListener, Renderer2, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ICanDisable, mixinDisabled } from '@covalent/core/common';\n\nimport { Subscription } from 'rxjs';\n\nexport interface ILayoutTogglable {\n  opened: boolean;\n  sidenav: MatSidenav;\n  toggle(): Promise<MatDrawerToggleResult>;\n  open(): Promise<MatDrawerToggleResult>;\n  close(): Promise<MatDrawerToggleResult>;\n}\n\nexport class LayoutToggleBase { }\n\n/* tslint:disable-next-line */\nexport const _TdLayoutToggleMixinBase = mixinDisabled(LayoutToggleBase);\n\nexport abstract class LayoutToggle extends _TdLayoutToggleMixinBase implements AfterViewInit, OnDestroy, ICanDisable {\n\n  private _toggleSubs: Subscription;\n\n  private _initialized: boolean = false;\n  private _hideWhenOpened: boolean = false;\n\n  /**\n   * hideWhenOpened?: boolean\n   * When this is set to true, the host will be hidden when\n   * the sidenav is opened.\n   */\n  @Input('hideWhenOpened')\n  set hideWhenOpened(hideWhenOpened: boolean) {\n    this._hideWhenOpened = hideWhenOpened;\n    if (this._initialized) {\n      this._toggleVisibility();\n    }\n  }\n\n  constructor(protected _layout: ILayoutTogglable,\n              private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    super();\n    // if layout has not been provided\n    // show warn message\n    if (!this._layout) {\n      this._noLayoutMessage();\n    }\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-menu-button');\n  }\n\n  ngAfterViewInit(): void {\n    this._initialized = true;\n    if (this._layout && this._layout.sidenav) {\n      this._toggleSubs = this._layout.sidenav._animationStarted.subscribe(() => {\n        this._toggleVisibility();\n      });\n    }\n    // execute toggleVisibility since the onOpenStart and onCloseStart\n    // methods might not be executed always when the element is rendered\n    this._toggleVisibility();\n  }\n\n  ngOnDestroy(): void {\n    if (this._toggleSubs) {\n      this._toggleSubs.unsubscribe();\n      this._toggleSubs = undefined;\n    }\n  }\n\n  /**\n   * Listens to host click event to trigger the layout toggle\n   */\n  @HostListener('click', ['$event'])\n  clickListener(event: Event): void {\n    event.preventDefault();\n    if (!this.disabled) {\n      // if layout has been provided, try triggering the click on it\n      // else show warn message\n      if (this._layout && this._layout.open) {\n        this.onClick();\n      } else {\n        this._noLayoutMessage();\n      }\n    }\n  }\n\n  abstract onClick(): void;\n\n  private _toggleVisibility(): void {\n    if (this._layout) {\n      if (this._layout.sidenav.opened && this._hideWhenOpened) {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'display', 'none');\n      } else {\n        this._renderer.setStyle(this._elementRef.nativeElement, 'display', '');\n      }\n    }\n  }\n\n  private _noLayoutMessage(): void {\n    /* tslint:disable-next-line */\n    console.warn('Covalent: Parent layout not found for layout toggle directive');\n  }\n\n}\n","import { Optional, Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutComponent } from './layout.component';\nimport { LayoutToggle } from './layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutToggle]',\n})\nexport class TdLayoutToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutToggle') \n  set tdLayoutToggle(tdLayoutToggle: boolean) {\n    this.disabled = !(<any>tdLayoutToggle === '' || tdLayoutToggle);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutClose]',\n})\nexport class TdLayoutCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutClose') \n  set tdLayoutClose(tdLayoutClose: boolean) {\n    this.disabled = !(<any>tdLayoutClose === '' || tdLayoutClose);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutOpen]',\n})\nexport class TdLayoutOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutOpen') \n  set tdLayoutClose(tdLayoutOpen: boolean) {\n    this.disabled = !(<any>tdLayoutOpen === '' || tdLayoutOpen);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutComponent)) layout: TdLayoutComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n","import { Component, Input, forwardRef, Optional, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TdLayoutComponent } from '../layout.component';\n\n@Component({\n  selector: 'td-layout-nav',\n  styleUrls: ['./layout-nav.component.scss' ],\n  templateUrl: './layout-nav.component.html',\n})\nexport class TdLayoutNavComponent {\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n}\n","import { Component, Input, ViewChild, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-nav-list',\n  styleUrls: ['./layout-nav-list.component.scss' ],\n  templateUrl: './layout-nav-list.component.html',\n})\nexport class TdLayoutNavListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * toolbarTitle?: string\n   *\n   * Title set in toolbar.\n   */\n  @Input('toolbarTitle') toolbarTitle: string;\n\n  /**\n   * icon?: string\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"350px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '350px';\n\n  /**\n   * containerAutosize?: boolean\n   *\n   * Sets \"autosize\" of the sidenav-container.\n   * Defaults to \"false\".\n   *\n   * See documentation for more info and potential performance risks.\n   * \n   * https://github.com/angular/material2/blob/master/src/lib/sidenav/sidenav.md#resizing-an-open-sidenav\n   */\n  @Input('containerAutosize') containerAutosize: boolean = false;\n  \n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and toolbarTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Optional() private _router: Router) {}\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.close();\n  }\n\n}\n","import { Optional, Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutNavListComponent } from './layout-nav-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutNavListToggle]',\n})\nexport class TdLayoutNavListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListToggle') \n  set tdLayoutNavListToggle(tdLayoutNavListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutNavListToggle === '' || tdLayoutNavListToggle);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListClose]',\n})\nexport class TdLayoutNavListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutNavListClose') \n  set tdLayoutNavListClose(tdLayoutNavListClose: boolean) {\n    this.disabled = !(<any>tdLayoutNavListClose === '' || tdLayoutNavListClose);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutNavListOpen]',\n})\nexport class TdLayoutNavListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutNavListOpen') \n  set tdLayoutNavListOpen(tdLayoutNavListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutNavListOpen === '' || tdLayoutNavListOpen);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutNavListComponent)) layout: TdLayoutNavListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n","import { Component } from '@angular/core';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'td-layout-card-over',\n  styleUrls: ['./layout-card-over.component.scss' ],\n  templateUrl: './layout-card-over.component.html',\n})\nexport class TdLayoutCardOverComponent {\n\n  /**\n   * cardTitle?: string\n   *\n   * Title set in card.\n   */\n  @Input('cardTitle') cardTitle: string;\n\n  /**\n   * cardSubtitle?: string\n   *\n   * Subtitle set in card.\n   */\n  @Input('cardSubtitle') cardSubtitle: string;\n\n  /**\n   * cardWidth?: string\n   *\n   * Card flex width in %.\n   * Defaults to 70%.\n   */\n  @Input('cardWidth') cardWidth: number = 70;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, primary is used.\n   */\n  @Input('color') color: string = 'primary';\n\n}\n","import { Component, Directive, Input, ViewChild } from '@angular/core';\n\nimport { MatSidenav, MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { ILayoutTogglable } from '../layout-toggle.class';\n\n@Component({\n  selector: 'td-layout-manage-list',\n  styleUrls: ['./layout-manage-list.component.scss' ],\n  templateUrl: './layout-manage-list.component.html',\n})\nexport class TdLayoutManageListComponent implements ILayoutTogglable {\n\n  @ViewChild(MatSidenav) sidenav: MatSidenav;\n\n  /**\n   * mode?: 'side', 'push' or 'over'\n   *\n   * The mode or styling of the sidenav.\n   * Defaults to \"side\".\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('mode') mode: 'side' | 'push' | 'over' = 'side';\n\n  /**\n   * opened?: boolean\n   *\n   * Whether or not the sidenav is opened. Use this binding to open/close the sidenav.\n   * Defaults to \"true\".\n   *\n   * See \"MatSidenav\" documentation for more info.\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('opened') opened: boolean = true;\n\n  /**\n   * sidenavWidth?: string\n   *\n   * Sets the \"width\" of the sidenav in either \"px\" or \"%\"\n   * Defaults to \"257px\".\n   *\n   * https://github.com/angular/material2/tree/master/src/lib/sidenav\n   */\n  @Input('sidenavWidth') sidenavWidth: string = '257px';\n\n  /**\n   * containerAutosize?: boolean\n   *\n   * Sets \"autosize\" of the sidenav-container.\n   * Defaults to \"false\".\n   *\n   * See documentation for more info and potential performance risks.\n   * \n   * https://github.com/angular/material2/blob/master/src/lib/sidenav/sidenav.md#resizing-an-open-sidenav\n   */\n  @Input('containerAutosize') containerAutosize: boolean = false;\n\n  /**\n   * Checks if `ESC` should close the sidenav\n   * Should only close it for `push` and `over` modes\n   */\n  get disableClose(): boolean {\n    return this.mode === 'side';\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.toggle(!this.sidenav.opened);\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this.sidenav.close();\n  }\n\n}\n","import { Optional, Directive, Input, Renderer2, ElementRef, Inject, forwardRef } from '@angular/core';\nimport { TdLayoutManageListComponent } from './layout-manage-list.component';\nimport { LayoutToggle } from '../layout-toggle.class';\n\n@Directive({\n  selector: '[tdLayoutManageListToggle]',\n})\nexport class TdLayoutManageListToggleDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListToggle') \n  set tdLayoutManageListToggle(tdLayoutManageListToggle: boolean) {\n    this.disabled = !(<any>tdLayoutManageListToggle === '' || tdLayoutManageListToggle);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.toggle();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListClose]',\n})\nexport class TdLayoutManageListCloseDirective extends LayoutToggle {\n  \n  @Input('tdLayoutManageListClose') \n  set tdLayoutManageListClose(tdLayoutManageListClose: boolean) {\n    this.disabled = !(<any>tdLayoutManageListClose === '' || tdLayoutManageListClose);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.close();\n  }\n}\n\n@Directive({\n  selector: '[tdLayoutManageListOpen]',\n})\nexport class TdLayoutManageListOpenDirective extends LayoutToggle {\n\n  @Input('tdLayoutManageListOpen') \n  set tdLayoutManageListOpen(tdLayoutManageListOpen: boolean) {\n    this.disabled = !(<any>tdLayoutManageListOpen === '' || tdLayoutManageListOpen);\n  }\n\n  constructor(@Optional() @Inject(forwardRef(() => TdLayoutManageListComponent)) layout: TdLayoutManageListComponent,\n              renderer: Renderer2,\n              elementRef: ElementRef) {\n    super(layout, renderer, elementRef);\n  }\n\n  onClick(): void {\n    this._layout.open();\n  }\n}\n","import { Component, Input, Renderer2, ElementRef } from '@angular/core';\n\n@Component({\n  /* tslint:disable-next-line */\n  selector: 'td-layout-footer,td-layout-footer-inner',\n  styleUrls: ['./layout-footer.component.scss' ],\n  templateUrl: './layout-footer.component.html',\n})\nexport class TdLayoutFooterComponent {\n\n  private _color: 'primary' | 'accent' | 'warn';\n\n  /**\n   * color?: string\n   *\n   * Optional color option: primary | accent | warn.\n   */\n  @Input('color')\n  set color(color: 'primary' | 'accent' | 'warn') {\n    if (color) {\n      this._renderer.removeClass(this._elementRef.nativeElement, 'mat-' + this._color);\n      this._color = color;\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-' + this._color);\n    }\n  }\n  get color(): 'primary' | 'accent' | 'warn' {\n    return this._color;\n  }\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef) {\n    this._renderer.addClass(this._elementRef.nativeElement, 'td-layout-footer');\n  }\n\n}\n","import { Component, Directive, Input, ContentChildren, OnInit, OnDestroy, forwardRef, Inject,\n         QueryList, SecurityContext, Optional } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SafeResourceUrl, SafeStyle, DomSanitizer } from '@angular/platform-browser';\nimport { MatDrawerToggleResult } from '@angular/material/sidenav';\n\nimport { Subscription } from 'rxjs';\n\nimport { TdLayoutComponent } from '../layout.component';\n\nimport { tdCollapseAnimation } from '@covalent/core/common';\n\n@Directive({\n  selector: '[td-navigation-drawer-menu]',\n})\nexport class TdNavigationDrawerMenuDirective {\n\n}\n\n@Directive({\n  selector: '[td-navigation-drawer-toolbar]',\n})\nexport class TdNavigationDrawerToolbarDirective {\n\n}\n\n@Component({\n  selector: 'td-navigation-drawer',\n  styleUrls: ['./navigation-drawer.component.scss' ],\n  templateUrl: './navigation-drawer.component.html',\n  animations: [ tdCollapseAnimation ],\n})\nexport class TdNavigationDrawerComponent implements OnInit, OnDestroy {\n\n  private _closeSubscription: Subscription;\n  private _menuToggled: boolean = false;\n  private _backgroundImage: SafeStyle;\n\n  get menuToggled(): boolean {\n    return this._menuToggled;\n  }\n\n  @ContentChildren(TdNavigationDrawerMenuDirective) _drawerMenu: QueryList<TdNavigationDrawerMenuDirective>;\n\n  @ContentChildren(TdNavigationDrawerToolbarDirective) _toolbar: QueryList<TdNavigationDrawerToolbarDirective>;\n\n  /**\n   * Checks if there is a [TdNavigationDrawerMenuDirective] has content.\n   */\n  get isMenuAvailable(): boolean {\n    return this._drawerMenu ? this._drawerMenu.length > 0 : false;\n  }\n\n  /**\n   * Checks if there is a [TdNavigationDrawerToolbarDirective] has content.\n   */\n  get isCustomToolbar(): boolean {\n    return this._toolbar ? this._toolbar.length > 0 : false;\n  }\n\n  /**\n   * Checks if there is a background image for the toolbar.\n   */\n  get isBackgroundAvailable(): boolean {\n    return !!this._backgroundImage;\n  }\n\n  /**\n   * sidenavTitle?: string\n   * Title set in sideNav.\n   */\n  @Input('sidenavTitle') sidenavTitle: string;\n\n  /**\n   * icon?: string\n   *\n   * icon name to be displayed before the title\n   */\n  @Input('icon') icon: string;\n\n  /**\n   * logo?: string\n   *\n   * logo icon name to be displayed before the title.\n   * If [icon] is set, then this will not be shown.\n   */\n  @Input('logo') logo: string;\n\n  /**\n   * avatar?: string\n   *\n   * avatar url to be displayed before the title\n   * If [icon] or [logo] are set, then this will not be shown.\n   */\n  @Input('avatar') avatar: string;\n\n  /**\n   * color?: string\n   *\n   * toolbar color option: primary | accent | warn.\n   * If [color] is not set, default is used.\n   */\n  @Input('color') color: string;\n\n  /**\n   * navigationRoute?: string\n   *\n   * option to set the combined route for the icon, logo, and sidenavTitle.\n   */\n  @Input('navigationRoute') navigationRoute: string;\n\n  /**\n   * backgroundUrl?: SafeResourceUrl\n   *\n   * image to be displayed as the background of the toolbar.\n   * URL used will be sanitized, but it should be always from a trusted source to avoid XSS.\n   */\n  @Input('backgroundUrl')\n  // TODO Angular complains with warnings if this is type [SafeResourceUrl].. so we will make it <any> until its fixed.\n  // https://github.com/webpack/webpack/issues/2977\n  set backgroundUrl(backgroundUrl: any) {\n    if (backgroundUrl) {\n      let sanitizedUrl: string = this._sanitize.sanitize(SecurityContext.RESOURCE_URL, backgroundUrl);\n      this._backgroundImage = this._sanitize.sanitize(SecurityContext.STYLE, 'url(' + sanitizedUrl + ')');\n    }\n  }\n  get backgroundImage(): SafeStyle {\n    return this._backgroundImage;\n  }\n\n  /**\n   * name?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel.\n   * if [email] is not set, then [name] will be the toggle menu text.\n   */\n  @Input('name') name: string;\n\n  /**\n   * email?: string\n   *\n   * string to be displayed as part of the navigation drawer sublabel in the [toggle] menu text.\n   * if [email] and [name] are not set, then the toggle menu is not rendered.\n   */\n  @Input('email') email: string;\n\n  /**\n   * Checks if router was injected.\n   */\n  get routerEnabled(): boolean {\n    return !!this._router && !!this.navigationRoute;\n  }\n\n  constructor(@Inject(forwardRef(() => TdLayoutComponent)) private _layout: TdLayoutComponent,\n              @Optional() private _router: Router,\n              private _sanitize: DomSanitizer) {}\n\n  ngOnInit(): void {\n    this._closeSubscription = this._layout.sidenav.openedChange.subscribe((opened: boolean) => {\n      if (!opened) {\n        this._menuToggled = false;\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this._closeSubscription) {\n      this._closeSubscription.unsubscribe();\n      this._closeSubscription = undefined;\n    }\n  }\n\n  toggleMenu(): void {\n    if (this.isMenuAvailable) {\n      this._menuToggled = !this._menuToggled;\n    }\n  }\n\n  handleNavigationClick(): void {\n    if (this.routerEnabled) {\n      this._router.navigateByUrl(this.navigationRoute);\n      this.close();\n    }\n  }\n\n  /**\n   * Proxy toggle method to access sidenav from outside (from td-layout template).\n   */\n  public toggle(): Promise<MatDrawerToggleResult> {\n    return this._layout.toggle();\n  }\n\n  /**\n   * Proxy open method to access sidenav from outside (from td-layout template).\n   */\n  public open(): Promise<MatDrawerToggleResult> {\n    return this._layout.open();\n  }\n\n  /**\n   * Proxy close method to access sidenav from outside (from td-layout template).\n   */\n  public close(): Promise<MatDrawerToggleResult> {\n    return this._layout.close();\n  }\n}\n","import { Type } from '@angular/core';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\n\nimport { TdLayoutComponent } from './layout.component';\nimport { TdLayoutToggleDirective, TdLayoutCloseDirective, TdLayoutOpenDirective } from './layout.directives';\nimport { TdLayoutNavComponent } from './layout-nav/layout-nav.component';\nimport { TdLayoutNavListComponent } from './layout-nav-list/layout-nav-list.component';\nimport {\n  TdLayoutNavListToggleDirective, TdLayoutNavListCloseDirective, TdLayoutNavListOpenDirective,\n} from './layout-nav-list/layout-nav-list.directives';\nimport { TdLayoutCardOverComponent } from './layout-card-over/layout-card-over.component';\nimport { TdLayoutManageListComponent } from './layout-manage-list/layout-manage-list.component';\nimport {\n  TdLayoutManageListToggleDirective, TdLayoutManageListCloseDirective, TdLayoutManageListOpenDirective,\n} from './layout-manage-list/layout-manage-list.directives';\nimport { TdLayoutFooterComponent } from './layout-footer/layout-footer.component';\n\nimport {\n  TdNavigationDrawerComponent, TdNavigationDrawerMenuDirective, TdNavigationDrawerToolbarDirective,\n} from './navigation-drawer/navigation-drawer.component';\n\nconst TD_LAYOUTS: Type<any>[] = [\n  TdLayoutComponent,\n  TdLayoutToggleDirective,\n  TdLayoutCloseDirective,\n  TdLayoutOpenDirective,\n\n  TdLayoutNavComponent,\n\n  TdLayoutNavListComponent,\n  TdLayoutNavListToggleDirective,\n  TdLayoutNavListCloseDirective,\n  TdLayoutNavListOpenDirective,\n\n  TdLayoutCardOverComponent,\n\n  TdLayoutManageListComponent,\n  TdLayoutManageListToggleDirective,\n  TdLayoutManageListCloseDirective,\n  TdLayoutManageListOpenDirective,\n\n  TdLayoutFooterComponent,\n\n  TdNavigationDrawerComponent,\n  TdNavigationDrawerMenuDirective,\n  TdNavigationDrawerToolbarDirective,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ScrollDispatchModule,\n    MatSidenavModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatDividerModule,\n  ],\n  declarations: [\n    TD_LAYOUTS,\n  ],\n  exports: [\n    TD_LAYOUTS,\n  ],\n})\nexport class CovalentLayoutModule {\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
