/**
 * @fileoverview added by tsickle
 * Generated from: side-sheet-container.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FocusMonitor, FocusTrapFactory } from '@angular/cdk/a11y';
import { BasePortalOutlet, CdkPortalOutlet } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, Inject, Optional, ViewChild, ViewEncapsulation, } from '@angular/core';
import { tdSideSheetAnimations } from './side-sheet.animation';
import { CovalentSideSheetConfig } from './side-sheet.config';
/**
 * @return {?}
 */
export function _getFocusedElementPierceShadowDom() {
    /** @type {?} */
    let activeElement = typeof document !== 'undefined' && document ? ((/** @type {?} */ (document.activeElement))) : null;
    while (activeElement && activeElement.shadowRoot) {
        /** @type {?} */
        const newActiveElement = (/** @type {?} */ (activeElement.shadowRoot.activeElement));
        if (newActiveElement === activeElement) {
            break;
        }
        else {
            activeElement = newActiveElement;
        }
    }
    return activeElement;
}
/**
 * Base class for the `CovalentSideSheetContainer`. The base class does not implement
 * animations as these are left to implementers of the side-sheet container.
 * @abstract
 */
export class _CovalentSideSheetContainerBase extends BasePortalOutlet {
    /**
     * @param {?} _elementRef
     * @param {?} _focusTrapFactory
     * @param {?} _changeDetectorRef
     * @param {?} _document
     * @param {?} _config
     * @param {?=} _focusMonitor
     */
    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config, _focusMonitor) {
        super();
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        this._changeDetectorRef = _changeDetectorRef;
        this._config = _config;
        this._focusMonitor = _focusMonitor;
        /**
         * Emits when an animation state changes.
         */
        this._animationStateChanged = new EventEmitter();
        /**
         * Element that was focused before the side-sheet was opened. Save this to restore upon close.
         */
        this._elementFocusedBeforeSideSheetWasOpened = null;
        /**
         * Type of interaction that led to the side-sheet being closed. This is used to determine
         * whether the focus style will be applied when returning focus to its original location
         * after the side-sheet is closed.
         */
        this._closeInteractionType = null;
        /**
         * Attaches a DOM portal to the side-sheet container.
         * @param portal Portal to be attached.
         * @deprecated To be turned into a method.
         */
        this.attachDomPortal = (/**
         * @param {?} portal
         * @return {?}
         */
        (portal) => {
            return this._portalOutlet.attachDomPortal(portal);
        });
        this._ariaLabelledBy = _config.ariaLabelledBy || null;
        this._document = _document;
    }
    /**
     * Initializes the side-sheet container with the attached content.
     * @return {?}
     */
    _initializeWithAttachedContent() {
        this._setupFocusTrap();
        // Save the previously focused element. This element will be re-focused
        // when the side-sheet closes.
        this._capturePreviouslyFocusedElement();
    }
    /**
     * Attach a ComponentPortal as content to this side-sheet container.
     * @template T
     * @param {?} portal Portal to be attached as the side-sheet content.
     * @return {?}
     */
    attachComponentPortal(portal) {
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /**
     * Attach a TemplatePortal as content to this side-sheet container.
     * @template C
     * @param {?} portal Portal to be attached as the side-sheet content.
     * @return {?}
     */
    attachTemplatePortal(portal) {
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    /**
     * Moves focus back into the side-sheet if it was moved out.
     * @return {?}
     */
    _recaptureFocus() {
        if (!this._containsFocus()) {
            this._trapFocus();
        }
    }
    /**
     * Moves the focus inside the focus trap. When autoFocus is not set to 'side-sheet', if focus
     * cannot be moved then focus will go to the side-sheet container.
     * @protected
     * @return {?}
     */
    _trapFocus() {
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        if (!this._config.autoFocus) {
            if (!this._containsFocus()) {
                element.focus();
            }
        }
        else {
            this._focusTrap.focusInitialElementWhenReady().then((/**
             * @param {?} focusedSuccessfully
             * @return {?}
             */
            (focusedSuccessfully) => {
                // If we weren't able to find a focusable element in the side-sheet, then focus the side-sheet
                // container instead.
                if (!focusedSuccessfully) {
                    this._focusSideSheetContainer();
                }
            }));
        }
    }
    /**
     * Restores focus to the element that was focused before the side-sheet opened.
     * @protected
     * @return {?}
     */
    _restoreFocus() {
        /** @type {?} */
        const previousElement = this._elementFocusedBeforeSideSheetWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (this._config.restoreFocus && previousElement && typeof previousElement.focus === 'function') {
            /** @type {?} */
            const activeElement = _getFocusedElementPierceShadowDom();
            /** @type {?} */
            const element = this._elementRef.nativeElement;
            // Make sure that focus is still inside the side-sheet or is on the body (usually because a
            // non-focusable element like the backdrop was clicked) before moving it. It's possible that
            // the consumer moved it themselves before the animation was done, in which case we shouldn't
            // do anything.
            if (!activeElement ||
                activeElement === this._document.body ||
                activeElement === element ||
                element.contains(activeElement)) {
                if (this._focusMonitor) {
                    this._focusMonitor.focusVia(previousElement, this._closeInteractionType);
                    this._closeInteractionType = null;
                }
                else {
                    previousElement.focus();
                }
            }
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
    /**
     * Sets up the focus trap.
     * @private
     * @return {?}
     */
    _setupFocusTrap() {
        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
    }
    /**
     * Captures the element that was focused before the side-sheet was opened.
     * @private
     * @return {?}
     */
    _capturePreviouslyFocusedElement() {
        if (this._document) {
            this._elementFocusedBeforeSideSheetWasOpened = _getFocusedElementPierceShadowDom();
        }
    }
    /**
     * Focuses the side-sheet container.
     * @private
     * @return {?}
     */
    _focusSideSheetContainer() {
        // Note that there is no focus method when rendering on the server.
        if (this._elementRef.nativeElement.focus) {
            this._elementRef.nativeElement.focus();
        }
    }
    /**
     * Returns whether focus is inside the side-sheet.
     * @private
     * @return {?}
     */
    _containsFocus() {
        /** @type {?} */
        const element = this._elementRef.nativeElement;
        /** @type {?} */
        const activeElement = _getFocusedElementPierceShadowDom();
        return element === activeElement || element.contains(activeElement);
    }
}
_CovalentSideSheetContainerBase.decorators = [
    { type: Directive }
];
/** @nocollapse */
_CovalentSideSheetContainerBase.ctorParameters = () => [
    { type: ElementRef },
    { type: FocusTrapFactory },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: CovalentSideSheetConfig },
    { type: FocusMonitor }
];
_CovalentSideSheetContainerBase.propDecorators = {
    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    _CovalentSideSheetContainerBase.prototype._document;
    /**
     * The portal outlet inside of this container into which the side-sheet content will be loaded.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype._portalOutlet;
    /**
     * The class that traps and manages focus within the side-sheet.
     * @type {?}
     * @private
     */
    _CovalentSideSheetContainerBase.prototype._focusTrap;
    /**
     * Emits when an animation state changes.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype._animationStateChanged;
    /**
     * Element that was focused before the side-sheet was opened. Save this to restore upon close.
     * @type {?}
     * @private
     */
    _CovalentSideSheetContainerBase.prototype._elementFocusedBeforeSideSheetWasOpened;
    /**
     * Type of interaction that led to the side-sheet being closed. This is used to determine
     * whether the focus style will be applied when returning focus to its original location
     * after the side-sheet is closed.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype._closeInteractionType;
    /**
     * ID of the element that should be considered as the side-sheet's label.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype._ariaLabelledBy;
    /**
     * ID for the container DOM element.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype._id;
    /**
     * Attaches a DOM portal to the side-sheet container.
     * \@param portal Portal to be attached.
     * @deprecated To be turned into a method.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype.attachDomPortal;
    /**
     * @type {?}
     * @protected
     */
    _CovalentSideSheetContainerBase.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    _CovalentSideSheetContainerBase.prototype._focusTrapFactory;
    /**
     * @type {?}
     * @protected
     */
    _CovalentSideSheetContainerBase.prototype._changeDetectorRef;
    /**
     * The side-sheet configuration.
     * @type {?}
     */
    _CovalentSideSheetContainerBase.prototype._config;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetContainerBase.prototype._focusMonitor;
    /**
     * Starts the side-sheet exit animation.
     * @abstract
     * @return {?}
     */
    _CovalentSideSheetContainerBase.prototype._startExitAnimation = function () { };
}
/**
 * Internal component that wraps the generated side-sheet content.
 * This animation below is the only reason for duplicating most of the Material dialog code
 */
export class CovalentSideSheetContainer extends _CovalentSideSheetContainerBase {
    constructor() {
        super(...arguments);
        /**
         * State of the side-sheet animation.
         */
        this._state = 'enter';
    }
    /**
     * Callback, invoked whenever an animation on the host completes.
     * @param {?} __0
     * @return {?}
     */
    _onAnimationDone({ toState, totalTime }) {
        if (toState === 'enter') {
            this._trapFocus();
            this._animationStateChanged.next({ state: 'opened', totalTime });
        }
        else if (toState === 'exit') {
            this._restoreFocus();
            this._animationStateChanged.next({ state: 'closed', totalTime });
        }
    }
    /**
     * Callback, invoked when an animation on the host starts.
     * @param {?} __0
     * @return {?}
     */
    _onAnimationStart({ toState, totalTime }) {
        if (toState === 'enter') {
            this._animationStateChanged.next({ state: 'opening', totalTime });
        }
        else if (toState === 'exit' || toState === 'void') {
            this._animationStateChanged.next({ state: 'closing', totalTime });
        }
    }
    /**
     * Starts the side-sheet exit animation.
     * @return {?}
     */
    _startExitAnimation() {
        this._state = 'exit';
        this._changeDetectorRef.markForCheck();
    }
}
CovalentSideSheetContainer.decorators = [
    { type: Component, args: [{
                selector: 'td-side-sheet-container',
                template: `
    <ng-template cdkPortalOutlet></ng-template>
  `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.Default,
                animations: [tdSideSheetAnimations.sideSheetContainer],
                host: {
                    'class': 'td-side-sheet-container',
                    'tabindex': '-1',
                    'aria-modal': 'true',
                    '[id]': '_id',
                    '[attr.role]': '_config.role',
                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',
                    '[attr.aria-label]': '_config.ariaLabel',
                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',
                    '[@sideSheetContainer]': '_state',
                    '(@sideSheetContainer.start)': '_onAnimationStart($event)',
                    '(@sideSheetContainer.done)': '_onAnimationDone($event)',
                },
                styles: [".td-side-sheet-container{background-color:#fff;box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12);box-sizing:border-box;display:block;height:100%;max-height:inherit;min-height:inherit;outline:0;overflow:auto;padding:24px;width:100%}.td-side-sheet-wrapper{-ms-flex-direction:column;display:-ms-flexbox;display:flex;flex-direction:column;height:100%}.td-side-sheet-content{-ms-flex:1;-webkit-overflow-scrolling:touch;flex:1;margin:0 -24px;overflow:auto;padding:0 24px}.td-side-sheet-title{margin:-16px 0 20px}.td-side-sheet-actions,.td-side-sheet-title{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex}.td-side-sheet-actions{-ms-flex-pack:justify;-ms-flex-wrap:wrap;box-sizing:content-box;flex-wrap:wrap;justify-content:space-between;margin:0 -16px -24px;padding:8px 0}.td-side-sheet-actions[align=end]{-ms-flex-pack:end;justify-content:flex-end}.td-side-sheet-actions[align=center]{-ms-flex-pack:center;justify-content:center}.td-side-sheet-actions .mat-button-base+.mat-button-base,.td-side-sheet-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .td-side-sheet-actions .mat-button-base+.mat-button-base,[dir=rtl] .td-side-sheet-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}"]
            }] }
];
if (false) {
    /**
     * State of the side-sheet animation.
     * @type {?}
     */
    CovalentSideSheetContainer.prototype._state;
}
//# sourceMappingURL=data:application/json;base64,