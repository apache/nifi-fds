/**
 * @fileoverview added by tsickle
 * Generated from: side-sheet.content-directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable */
import { Directive, Input, Optional, ElementRef } from '@angular/core';
import { CovalentSideSheet } from './side-sheet';
import { _closeSideSheetVia, CovalentSideSheetRef } from './side-sheet-ref';
/**
 * Counter used to generate unique IDs for dialog elements.
 * @type {?}
 */
let dialogElementUid = 0;
/**
 * Button that will close the current dialog.
 */
export class CovalentSideSheetClose {
    /**
     * @param {?} dialogRef
     * @param {?} _elementRef
     * @param {?} _dialog
     */
    constructor(dialogRef, _elementRef, _dialog) {
        this.dialogRef = dialogRef;
        this._elementRef = _elementRef;
        this._dialog = _dialog;
        /**
         * Default to "button" to prevents accidental form submits.
         */
        this.type = 'button';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.dialogRef) {
            // When this directive is included in a dialog via TemplateRef (rather than being
            // in a Component), the DialogRef isn't available via injection because embedded
            // views cannot be given a custom injector. Instead, we look up the DialogRef by
            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't
            // be resolved at constructor time.
            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openSideSheets)));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const proxiedChange = changes['_CovalentSideSheetClose'] || changes['_CovalentSideSheetCloseResult'];
        if (proxiedChange) {
            this.dialogResult = proxiedChange.currentValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onButtonClick(event) {
        // Determinate the focus origin using the click event, because using the FocusMonitor will
        // result in incorrect origins. Most of the time, close buttons will be auto focused in the
        // dialog, and therefore clicking the button won't result in a focus change. This means that
        // the FocusMonitor won't detect any origin change, and will always output `program`.
        _closeSideSheetVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);
    }
}
CovalentSideSheetClose.decorators = [
    { type: Directive, args: [{
                selector: '[td-side-sheet-close], [CovalentSideSheetClose]',
                exportAs: 'CovalentSideSheetClose',
                host: {
                    '(click)': '_onButtonClick($event)',
                    '[attr.aria-label]': 'ariaLabel || null',
                    '[attr.type]': 'type',
                },
            },] }
];
/** @nocollapse */
CovalentSideSheetClose.ctorParameters = () => [
    { type: CovalentSideSheetRef, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: CovalentSideSheet }
];
CovalentSideSheetClose.propDecorators = {
    ariaLabel: [{ type: Input, args: ['aria-label',] }],
    type: [{ type: Input }],
    dialogResult: [{ type: Input, args: ['td-side-sheet-close',] }],
    _CovalentSideSheetClose: [{ type: Input, args: ['CovalentSideSheetClose',] }]
};
if (false) {
    /**
     * Screenreader label for the button.
     * @type {?}
     */
    CovalentSideSheetClose.prototype.ariaLabel;
    /**
     * Default to "button" to prevents accidental form submits.
     * @type {?}
     */
    CovalentSideSheetClose.prototype.type;
    /**
     * Dialog close input.
     * @type {?}
     */
    CovalentSideSheetClose.prototype.dialogResult;
    /** @type {?} */
    CovalentSideSheetClose.prototype._CovalentSideSheetClose;
    /** @type {?} */
    CovalentSideSheetClose.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    CovalentSideSheetClose.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    CovalentSideSheetClose.prototype._dialog;
}
/**
 * Title of a side sheet element. Stays fixed to the top of the side sheet when scrolling.
 */
export class CovalentSideSheetTitle {
    /**
     * @param {?} _dialogRef
     * @param {?} _elementRef
     * @param {?} _dialog
     */
    constructor(_dialogRef, _elementRef, _dialog) {
        this._dialogRef = _dialogRef;
        this._elementRef = _elementRef;
        this._dialog = _dialog;
        /**
         * Unique id for the dialog title. If none is supplied, it will be auto-generated.
         */
        this.id = `td-side-sheet-title-${dialogElementUid++}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._dialogRef) {
            Promise.resolve().then((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const container = this._dialogRef._containerInstance;
                if (container && !container._ariaLabelledBy) {
                    container._ariaLabelledBy = this.id;
                }
            }));
        }
        else {
            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openSideSheets)));
        }
    }
}
CovalentSideSheetTitle.decorators = [
    { type: Directive, args: [{
                selector: '[td-side-sheet-title], [CovalentSideSheetTitle]',
                exportAs: 'CovalentSideSheetTitle',
                host: {
                    'class': 'td-side-sheet-title',
                    '[id]': 'id',
                },
            },] }
];
/** @nocollapse */
CovalentSideSheetTitle.ctorParameters = () => [
    { type: CovalentSideSheetRef, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: CovalentSideSheet }
];
CovalentSideSheetTitle.propDecorators = {
    id: [{ type: Input }]
};
if (false) {
    /**
     * Unique id for the dialog title. If none is supplied, it will be auto-generated.
     * @type {?}
     */
    CovalentSideSheetTitle.prototype.id;
    /**
     * @type {?}
     * @private
     */
    CovalentSideSheetTitle.prototype._dialogRef;
    /**
     * @type {?}
     * @private
     */
    CovalentSideSheetTitle.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    CovalentSideSheetTitle.prototype._dialog;
}
/**
 * Scrollable content container of a dialog.
 */
export class CovalentSideSheetContent {
}
CovalentSideSheetContent.decorators = [
    { type: Directive, args: [{
                selector: `[td-side-sheet-content], td-side-sheet-content, [CovalentSideSheetContent]`,
                host: { class: 'td-side-sheet-content' },
            },] }
];
/**
 * Container for the bottom action buttons in a dialog.
 * Stays fixed to the bottom when scrolling.
 */
export class CovalentSideSheetActions {
}
CovalentSideSheetActions.decorators = [
    { type: Directive, args: [{
                selector: `[td-side-sheet-actions], td-side-sheet-actions, [CovalentSideSheetActions]`,
                host: { class: 'td-side-sheet-actions' },
            },] }
];
/**
 * Container for the wrapper part of the dialog
 */
export class CovalentSideSheetWrapper {
}
CovalentSideSheetWrapper.decorators = [
    { type: Directive, args: [{
                selector: `[td-side-sheet-wrapper], td-side-sheet-wrapper, [CovalentSideSheetWrapper]`,
                host: { class: 'td-side-sheet-wrapper' },
            },] }
];
/**
 * Finds the closest CovalentSideSheetRef to an element by looking at the DOM.
 * @param {?} element Element relative to which to look for a dialog.
 * @param {?} openDialogs References to the currently-open dialogs.
 * @return {?}
 */
function getClosestDialog(element, openDialogs) {
    /** @type {?} */
    let parent = element.nativeElement.parentElement;
    while (parent && !parent.classList.contains('td-side-sheet-container')) {
        parent = parent.parentElement;
    }
    return parent ? openDialogs.find((/**
     * @param {?} dialog
     * @return {?}
     */
    (dialog) => dialog.id === (/** @type {?} */ (parent)).id)) : null;
}
//# sourceMappingURL=data:application/json;base64,