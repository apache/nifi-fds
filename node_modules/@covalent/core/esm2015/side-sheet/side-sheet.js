/**
 * @fileoverview added by tsickle
 * Generated from: side-sheet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* tslint:disable */
import { Directive, Inject, Injectable, InjectFlags, InjectionToken, Injector, Optional, SkipSelf, TemplateRef, Type, } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS } from '@angular/material/dialog';
import { AnimationCurves, AnimationDurations } from '@angular/material/core';
import { CovalentSideSheetContainer } from './side-sheet-container';
import { Subject, of } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { Directionality } from '@angular/cdk/bidi';
import { CovalentSideSheetRef } from './side-sheet-ref';
import { CovalentSideSheetConfig } from './side-sheet.config';
/**
 * @template C
 */
export class _CovalentSideSheetBase {
    /**
     * @param {?} _overlay
     * @param {?} _injector
     * @param {?} _defaultOptions
     * @param {?} _parentSideSheet
     * @param {?} _sideSheetRefConstructor
     * @param {?} _sideSheetContainerType
     * @param {?} _sideSheetDataToken
     */
    constructor(_overlay, _injector, _defaultOptions, _parentSideSheet, _sideSheetRefConstructor, _sideSheetContainerType, _sideSheetDataToken) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._defaultOptions = _defaultOptions;
        this._parentSideSheet = _parentSideSheet;
        this._sideSheetRefConstructor = _sideSheetRefConstructor;
        this._sideSheetContainerType = _sideSheetContainerType;
        this._sideSheetDataToken = _sideSheetDataToken;
        this._openSideSheetsAtThisLevel = [];
        this._afterAllClosedAtThisLevel = new Subject();
        this._afterOpenedAtThisLevel = new Subject();
        this.defaultSidebarConfig = {
            minWidth: '400px',
            maxWidth: '100vw',
        };
    }
    /**
     * Keeps track of the currently-open side-sheets.
     * @return {?}
     */
    get openSideSheets() {
        return this._parentSideSheet ? this._parentSideSheet.openSideSheets : this._openSideSheetsAtThisLevel;
    }
    /**
     * @template T, D, R
     * @param {?} componentOrTemplateRef
     * @param {?=} config
     * @return {?}
     */
    open(componentOrTemplateRef, config) {
        config = Object.assign(Object.assign(Object.assign({}, (this._defaultOptions || new CovalentSideSheetConfig())), this.defaultSidebarConfig), config);
        /** @type {?} */
        const overlayRef = this._createOverlay(config);
        /** @type {?} */
        const sideSheetContainer = this._attachSideSheetContainer(overlayRef, config);
        /** @type {?} */
        const sideSheetRef = this._attachSideSheetContent(componentOrTemplateRef, sideSheetContainer, overlayRef, config);
        /** @type {?} */
        const prevSideSheetRef = this.openSideSheets.slice(-1)[0];
        /** @type {?} */
        const prevOverlayRef = prevSideSheetRef === null || prevSideSheetRef === void 0 ? void 0 : prevSideSheetRef.overlayRef;
        // Animate previous side sheet to full width
        if (prevOverlayRef === null || prevOverlayRef === void 0 ? void 0 : prevOverlayRef.overlayElement) {
            prevOverlayRef.overlayElement.style.transition = `${AnimationDurations.COMPLEX} ${AnimationCurves.DECELERATION_CURVE}`;
            prevOverlayRef.overlayElement.style.minWidth = `${((/** @type {?} */ (window))).innerWidth}px`;
        }
        // Revert the previous side sheet config & size
        sideSheetRef._containerInstance._animationStateChanged
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.state === 'closing' && !!(prevSideSheetRef && prevOverlayRef))), take(1))
            .subscribe((/**
         * @return {?}
         */
        () => {
            prevOverlayRef.overlayElement.style.transition = `${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`;
            prevSideSheetRef.updateSize();
        }));
        // Add new side sheet to open list
        this.openSideSheets.push(sideSheetRef);
        // Remove side sheet ref after closed
        sideSheetRef
            .afterClosed()
            .pipe(take(1))
            .subscribe((/**
         * @return {?}
         */
        () => this._removeOpenSideSheet(sideSheetRef)));
        // Notify the side-sheet container that the content has been attached.
        sideSheetContainer._initializeWithAttachedContent();
        return sideSheetRef;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // Only close the side-sheets at this level on destroy
        // since the parent service may still be active.
        this._closeSideSheets(this._openSideSheetsAtThisLevel);
        this._afterAllClosedAtThisLevel.complete();
        this._afterOpenedAtThisLevel.complete();
        // Clean up any subscriptions to side-sheet that never finished opening.
        if (this._animationStateSubscriptions) {
            this._animationStateSubscriptions.unsubscribe();
        }
    }
    /**
     * Closes all of the currently-open side-sheets.
     * @return {?}
     */
    closeAll() {
        this._closeSideSheets(this.openSideSheets);
    }
    /**
     * @private
     * @template T
     * @param {?} config
     * @return {?}
     */
    _createOverlay(config) {
        /** @type {?} */
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._overlay.position().global(),
            scrollStrategy: this._overlay.scrollStrategies.block(),
            panelClass: config.panelClass,
            hasBackdrop: config.hasBackdrop,
            direction: config.direction,
            minWidth: config.minWidth,
            minHeight: config.minHeight,
            maxWidth: config.maxWidth,
        });
        /** @type {?} */
        const overlayRef = this._overlay.create(overlayConfig);
        /** @type {?} */
        const positionStrategy = (/** @type {?} */ (overlayRef.getConfig().positionStrategy));
        positionStrategy.right('0px');
        return overlayRef;
    }
    /**
     * Attaches a container to a side-sheets's already-created overlay.
     * @private
     * @param {?} overlay Reference to the side-sheet's underlying overlay.
     * @param {?} config The side-sheet configuration.
     * @return {?} A promise resolving to a ComponentRef for the attached container.
     */
    _attachSideSheetContainer(overlay, config) {
        /** @type {?} */
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        /** @type {?} */
        const injector = Injector.create({
            parent: userInjector || this._injector,
            providers: [{ provide: CovalentSideSheetConfig, useValue: config }],
        });
        /** @type {?} */
        const containerPortal = new ComponentPortal(this._sideSheetContainerType, config.viewContainerRef, injector, config.componentFactoryResolver);
        /** @type {?} */
        const containerRef = overlay.attach(containerPortal);
        return containerRef.instance;
    }
    /**
     * Attaches the user-provided component to the already-created side sheet container.
     * @private
     * @template T, R
     * @param {?} componentOrTemplateRef The type of component being loaded into the side-sheet,
     *     or a TemplateRef to instantiate as the content.
     * @param {?} sideSheetContainer
     * @param {?} overlayRef Reference to the overlay in which the side-sheet resides.
     * @param {?} config The side-sheet configuration.
     * @return {?} A promise resolving to the CovalentSideSheetRef that should be returned to the user.
     */
    _attachSideSheetContent(componentOrTemplateRef, sideSheetContainer, overlayRef, config) {
        // Create a reference to the side-sheet we're creating in order to give the user a handle
        // to modify and close it.
        /** @type {?} */
        const sideSheetRef = new this._sideSheetRefConstructor(overlayRef, sideSheetContainer, config.id);
        if (componentOrTemplateRef instanceof TemplateRef) {
            sideSheetContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({
                $implicit: config.data,
                sideSheetRef,
            }))));
        }
        else {
            /** @type {?} */
            const injector = this._createInjector(config, sideSheetRef, sideSheetContainer);
            /** @type {?} */
            const contentRef = sideSheetContainer.attach(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));
            sideSheetRef.componentInstance = contentRef.instance;
        }
        sideSheetRef.updateSize(config.width, config.height);
        return sideSheetRef;
    }
    /**
     * @private
     * @template T
     * @param {?} config
     * @param {?} sideSheetRef
     * @param {?} sideSheetContainer
     * @return {?}
     */
    _createInjector(config, sideSheetRef, sideSheetContainer) {
        /** @type {?} */
        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;
        // The side-sheet container should be provided as the side-sheet container and the side-sheet's
        // content are created out of the same `ViewContainerRef` and as such, are siblings
        // for injector purposes. To allow the hierarchy that is expected, the side-sheet
        // container is explicitly provided in the injector.
        /** @type {?} */
        const providers = [
            { provide: this._sideSheetContainerType, useValue: sideSheetContainer },
            { provide: this._sideSheetDataToken, useValue: config.data },
            { provide: this._sideSheetRefConstructor, useValue: sideSheetRef },
        ];
        if (config.direction &&
            (!userInjector || !userInjector.get(Directionality, null, InjectFlags.Optional))) {
            providers.push({
                provide: Directionality,
                useValue: { value: config.direction, change: of() },
            });
        }
        return Injector.create({ parent: userInjector || this._injector, providers });
    }
    /**
     * Removes a side sheet from the array of open side sheets.
     * @private
     * @param {?} sideSheetRef Side Sheet to be removed.
     * @return {?}
     */
    _removeOpenSideSheet(sideSheetRef) {
        /** @type {?} */
        const index = this.openSideSheets.indexOf(sideSheetRef);
        if (index > -1) {
            this.openSideSheets.splice(index, 1);
        }
    }
    /**
     * Closes all of the side-sheet in an array.
     * @private
     * @param {?} sideSheets
     * @return {?}
     */
    _closeSideSheets(sideSheets) {
        /** @type {?} */
        let i = sideSheets.length;
        while (i--) {
            sideSheets[i].close();
        }
    }
}
_CovalentSideSheetBase.decorators = [
    { type: Directive }
];
/** @nocollapse */
_CovalentSideSheetBase.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: undefined },
    { type: undefined },
    { type: Type },
    { type: Type },
    { type: InjectionToken }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._openSideSheetsAtThisLevel;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._afterAllClosedAtThisLevel;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._afterOpenedAtThisLevel;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._animationStateSubscriptions;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype.defaultSidebarConfig;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._overlay;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._injector;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._defaultOptions;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._parentSideSheet;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._sideSheetRefConstructor;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._sideSheetContainerType;
    /**
     * @type {?}
     * @private
     */
    _CovalentSideSheetBase.prototype._sideSheetDataToken;
}
/**
 * Service to open Covalent Design side-sheet.
 */
export class CovalentSideSheet extends _CovalentSideSheetBase {
    /**
     * @param {?} overlay
     * @param {?} injector
     * @param {?} defaultOptions
     * @param {?} parentSideSheet
     */
    constructor(overlay, injector, defaultOptions, parentSideSheet) {
        super(overlay, injector, defaultOptions, parentSideSheet, CovalentSideSheetRef, CovalentSideSheetContainer, MAT_DIALOG_DATA);
    }
}
CovalentSideSheet.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CovalentSideSheet.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: CovalentSideSheetConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },
    { type: CovalentSideSheet, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,