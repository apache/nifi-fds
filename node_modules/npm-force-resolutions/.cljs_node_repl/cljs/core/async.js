// Compiled by ClojureScript 1.10.597 {:target :nodejs}
goog.provide('cljs.core.async');
goog.require('cljs.core');
goog.require('cljs.core.async.impl.protocols');
goog.require('cljs.core.async.impl.channels');
goog.require('cljs.core.async.impl.buffers');
goog.require('cljs.core.async.impl.timers');
goog.require('cljs.core.async.impl.dispatch');
goog.require('cljs.core.async.impl.ioc_helpers');
cljs.core.async.fn_handler = (function cljs$core$async$fn_handler(var_args){
var G__10147 = arguments.length;
switch (G__10147) {
case 1:
return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$1 = (function (f){
return cljs.core.async.fn_handler.call(null,f,true);
}));

(cljs.core.async.fn_handler.cljs$core$IFn$_invoke$arity$2 = (function (f,blockable){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async10148 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async10148 = (function (f,blockable,meta10149){
this.f = f;
this.blockable = blockable;
this.meta10149 = meta10149;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async10148.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_10150,meta10149__$1){
var self__ = this;
var _10150__$1 = this;
return (new cljs.core.async.t_cljs$core$async10148(self__.f,self__.blockable,meta10149__$1));
}));

(cljs.core.async.t_cljs$core$async10148.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_10150){
var self__ = this;
var _10150__$1 = this;
return self__.meta10149;
}));

(cljs.core.async.t_cljs$core$async10148.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10148.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return true;
}));

(cljs.core.async.t_cljs$core$async10148.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.blockable;
}));

(cljs.core.async.t_cljs$core$async10148.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.f;
}));

(cljs.core.async.t_cljs$core$async10148.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"blockable","blockable",-28395259,null),new cljs.core.Symbol(null,"meta10149","meta10149",-855804941,null)], null);
}));

(cljs.core.async.t_cljs$core$async10148.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async10148.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async10148");

(cljs.core.async.t_cljs$core$async10148.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async10148");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async10148.
 */
cljs.core.async.__GT_t_cljs$core$async10148 = (function cljs$core$async$__GT_t_cljs$core$async10148(f__$1,blockable__$1,meta10149){
return (new cljs.core.async.t_cljs$core$async10148(f__$1,blockable__$1,meta10149));
});

}

return (new cljs.core.async.t_cljs$core$async10148(f,blockable,cljs.core.PersistentArrayMap.EMPTY));
}));

(cljs.core.async.fn_handler.cljs$lang$maxFixedArity = 2);

/**
 * Returns a fixed buffer of size n. When full, puts will block/park.
 */
cljs.core.async.buffer = (function cljs$core$async$buffer(n){
return cljs.core.async.impl.buffers.fixed_buffer.call(null,n);
});
/**
 * Returns a buffer of size n. When full, puts will complete but
 *   val will be dropped (no transfer).
 */
cljs.core.async.dropping_buffer = (function cljs$core$async$dropping_buffer(n){
return cljs.core.async.impl.buffers.dropping_buffer.call(null,n);
});
/**
 * Returns a buffer of size n. When full, puts will complete, and be
 *   buffered, but oldest elements in buffer will be dropped (not
 *   transferred).
 */
cljs.core.async.sliding_buffer = (function cljs$core$async$sliding_buffer(n){
return cljs.core.async.impl.buffers.sliding_buffer.call(null,n);
});
/**
 * Returns true if a channel created with buff will never block. That is to say,
 * puts into this buffer will never cause the buffer to be full. 
 */
cljs.core.async.unblocking_buffer_QMARK_ = (function cljs$core$async$unblocking_buffer_QMARK_(buff){
if((!((buff == null)))){
if(((false) || ((cljs.core.PROTOCOL_SENTINEL === buff.cljs$core$async$impl$protocols$UnblockingBuffer$)))){
return true;
} else {
if((!buff.cljs$lang$protocol_mask$partition$)){
return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.async.impl.protocols.UnblockingBuffer,buff);
} else {
return false;
}
}
} else {
return cljs.core.native_satisfies_QMARK_.call(null,cljs.core.async.impl.protocols.UnblockingBuffer,buff);
}
});
/**
 * Creates a channel with an optional buffer, an optional transducer (like (map f),
 *   (filter p) etc or a composition thereof), and an optional exception handler.
 *   If buf-or-n is a number, will create and use a fixed buffer of that size. If a
 *   transducer is supplied a buffer must be specified. ex-handler must be a
 *   fn of one argument - if an exception occurs during transformation it will be called
 *   with the thrown value as an argument, and any non-nil return value will be placed
 *   in the channel.
 */
cljs.core.async.chan = (function cljs$core$async$chan(var_args){
var G__10154 = arguments.length;
switch (G__10154) {
case 0:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0 = (function (){
return cljs.core.async.chan.call(null,null);
}));

(cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1 = (function (buf_or_n){
return cljs.core.async.chan.call(null,buf_or_n,null,null);
}));

(cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2 = (function (buf_or_n,xform){
return cljs.core.async.chan.call(null,buf_or_n,xform,null);
}));

(cljs.core.async.chan.cljs$core$IFn$_invoke$arity$3 = (function (buf_or_n,xform,ex_handler){
var buf_or_n__$1 = ((cljs.core._EQ_.call(null,buf_or_n,(0)))?null:buf_or_n);
if(cljs.core.truth_(xform)){
if(cljs.core.truth_(buf_or_n__$1)){
} else {
throw (new Error(["Assert failed: ","buffer must be supplied when transducer is","\n","buf-or-n"].join('')));
}
} else {
}

return cljs.core.async.impl.channels.chan.call(null,((typeof buf_or_n__$1 === 'number')?cljs.core.async.buffer.call(null,buf_or_n__$1):buf_or_n__$1),xform,ex_handler);
}));

(cljs.core.async.chan.cljs$lang$maxFixedArity = 3);

/**
 * Creates a promise channel with an optional transducer, and an optional
 *   exception-handler. A promise channel can take exactly one value that consumers
 *   will receive. Once full, puts complete but val is dropped (no transfer).
 *   Consumers will block until either a value is placed in the channel or the
 *   channel is closed. See chan for the semantics of xform and ex-handler.
 */
cljs.core.async.promise_chan = (function cljs$core$async$promise_chan(var_args){
var G__10157 = arguments.length;
switch (G__10157) {
case 0:
return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0 = (function (){
return cljs.core.async.promise_chan.call(null,null);
}));

(cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$1 = (function (xform){
return cljs.core.async.promise_chan.call(null,xform,null);
}));

(cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$2 = (function (xform,ex_handler){
return cljs.core.async.chan.call(null,cljs.core.async.impl.buffers.promise_buffer.call(null),xform,ex_handler);
}));

(cljs.core.async.promise_chan.cljs$lang$maxFixedArity = 2);

/**
 * Returns a channel that will close after msecs
 */
cljs.core.async.timeout = (function cljs$core$async$timeout(msecs){
return cljs.core.async.impl.timers.timeout.call(null,msecs);
});
/**
 * takes a val from port. Must be called inside a (go ...) block. Will
 *   return nil if closed. Will park if nothing is available.
 *   Returns true unless port is already closed
 */
cljs.core.async._LT__BANG_ = (function cljs$core$async$_LT__BANG_(port){
throw (new Error("<! used not in (go ...) block"));
});
/**
 * Asynchronously takes a val from port, passing to fn1. Will pass nil
 * if closed. If on-caller? (default true) is true, and value is
 * immediately available, will call fn1 on calling thread.
 * Returns nil.
 */
cljs.core.async.take_BANG_ = (function cljs$core$async$take_BANG_(var_args){
var G__10160 = arguments.length;
switch (G__10160) {
case 2:
return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (port,fn1){
return cljs.core.async.take_BANG_.call(null,port,fn1,true);
}));

(cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (port,fn1,on_caller_QMARK_){
var ret = cljs.core.async.impl.protocols.take_BANG_.call(null,port,cljs.core.async.fn_handler.call(null,fn1));
if(cljs.core.truth_(ret)){
var val_10162 = cljs.core.deref.call(null,ret);
if(cljs.core.truth_(on_caller_QMARK_)){
fn1.call(null,val_10162);
} else {
cljs.core.async.impl.dispatch.run.call(null,(function (){
return fn1.call(null,val_10162);
}));
}
} else {
}

return null;
}));

(cljs.core.async.take_BANG_.cljs$lang$maxFixedArity = 3);

cljs.core.async.nop = (function cljs$core$async$nop(_){
return null;
});
cljs.core.async.fhnop = cljs.core.async.fn_handler.call(null,cljs.core.async.nop);
/**
 * puts a val into port. nil values are not allowed. Must be called
 *   inside a (go ...) block. Will park if no buffer space is available.
 *   Returns true unless port is already closed.
 */
cljs.core.async._GT__BANG_ = (function cljs$core$async$_GT__BANG_(port,val){
throw (new Error(">! used not in (go ...) block"));
});
/**
 * Asynchronously puts a val into port, calling fn0 (if supplied) when
 * complete. nil values are not allowed. Will throw if closed. If
 * on-caller? (default true) is true, and the put is immediately
 * accepted, will call fn0 on calling thread.  Returns nil.
 */
cljs.core.async.put_BANG_ = (function cljs$core$async$put_BANG_(var_args){
var G__10164 = arguments.length;
switch (G__10164) {
case 2:
return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (port,val){
var temp__5733__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null,port,val,cljs.core.async.fhnop);
if(cljs.core.truth_(temp__5733__auto__)){
var ret = temp__5733__auto__;
return cljs.core.deref.call(null,ret);
} else {
return true;
}
}));

(cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (port,val,fn1){
return cljs.core.async.put_BANG_.call(null,port,val,fn1,true);
}));

(cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (port,val,fn1,on_caller_QMARK_){
var temp__5733__auto__ = cljs.core.async.impl.protocols.put_BANG_.call(null,port,val,cljs.core.async.fn_handler.call(null,fn1));
if(cljs.core.truth_(temp__5733__auto__)){
var retb = temp__5733__auto__;
var ret = cljs.core.deref.call(null,retb);
if(cljs.core.truth_(on_caller_QMARK_)){
fn1.call(null,ret);
} else {
cljs.core.async.impl.dispatch.run.call(null,(function (){
return fn1.call(null,ret);
}));
}

return ret;
} else {
return true;
}
}));

(cljs.core.async.put_BANG_.cljs$lang$maxFixedArity = 4);

cljs.core.async.close_BANG_ = (function cljs$core$async$close_BANG_(port){
return cljs.core.async.impl.protocols.close_BANG_.call(null,port);
});
cljs.core.async.random_array = (function cljs$core$async$random_array(n){
var a = (new Array(n));
var n__4666__auto___10166 = n;
var x_10167 = (0);
while(true){
if((x_10167 < n__4666__auto___10166)){
(a[x_10167] = (0));

var G__10168 = (x_10167 + (1));
x_10167 = G__10168;
continue;
} else {
}
break;
}

var i = (1);
while(true){
if(cljs.core._EQ_.call(null,i,n)){
return a;
} else {
var j = cljs.core.rand_int.call(null,i);
(a[i] = (a[j]));

(a[j] = i);

var G__10169 = (i + (1));
i = G__10169;
continue;
}
break;
}
});
cljs.core.async.alt_flag = (function cljs$core$async$alt_flag(){
var flag = cljs.core.atom.call(null,true);
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async10170 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async10170 = (function (flag,meta10171){
this.flag = flag;
this.meta10171 = meta10171;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async10170.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_10172,meta10171__$1){
var self__ = this;
var _10172__$1 = this;
return (new cljs.core.async.t_cljs$core$async10170(self__.flag,meta10171__$1));
}));

(cljs.core.async.t_cljs$core$async10170.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_10172){
var self__ = this;
var _10172__$1 = this;
return self__.meta10171;
}));

(cljs.core.async.t_cljs$core$async10170.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10170.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.deref.call(null,self__.flag);
}));

(cljs.core.async.t_cljs$core$async10170.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return true;
}));

(cljs.core.async.t_cljs$core$async10170.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.reset_BANG_.call(null,self__.flag,null);

return true;
}));

(cljs.core.async.t_cljs$core$async10170.getBasis = (function (){
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"flag","flag",-1565787888,null),new cljs.core.Symbol(null,"meta10171","meta10171",293671218,null)], null);
}));

(cljs.core.async.t_cljs$core$async10170.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async10170.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async10170");

(cljs.core.async.t_cljs$core$async10170.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async10170");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async10170.
 */
cljs.core.async.__GT_t_cljs$core$async10170 = (function cljs$core$async$alt_flag_$___GT_t_cljs$core$async10170(flag__$1,meta10171){
return (new cljs.core.async.t_cljs$core$async10170(flag__$1,meta10171));
});

}

return (new cljs.core.async.t_cljs$core$async10170(flag,cljs.core.PersistentArrayMap.EMPTY));
});
cljs.core.async.alt_handler = (function cljs$core$async$alt_handler(flag,cb){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async10173 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async10173 = (function (flag,cb,meta10174){
this.flag = flag;
this.cb = cb;
this.meta10174 = meta10174;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async10173.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_10175,meta10174__$1){
var self__ = this;
var _10175__$1 = this;
return (new cljs.core.async.t_cljs$core$async10173(self__.flag,self__.cb,meta10174__$1));
}));

(cljs.core.async.t_cljs$core$async10173.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_10175){
var self__ = this;
var _10175__$1 = this;
return self__.meta10174;
}));

(cljs.core.async.t_cljs$core$async10173.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10173.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.active_QMARK_.call(null,self__.flag);
}));

(cljs.core.async.t_cljs$core$async10173.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return true;
}));

(cljs.core.async.t_cljs$core$async10173.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.async.impl.protocols.commit.call(null,self__.flag);

return self__.cb;
}));

(cljs.core.async.t_cljs$core$async10173.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"flag","flag",-1565787888,null),new cljs.core.Symbol(null,"cb","cb",-2064487928,null),new cljs.core.Symbol(null,"meta10174","meta10174",-933864005,null)], null);
}));

(cljs.core.async.t_cljs$core$async10173.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async10173.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async10173");

(cljs.core.async.t_cljs$core$async10173.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async10173");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async10173.
 */
cljs.core.async.__GT_t_cljs$core$async10173 = (function cljs$core$async$alt_handler_$___GT_t_cljs$core$async10173(flag__$1,cb__$1,meta10174){
return (new cljs.core.async.t_cljs$core$async10173(flag__$1,cb__$1,meta10174));
});

}

return (new cljs.core.async.t_cljs$core$async10173(flag,cb,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * returns derefable [val port] if immediate, nil if enqueued
 */
cljs.core.async.do_alts = (function cljs$core$async$do_alts(fret,ports,opts){
var flag = cljs.core.async.alt_flag.call(null);
var n = cljs.core.count.call(null,ports);
var idxs = cljs.core.async.random_array.call(null,n);
var priority = new cljs.core.Keyword(null,"priority","priority",1431093715).cljs$core$IFn$_invoke$arity$1(opts);
var ret = (function (){var i = (0);
while(true){
if((i < n)){
var idx = (cljs.core.truth_(priority)?i:(idxs[i]));
var port = cljs.core.nth.call(null,ports,idx);
var wport = ((cljs.core.vector_QMARK_.call(null,port))?port.call(null,(0)):null);
var vbox = (cljs.core.truth_(wport)?(function (){var val = port.call(null,(1));
return cljs.core.async.impl.protocols.put_BANG_.call(null,wport,val,cljs.core.async.alt_handler.call(null,flag,((function (i,val,idx,port,wport,flag,n,idxs,priority){
return (function (p1__10176_SHARP_){
return fret.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10176_SHARP_,wport], null));
});})(i,val,idx,port,wport,flag,n,idxs,priority))
));
})():cljs.core.async.impl.protocols.take_BANG_.call(null,port,cljs.core.async.alt_handler.call(null,flag,((function (i,idx,port,wport,flag,n,idxs,priority){
return (function (p1__10177_SHARP_){
return fret.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__10177_SHARP_,port], null));
});})(i,idx,port,wport,flag,n,idxs,priority))
)));
if(cljs.core.truth_(vbox)){
return cljs.core.async.impl.channels.box.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.deref.call(null,vbox),(function (){var or__4185__auto__ = wport;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return port;
}
})()], null));
} else {
var G__10178 = (i + (1));
i = G__10178;
continue;
}
} else {
return null;
}
break;
}
})();
var or__4185__auto__ = ret;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
if(cljs.core.contains_QMARK_.call(null,opts,new cljs.core.Keyword(null,"default","default",-1987822328))){
var temp__5735__auto__ = (function (){var and__4174__auto__ = cljs.core.async.impl.protocols.active_QMARK_.call(null,flag);
if(cljs.core.truth_(and__4174__auto__)){
return cljs.core.async.impl.protocols.commit.call(null,flag);
} else {
return and__4174__auto__;
}
})();
if(cljs.core.truth_(temp__5735__auto__)){
var got = temp__5735__auto__;
return cljs.core.async.impl.channels.box.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"default","default",-1987822328).cljs$core$IFn$_invoke$arity$1(opts),new cljs.core.Keyword(null,"default","default",-1987822328)], null));
} else {
return null;
}
} else {
return null;
}
}
});
/**
 * Completes at most one of several channel operations. Must be called
 * inside a (go ...) block. ports is a vector of channel endpoints,
 * which can be either a channel to take from or a vector of
 *   [channel-to-put-to val-to-put], in any combination. Takes will be
 *   made as if by <!, and puts will be made as if by >!. Unless
 *   the :priority option is true, if more than one port operation is
 *   ready a non-deterministic choice will be made. If no operation is
 *   ready and a :default value is supplied, [default-val :default] will
 *   be returned, otherwise alts! will park until the first operation to
 *   become ready completes. Returns [val port] of the completed
 *   operation, where val is the value taken for takes, and a
 *   boolean (true unless already closed, as per put!) for puts.
 * 
 *   opts are passed as :key val ... Supported options:
 * 
 *   :default val - the value to use if none of the operations are immediately ready
 *   :priority true - (default nil) when true, the operations will be tried in order.
 * 
 *   Note: there is no guarantee that the port exps or val exprs will be
 *   used, nor in what order should they be, so they should not be
 *   depended upon for side effects.
 */
cljs.core.async.alts_BANG_ = (function cljs$core$async$alts_BANG_(var_args){
var args__4795__auto__ = [];
var len__4789__auto___10184 = arguments.length;
var i__4790__auto___10185 = (0);
while(true){
if((i__4790__auto___10185 < len__4789__auto___10184)){
args__4795__auto__.push((arguments[i__4790__auto___10185]));

var G__10186 = (i__4790__auto___10185 + (1));
i__4790__auto___10185 = G__10186;
continue;
} else {
}
break;
}

var argseq__4796__auto__ = ((((1) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((1)),(0),null)):null);
return cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4796__auto__);
});

(cljs.core.async.alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ports,p__10181){
var map__10182 = p__10181;
var map__10182__$1 = (((((!((map__10182 == null))))?(((((map__10182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__10182):map__10182);
var opts = map__10182__$1;
throw (new Error("alts! used not in (go ...) block"));
}));

(cljs.core.async.alts_BANG_.cljs$lang$maxFixedArity = (1));

/** @this {Function} */
(cljs.core.async.alts_BANG_.cljs$lang$applyTo = (function (seq10179){
var G__10180 = cljs.core.first.call(null,seq10179);
var seq10179__$1 = cljs.core.next.call(null,seq10179);
var self__4776__auto__ = this;
return self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__10180,seq10179__$1);
}));

/**
 * Puts a val into port if it's possible to do so immediately.
 *   nil values are not allowed. Never blocks. Returns true if offer succeeds.
 */
cljs.core.async.offer_BANG_ = (function cljs$core$async$offer_BANG_(port,val){
var ret = cljs.core.async.impl.protocols.put_BANG_.call(null,port,val,cljs.core.async.fn_handler.call(null,cljs.core.async.nop,false));
if(cljs.core.truth_(ret)){
return cljs.core.deref.call(null,ret);
} else {
return null;
}
});
/**
 * Takes a val from port if it's possible to do so immediately.
 *   Never blocks. Returns value if successful, nil otherwise.
 */
cljs.core.async.poll_BANG_ = (function cljs$core$async$poll_BANG_(port){
var ret = cljs.core.async.impl.protocols.take_BANG_.call(null,port,cljs.core.async.fn_handler.call(null,cljs.core.async.nop,false));
if(cljs.core.truth_(ret)){
return cljs.core.deref.call(null,ret);
} else {
return null;
}
});
/**
 * Takes elements from the from channel and supplies them to the to
 * channel. By default, the to channel will be closed when the from
 * channel closes, but can be determined by the close?  parameter. Will
 * stop consuming the from channel if the to channel closes
 */
cljs.core.async.pipe = (function cljs$core$async$pipe(var_args){
var G__10188 = arguments.length;
switch (G__10188) {
case 2:
return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$2 = (function (from,to){
return cljs.core.async.pipe.call(null,from,to,true);
}));

(cljs.core.async.pipe.cljs$core$IFn$_invoke$arity$3 = (function (from,to,close_QMARK_){
var c__9874__auto___10234 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10212){
var state_val_10213 = (state_10212[(1)]);
if((state_val_10213 === (7))){
var inst_10208 = (state_10212[(2)]);
var state_10212__$1 = state_10212;
var statearr_10214_10235 = state_10212__$1;
(statearr_10214_10235[(2)] = inst_10208);

(statearr_10214_10235[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (1))){
var state_10212__$1 = state_10212;
var statearr_10215_10236 = state_10212__$1;
(statearr_10215_10236[(2)] = null);

(statearr_10215_10236[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (4))){
var inst_10191 = (state_10212[(7)]);
var inst_10191__$1 = (state_10212[(2)]);
var inst_10192 = (inst_10191__$1 == null);
var state_10212__$1 = (function (){var statearr_10216 = state_10212;
(statearr_10216[(7)] = inst_10191__$1);

return statearr_10216;
})();
if(cljs.core.truth_(inst_10192)){
var statearr_10217_10237 = state_10212__$1;
(statearr_10217_10237[(1)] = (5));

} else {
var statearr_10218_10238 = state_10212__$1;
(statearr_10218_10238[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (13))){
var state_10212__$1 = state_10212;
var statearr_10219_10239 = state_10212__$1;
(statearr_10219_10239[(2)] = null);

(statearr_10219_10239[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (6))){
var inst_10191 = (state_10212[(7)]);
var state_10212__$1 = state_10212;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10212__$1,(11),to,inst_10191);
} else {
if((state_val_10213 === (3))){
var inst_10210 = (state_10212[(2)]);
var state_10212__$1 = state_10212;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10212__$1,inst_10210);
} else {
if((state_val_10213 === (12))){
var state_10212__$1 = state_10212;
var statearr_10220_10240 = state_10212__$1;
(statearr_10220_10240[(2)] = null);

(statearr_10220_10240[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (2))){
var state_10212__$1 = state_10212;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10212__$1,(4),from);
} else {
if((state_val_10213 === (11))){
var inst_10201 = (state_10212[(2)]);
var state_10212__$1 = state_10212;
if(cljs.core.truth_(inst_10201)){
var statearr_10221_10241 = state_10212__$1;
(statearr_10221_10241[(1)] = (12));

} else {
var statearr_10222_10242 = state_10212__$1;
(statearr_10222_10242[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (9))){
var state_10212__$1 = state_10212;
var statearr_10223_10243 = state_10212__$1;
(statearr_10223_10243[(2)] = null);

(statearr_10223_10243[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (5))){
var state_10212__$1 = state_10212;
if(cljs.core.truth_(close_QMARK_)){
var statearr_10224_10244 = state_10212__$1;
(statearr_10224_10244[(1)] = (8));

} else {
var statearr_10225_10245 = state_10212__$1;
(statearr_10225_10245[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (14))){
var inst_10206 = (state_10212[(2)]);
var state_10212__$1 = state_10212;
var statearr_10226_10246 = state_10212__$1;
(statearr_10226_10246[(2)] = inst_10206);

(statearr_10226_10246[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (10))){
var inst_10198 = (state_10212[(2)]);
var state_10212__$1 = state_10212;
var statearr_10227_10247 = state_10212__$1;
(statearr_10227_10247[(2)] = inst_10198);

(statearr_10227_10247[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10213 === (8))){
var inst_10195 = cljs.core.async.close_BANG_.call(null,to);
var state_10212__$1 = state_10212;
var statearr_10228_10248 = state_10212__$1;
(statearr_10228_10248[(2)] = inst_10195);

(statearr_10228_10248[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_10229 = [null,null,null,null,null,null,null,null];
(statearr_10229[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_10229[(1)] = (1));

return statearr_10229;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_10212){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10212);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10230){if((e10230 instanceof Object)){
var ex__9861__auto__ = e10230;
var statearr_10231_10249 = state_10212;
(statearr_10231_10249[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10212);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10230;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10250 = state_10212;
state_10212 = G__10250;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_10212){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_10212);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10232 = f__9875__auto__.call(null);
(statearr_10232[(6)] = c__9874__auto___10234);

return statearr_10232;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return to;
}));

(cljs.core.async.pipe.cljs$lang$maxFixedArity = 3);

cljs.core.async.pipeline_STAR_ = (function cljs$core$async$pipeline_STAR_(n,to,xf,from,close_QMARK_,ex_handler,type){
if((n > (0))){
} else {
throw (new Error("Assert failed: (pos? n)"));
}

var jobs = cljs.core.async.chan.call(null,n);
var results = cljs.core.async.chan.call(null,n);
var process = (function (p__10251){
var vec__10252 = p__10251;
var v = cljs.core.nth.call(null,vec__10252,(0),null);
var p = cljs.core.nth.call(null,vec__10252,(1),null);
var job = vec__10252;
if((job == null)){
cljs.core.async.close_BANG_.call(null,results);

return null;
} else {
var res = cljs.core.async.chan.call(null,(1),xf,ex_handler);
var c__9874__auto___10423 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10259){
var state_val_10260 = (state_10259[(1)]);
if((state_val_10260 === (1))){
var state_10259__$1 = state_10259;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10259__$1,(2),res,v);
} else {
if((state_val_10260 === (2))){
var inst_10256 = (state_10259[(2)]);
var inst_10257 = cljs.core.async.close_BANG_.call(null,res);
var state_10259__$1 = (function (){var statearr_10261 = state_10259;
(statearr_10261[(7)] = inst_10256);

return statearr_10261;
})();
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10259__$1,inst_10257);
} else {
return null;
}
}
});
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0 = (function (){
var statearr_10262 = [null,null,null,null,null,null,null,null];
(statearr_10262[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__);

(statearr_10262[(1)] = (1));

return statearr_10262;
});
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1 = (function (state_10259){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10259);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10263){if((e10263 instanceof Object)){
var ex__9861__auto__ = e10263;
var statearr_10264_10424 = state_10259;
(statearr_10264_10424[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10259);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10263;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10425 = state_10259;
state_10259 = G__10425;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = function(state_10259){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1.call(this,state_10259);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10265 = f__9875__auto__.call(null);
(statearr_10265[(6)] = c__9874__auto___10423);

return statearr_10265;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


cljs.core.async.put_BANG_.call(null,p,res);

return true;
}
});
var async = (function (p__10266){
var vec__10267 = p__10266;
var v = cljs.core.nth.call(null,vec__10267,(0),null);
var p = cljs.core.nth.call(null,vec__10267,(1),null);
var job = vec__10267;
if((job == null)){
cljs.core.async.close_BANG_.call(null,results);

return null;
} else {
var res = cljs.core.async.chan.call(null,(1));
xf.call(null,v,res);

cljs.core.async.put_BANG_.call(null,p,res);

return true;
}
});
var n__4666__auto___10426 = n;
var __10427 = (0);
while(true){
if((__10427 < n__4666__auto___10426)){
var G__10270_10428 = type;
var G__10270_10429__$1 = (((G__10270_10428 instanceof cljs.core.Keyword))?G__10270_10428.fqn:null);
switch (G__10270_10429__$1) {
case "compute":
var c__9874__auto___10431 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (__10427,c__9874__auto___10431,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async){
return (function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = ((function (__10427,c__9874__auto___10431,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async){
return (function (state_10283){
var state_val_10284 = (state_10283[(1)]);
if((state_val_10284 === (1))){
var state_10283__$1 = state_10283;
var statearr_10285_10432 = state_10283__$1;
(statearr_10285_10432[(2)] = null);

(statearr_10285_10432[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10284 === (2))){
var state_10283__$1 = state_10283;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10283__$1,(4),jobs);
} else {
if((state_val_10284 === (3))){
var inst_10281 = (state_10283[(2)]);
var state_10283__$1 = state_10283;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10283__$1,inst_10281);
} else {
if((state_val_10284 === (4))){
var inst_10273 = (state_10283[(2)]);
var inst_10274 = process.call(null,inst_10273);
var state_10283__$1 = state_10283;
if(cljs.core.truth_(inst_10274)){
var statearr_10286_10433 = state_10283__$1;
(statearr_10286_10433[(1)] = (5));

} else {
var statearr_10287_10434 = state_10283__$1;
(statearr_10287_10434[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10284 === (5))){
var state_10283__$1 = state_10283;
var statearr_10288_10435 = state_10283__$1;
(statearr_10288_10435[(2)] = null);

(statearr_10288_10435[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10284 === (6))){
var state_10283__$1 = state_10283;
var statearr_10289_10436 = state_10283__$1;
(statearr_10289_10436[(2)] = null);

(statearr_10289_10436[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10284 === (7))){
var inst_10279 = (state_10283[(2)]);
var state_10283__$1 = state_10283;
var statearr_10290_10437 = state_10283__$1;
(statearr_10290_10437[(2)] = inst_10279);

(statearr_10290_10437[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
});})(__10427,c__9874__auto___10431,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async))
;
return ((function (__10427,switch__9857__auto__,c__9874__auto___10431,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0 = (function (){
var statearr_10291 = [null,null,null,null,null,null,null];
(statearr_10291[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__);

(statearr_10291[(1)] = (1));

return statearr_10291;
});
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1 = (function (state_10283){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10283);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10292){if((e10292 instanceof Object)){
var ex__9861__auto__ = e10292;
var statearr_10293_10438 = state_10283;
(statearr_10293_10438[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10283);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10292;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10439 = state_10283;
state_10283 = G__10439;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = function(state_10283){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1.call(this,state_10283);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__;
})()
;})(__10427,switch__9857__auto__,c__9874__auto___10431,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async))
})();
var state__9876__auto__ = (function (){var statearr_10294 = f__9875__auto__.call(null);
(statearr_10294[(6)] = c__9874__auto___10431);

return statearr_10294;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
});})(__10427,c__9874__auto___10431,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async))
);


break;
case "async":
var c__9874__auto___10440 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,((function (__10427,c__9874__auto___10440,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async){
return (function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = ((function (__10427,c__9874__auto___10440,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async){
return (function (state_10307){
var state_val_10308 = (state_10307[(1)]);
if((state_val_10308 === (1))){
var state_10307__$1 = state_10307;
var statearr_10309_10441 = state_10307__$1;
(statearr_10309_10441[(2)] = null);

(statearr_10309_10441[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10308 === (2))){
var state_10307__$1 = state_10307;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10307__$1,(4),jobs);
} else {
if((state_val_10308 === (3))){
var inst_10305 = (state_10307[(2)]);
var state_10307__$1 = state_10307;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10307__$1,inst_10305);
} else {
if((state_val_10308 === (4))){
var inst_10297 = (state_10307[(2)]);
var inst_10298 = async.call(null,inst_10297);
var state_10307__$1 = state_10307;
if(cljs.core.truth_(inst_10298)){
var statearr_10310_10442 = state_10307__$1;
(statearr_10310_10442[(1)] = (5));

} else {
var statearr_10311_10443 = state_10307__$1;
(statearr_10311_10443[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10308 === (5))){
var state_10307__$1 = state_10307;
var statearr_10312_10444 = state_10307__$1;
(statearr_10312_10444[(2)] = null);

(statearr_10312_10444[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10308 === (6))){
var state_10307__$1 = state_10307;
var statearr_10313_10445 = state_10307__$1;
(statearr_10313_10445[(2)] = null);

(statearr_10313_10445[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10308 === (7))){
var inst_10303 = (state_10307[(2)]);
var state_10307__$1 = state_10307;
var statearr_10314_10446 = state_10307__$1;
(statearr_10314_10446[(2)] = inst_10303);

(statearr_10314_10446[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
});})(__10427,c__9874__auto___10440,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async))
;
return ((function (__10427,switch__9857__auto__,c__9874__auto___10440,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async){
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0 = (function (){
var statearr_10315 = [null,null,null,null,null,null,null];
(statearr_10315[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__);

(statearr_10315[(1)] = (1));

return statearr_10315;
});
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1 = (function (state_10307){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10307);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10316){if((e10316 instanceof Object)){
var ex__9861__auto__ = e10316;
var statearr_10317_10447 = state_10307;
(statearr_10317_10447[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10307);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10316;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10448 = state_10307;
state_10307 = G__10448;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = function(state_10307){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1.call(this,state_10307);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__;
})()
;})(__10427,switch__9857__auto__,c__9874__auto___10440,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async))
})();
var state__9876__auto__ = (function (){var statearr_10318 = f__9875__auto__.call(null);
(statearr_10318[(6)] = c__9874__auto___10440);

return statearr_10318;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
});})(__10427,c__9874__auto___10440,G__10270_10428,G__10270_10429__$1,n__4666__auto___10426,jobs,results,process,async))
);


break;
default:
throw (new Error(["No matching clause: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__10270_10429__$1)].join('')));

}

var G__10449 = (__10427 + (1));
__10427 = G__10449;
continue;
} else {
}
break;
}

var c__9874__auto___10450 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10340){
var state_val_10341 = (state_10340[(1)]);
if((state_val_10341 === (7))){
var inst_10336 = (state_10340[(2)]);
var state_10340__$1 = state_10340;
var statearr_10342_10451 = state_10340__$1;
(statearr_10342_10451[(2)] = inst_10336);

(statearr_10342_10451[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10341 === (1))){
var state_10340__$1 = state_10340;
var statearr_10343_10452 = state_10340__$1;
(statearr_10343_10452[(2)] = null);

(statearr_10343_10452[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10341 === (4))){
var inst_10321 = (state_10340[(7)]);
var inst_10321__$1 = (state_10340[(2)]);
var inst_10322 = (inst_10321__$1 == null);
var state_10340__$1 = (function (){var statearr_10344 = state_10340;
(statearr_10344[(7)] = inst_10321__$1);

return statearr_10344;
})();
if(cljs.core.truth_(inst_10322)){
var statearr_10345_10453 = state_10340__$1;
(statearr_10345_10453[(1)] = (5));

} else {
var statearr_10346_10454 = state_10340__$1;
(statearr_10346_10454[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10341 === (6))){
var inst_10321 = (state_10340[(7)]);
var inst_10326 = (state_10340[(8)]);
var inst_10326__$1 = cljs.core.async.chan.call(null,(1));
var inst_10327 = cljs.core.PersistentVector.EMPTY_NODE;
var inst_10328 = [inst_10321,inst_10326__$1];
var inst_10329 = (new cljs.core.PersistentVector(null,2,(5),inst_10327,inst_10328,null));
var state_10340__$1 = (function (){var statearr_10347 = state_10340;
(statearr_10347[(8)] = inst_10326__$1);

return statearr_10347;
})();
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10340__$1,(8),jobs,inst_10329);
} else {
if((state_val_10341 === (3))){
var inst_10338 = (state_10340[(2)]);
var state_10340__$1 = state_10340;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10340__$1,inst_10338);
} else {
if((state_val_10341 === (2))){
var state_10340__$1 = state_10340;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10340__$1,(4),from);
} else {
if((state_val_10341 === (9))){
var inst_10333 = (state_10340[(2)]);
var state_10340__$1 = (function (){var statearr_10348 = state_10340;
(statearr_10348[(9)] = inst_10333);

return statearr_10348;
})();
var statearr_10349_10455 = state_10340__$1;
(statearr_10349_10455[(2)] = null);

(statearr_10349_10455[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10341 === (5))){
var inst_10324 = cljs.core.async.close_BANG_.call(null,jobs);
var state_10340__$1 = state_10340;
var statearr_10350_10456 = state_10340__$1;
(statearr_10350_10456[(2)] = inst_10324);

(statearr_10350_10456[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10341 === (8))){
var inst_10326 = (state_10340[(8)]);
var inst_10331 = (state_10340[(2)]);
var state_10340__$1 = (function (){var statearr_10351 = state_10340;
(statearr_10351[(10)] = inst_10331);

return statearr_10351;
})();
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10340__$1,(9),results,inst_10326);
} else {
return null;
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0 = (function (){
var statearr_10352 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_10352[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__);

(statearr_10352[(1)] = (1));

return statearr_10352;
});
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1 = (function (state_10340){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10340);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10353){if((e10353 instanceof Object)){
var ex__9861__auto__ = e10353;
var statearr_10354_10457 = state_10340;
(statearr_10354_10457[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10340);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10353;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10458 = state_10340;
state_10340 = G__10458;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = function(state_10340){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1.call(this,state_10340);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10355 = f__9875__auto__.call(null);
(statearr_10355[(6)] = c__9874__auto___10450);

return statearr_10355;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


var c__9874__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10393){
var state_val_10394 = (state_10393[(1)]);
if((state_val_10394 === (7))){
var inst_10389 = (state_10393[(2)]);
var state_10393__$1 = state_10393;
var statearr_10395_10459 = state_10393__$1;
(statearr_10395_10459[(2)] = inst_10389);

(statearr_10395_10459[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (20))){
var state_10393__$1 = state_10393;
var statearr_10396_10460 = state_10393__$1;
(statearr_10396_10460[(2)] = null);

(statearr_10396_10460[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (1))){
var state_10393__$1 = state_10393;
var statearr_10397_10461 = state_10393__$1;
(statearr_10397_10461[(2)] = null);

(statearr_10397_10461[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (4))){
var inst_10358 = (state_10393[(7)]);
var inst_10358__$1 = (state_10393[(2)]);
var inst_10359 = (inst_10358__$1 == null);
var state_10393__$1 = (function (){var statearr_10398 = state_10393;
(statearr_10398[(7)] = inst_10358__$1);

return statearr_10398;
})();
if(cljs.core.truth_(inst_10359)){
var statearr_10399_10462 = state_10393__$1;
(statearr_10399_10462[(1)] = (5));

} else {
var statearr_10400_10463 = state_10393__$1;
(statearr_10400_10463[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (15))){
var inst_10371 = (state_10393[(8)]);
var state_10393__$1 = state_10393;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10393__$1,(18),to,inst_10371);
} else {
if((state_val_10394 === (21))){
var inst_10384 = (state_10393[(2)]);
var state_10393__$1 = state_10393;
var statearr_10401_10464 = state_10393__$1;
(statearr_10401_10464[(2)] = inst_10384);

(statearr_10401_10464[(1)] = (13));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (13))){
var inst_10386 = (state_10393[(2)]);
var state_10393__$1 = (function (){var statearr_10402 = state_10393;
(statearr_10402[(9)] = inst_10386);

return statearr_10402;
})();
var statearr_10403_10465 = state_10393__$1;
(statearr_10403_10465[(2)] = null);

(statearr_10403_10465[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (6))){
var inst_10358 = (state_10393[(7)]);
var state_10393__$1 = state_10393;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10393__$1,(11),inst_10358);
} else {
if((state_val_10394 === (17))){
var inst_10379 = (state_10393[(2)]);
var state_10393__$1 = state_10393;
if(cljs.core.truth_(inst_10379)){
var statearr_10404_10466 = state_10393__$1;
(statearr_10404_10466[(1)] = (19));

} else {
var statearr_10405_10467 = state_10393__$1;
(statearr_10405_10467[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (3))){
var inst_10391 = (state_10393[(2)]);
var state_10393__$1 = state_10393;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10393__$1,inst_10391);
} else {
if((state_val_10394 === (12))){
var inst_10368 = (state_10393[(10)]);
var state_10393__$1 = state_10393;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10393__$1,(14),inst_10368);
} else {
if((state_val_10394 === (2))){
var state_10393__$1 = state_10393;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10393__$1,(4),results);
} else {
if((state_val_10394 === (19))){
var state_10393__$1 = state_10393;
var statearr_10406_10468 = state_10393__$1;
(statearr_10406_10468[(2)] = null);

(statearr_10406_10468[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (11))){
var inst_10368 = (state_10393[(2)]);
var state_10393__$1 = (function (){var statearr_10407 = state_10393;
(statearr_10407[(10)] = inst_10368);

return statearr_10407;
})();
var statearr_10408_10469 = state_10393__$1;
(statearr_10408_10469[(2)] = null);

(statearr_10408_10469[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (9))){
var state_10393__$1 = state_10393;
var statearr_10409_10470 = state_10393__$1;
(statearr_10409_10470[(2)] = null);

(statearr_10409_10470[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (5))){
var state_10393__$1 = state_10393;
if(cljs.core.truth_(close_QMARK_)){
var statearr_10410_10471 = state_10393__$1;
(statearr_10410_10471[(1)] = (8));

} else {
var statearr_10411_10472 = state_10393__$1;
(statearr_10411_10472[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (14))){
var inst_10371 = (state_10393[(8)]);
var inst_10371__$1 = (state_10393[(2)]);
var inst_10372 = (inst_10371__$1 == null);
var inst_10373 = cljs.core.not.call(null,inst_10372);
var state_10393__$1 = (function (){var statearr_10412 = state_10393;
(statearr_10412[(8)] = inst_10371__$1);

return statearr_10412;
})();
if(inst_10373){
var statearr_10413_10473 = state_10393__$1;
(statearr_10413_10473[(1)] = (15));

} else {
var statearr_10414_10474 = state_10393__$1;
(statearr_10414_10474[(1)] = (16));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (16))){
var state_10393__$1 = state_10393;
var statearr_10415_10475 = state_10393__$1;
(statearr_10415_10475[(2)] = false);

(statearr_10415_10475[(1)] = (17));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (10))){
var inst_10365 = (state_10393[(2)]);
var state_10393__$1 = state_10393;
var statearr_10416_10476 = state_10393__$1;
(statearr_10416_10476[(2)] = inst_10365);

(statearr_10416_10476[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (18))){
var inst_10376 = (state_10393[(2)]);
var state_10393__$1 = state_10393;
var statearr_10417_10477 = state_10393__$1;
(statearr_10417_10477[(2)] = inst_10376);

(statearr_10417_10477[(1)] = (17));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10394 === (8))){
var inst_10362 = cljs.core.async.close_BANG_.call(null,to);
var state_10393__$1 = state_10393;
var statearr_10418_10478 = state_10393__$1;
(statearr_10418_10478[(2)] = inst_10362);

(statearr_10418_10478[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = null;
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0 = (function (){
var statearr_10419 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_10419[(0)] = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__);

(statearr_10419[(1)] = (1));

return statearr_10419;
});
var cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1 = (function (state_10393){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10393);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10420){if((e10420 instanceof Object)){
var ex__9861__auto__ = e10420;
var statearr_10421_10479 = state_10393;
(statearr_10421_10479[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10393);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10420;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10480 = state_10393;
state_10393 = G__10480;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__ = function(state_10393){
switch(arguments.length){
case 0:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1.call(this,state_10393);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____0;
cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$pipeline_STAR__$_state_machine__9858__auto____1;
return cljs$core$async$pipeline_STAR__$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10422 = f__9875__auto__.call(null);
(statearr_10422[(6)] = c__9874__auto__);

return statearr_10422;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));

return c__9874__auto__;
});
/**
 * Takes elements from the from channel and supplies them to the to
 *   channel, subject to the async function af, with parallelism n. af
 *   must be a function of two arguments, the first an input value and
 *   the second a channel on which to place the result(s). af must close!
 *   the channel before returning.  The presumption is that af will
 *   return immediately, having launched some asynchronous operation
 *   whose completion/callback will manipulate the result channel. Outputs
 *   will be returned in order relative to  the inputs. By default, the to
 *   channel will be closed when the from channel closes, but can be
 *   determined by the close?  parameter. Will stop consuming the from
 *   channel if the to channel closes.
 */
cljs.core.async.pipeline_async = (function cljs$core$async$pipeline_async(var_args){
var G__10482 = arguments.length;
switch (G__10482) {
case 4:
return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$4 = (function (n,to,af,from){
return cljs.core.async.pipeline_async.call(null,n,to,af,from,true);
}));

(cljs.core.async.pipeline_async.cljs$core$IFn$_invoke$arity$5 = (function (n,to,af,from,close_QMARK_){
return cljs.core.async.pipeline_STAR_.call(null,n,to,af,from,close_QMARK_,null,new cljs.core.Keyword(null,"async","async",1050769601));
}));

(cljs.core.async.pipeline_async.cljs$lang$maxFixedArity = 5);

/**
 * Takes elements from the from channel and supplies them to the to
 *   channel, subject to the transducer xf, with parallelism n. Because
 *   it is parallel, the transducer will be applied independently to each
 *   element, not across elements, and may produce zero or more outputs
 *   per input.  Outputs will be returned in order relative to the
 *   inputs. By default, the to channel will be closed when the from
 *   channel closes, but can be determined by the close?  parameter. Will
 *   stop consuming the from channel if the to channel closes.
 * 
 *   Note this is supplied for API compatibility with the Clojure version.
 *   Values of N > 1 will not result in actual concurrency in a
 *   single-threaded runtime.
 */
cljs.core.async.pipeline = (function cljs$core$async$pipeline(var_args){
var G__10485 = arguments.length;
switch (G__10485) {
case 4:
return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4 = (function (n,to,xf,from){
return cljs.core.async.pipeline.call(null,n,to,xf,from,true);
}));

(cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$5 = (function (n,to,xf,from,close_QMARK_){
return cljs.core.async.pipeline.call(null,n,to,xf,from,close_QMARK_,null);
}));

(cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$6 = (function (n,to,xf,from,close_QMARK_,ex_handler){
return cljs.core.async.pipeline_STAR_.call(null,n,to,xf,from,close_QMARK_,ex_handler,new cljs.core.Keyword(null,"compute","compute",1555393130));
}));

(cljs.core.async.pipeline.cljs$lang$maxFixedArity = 6);

/**
 * Takes a predicate and a source channel and returns a vector of two
 *   channels, the first of which will contain the values for which the
 *   predicate returned true, the second those for which it returned
 *   false.
 * 
 *   The out channels will be unbuffered by default, or two buf-or-ns can
 *   be supplied. The channels will close after the source channel has
 *   closed.
 */
cljs.core.async.split = (function cljs$core$async$split(var_args){
var G__10488 = arguments.length;
switch (G__10488) {
case 2:
return cljs.core.async.split.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 4:
return cljs.core.async.split.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.split.cljs$core$IFn$_invoke$arity$2 = (function (p,ch){
return cljs.core.async.split.call(null,p,ch,null,null);
}));

(cljs.core.async.split.cljs$core$IFn$_invoke$arity$4 = (function (p,ch,t_buf_or_n,f_buf_or_n){
var tc = cljs.core.async.chan.call(null,t_buf_or_n);
var fc = cljs.core.async.chan.call(null,f_buf_or_n);
var c__9874__auto___10537 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10514){
var state_val_10515 = (state_10514[(1)]);
if((state_val_10515 === (7))){
var inst_10510 = (state_10514[(2)]);
var state_10514__$1 = state_10514;
var statearr_10516_10538 = state_10514__$1;
(statearr_10516_10538[(2)] = inst_10510);

(statearr_10516_10538[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (1))){
var state_10514__$1 = state_10514;
var statearr_10517_10539 = state_10514__$1;
(statearr_10517_10539[(2)] = null);

(statearr_10517_10539[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (4))){
var inst_10491 = (state_10514[(7)]);
var inst_10491__$1 = (state_10514[(2)]);
var inst_10492 = (inst_10491__$1 == null);
var state_10514__$1 = (function (){var statearr_10518 = state_10514;
(statearr_10518[(7)] = inst_10491__$1);

return statearr_10518;
})();
if(cljs.core.truth_(inst_10492)){
var statearr_10519_10540 = state_10514__$1;
(statearr_10519_10540[(1)] = (5));

} else {
var statearr_10520_10541 = state_10514__$1;
(statearr_10520_10541[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (13))){
var state_10514__$1 = state_10514;
var statearr_10521_10542 = state_10514__$1;
(statearr_10521_10542[(2)] = null);

(statearr_10521_10542[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (6))){
var inst_10491 = (state_10514[(7)]);
var inst_10497 = p.call(null,inst_10491);
var state_10514__$1 = state_10514;
if(cljs.core.truth_(inst_10497)){
var statearr_10522_10543 = state_10514__$1;
(statearr_10522_10543[(1)] = (9));

} else {
var statearr_10523_10544 = state_10514__$1;
(statearr_10523_10544[(1)] = (10));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (3))){
var inst_10512 = (state_10514[(2)]);
var state_10514__$1 = state_10514;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10514__$1,inst_10512);
} else {
if((state_val_10515 === (12))){
var state_10514__$1 = state_10514;
var statearr_10524_10545 = state_10514__$1;
(statearr_10524_10545[(2)] = null);

(statearr_10524_10545[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (2))){
var state_10514__$1 = state_10514;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10514__$1,(4),ch);
} else {
if((state_val_10515 === (11))){
var inst_10491 = (state_10514[(7)]);
var inst_10501 = (state_10514[(2)]);
var state_10514__$1 = state_10514;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10514__$1,(8),inst_10501,inst_10491);
} else {
if((state_val_10515 === (9))){
var state_10514__$1 = state_10514;
var statearr_10525_10546 = state_10514__$1;
(statearr_10525_10546[(2)] = tc);

(statearr_10525_10546[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (5))){
var inst_10494 = cljs.core.async.close_BANG_.call(null,tc);
var inst_10495 = cljs.core.async.close_BANG_.call(null,fc);
var state_10514__$1 = (function (){var statearr_10526 = state_10514;
(statearr_10526[(8)] = inst_10494);

return statearr_10526;
})();
var statearr_10527_10547 = state_10514__$1;
(statearr_10527_10547[(2)] = inst_10495);

(statearr_10527_10547[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (14))){
var inst_10508 = (state_10514[(2)]);
var state_10514__$1 = state_10514;
var statearr_10528_10548 = state_10514__$1;
(statearr_10528_10548[(2)] = inst_10508);

(statearr_10528_10548[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (10))){
var state_10514__$1 = state_10514;
var statearr_10529_10549 = state_10514__$1;
(statearr_10529_10549[(2)] = fc);

(statearr_10529_10549[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10515 === (8))){
var inst_10503 = (state_10514[(2)]);
var state_10514__$1 = state_10514;
if(cljs.core.truth_(inst_10503)){
var statearr_10530_10550 = state_10514__$1;
(statearr_10530_10550[(1)] = (12));

} else {
var statearr_10531_10551 = state_10514__$1;
(statearr_10531_10551[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_10532 = [null,null,null,null,null,null,null,null,null];
(statearr_10532[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_10532[(1)] = (1));

return statearr_10532;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_10514){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10514);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10533){if((e10533 instanceof Object)){
var ex__9861__auto__ = e10533;
var statearr_10534_10552 = state_10514;
(statearr_10534_10552[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10514);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10533;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10553 = state_10514;
state_10514 = G__10553;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_10514){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_10514);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10535 = f__9875__auto__.call(null);
(statearr_10535[(6)] = c__9874__auto___10537);

return statearr_10535;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tc,fc], null);
}));

(cljs.core.async.split.cljs$lang$maxFixedArity = 4);

/**
 * f should be a function of 2 arguments. Returns a channel containing
 *   the single result of applying f to init and the first item from the
 *   channel, then applying f to that result and the 2nd item, etc. If
 *   the channel closes without yielding items, returns init and f is not
 *   called. ch must close before reduce produces a result.
 */
cljs.core.async.reduce = (function cljs$core$async$reduce(f,init,ch){
var c__9874__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10574){
var state_val_10575 = (state_10574[(1)]);
if((state_val_10575 === (7))){
var inst_10570 = (state_10574[(2)]);
var state_10574__$1 = state_10574;
var statearr_10576_10594 = state_10574__$1;
(statearr_10576_10594[(2)] = inst_10570);

(statearr_10576_10594[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (1))){
var inst_10554 = init;
var state_10574__$1 = (function (){var statearr_10577 = state_10574;
(statearr_10577[(7)] = inst_10554);

return statearr_10577;
})();
var statearr_10578_10595 = state_10574__$1;
(statearr_10578_10595[(2)] = null);

(statearr_10578_10595[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (4))){
var inst_10557 = (state_10574[(8)]);
var inst_10557__$1 = (state_10574[(2)]);
var inst_10558 = (inst_10557__$1 == null);
var state_10574__$1 = (function (){var statearr_10579 = state_10574;
(statearr_10579[(8)] = inst_10557__$1);

return statearr_10579;
})();
if(cljs.core.truth_(inst_10558)){
var statearr_10580_10596 = state_10574__$1;
(statearr_10580_10596[(1)] = (5));

} else {
var statearr_10581_10597 = state_10574__$1;
(statearr_10581_10597[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (6))){
var inst_10561 = (state_10574[(9)]);
var inst_10557 = (state_10574[(8)]);
var inst_10554 = (state_10574[(7)]);
var inst_10561__$1 = f.call(null,inst_10554,inst_10557);
var inst_10562 = cljs.core.reduced_QMARK_.call(null,inst_10561__$1);
var state_10574__$1 = (function (){var statearr_10582 = state_10574;
(statearr_10582[(9)] = inst_10561__$1);

return statearr_10582;
})();
if(inst_10562){
var statearr_10583_10598 = state_10574__$1;
(statearr_10583_10598[(1)] = (8));

} else {
var statearr_10584_10599 = state_10574__$1;
(statearr_10584_10599[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (3))){
var inst_10572 = (state_10574[(2)]);
var state_10574__$1 = state_10574;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10574__$1,inst_10572);
} else {
if((state_val_10575 === (2))){
var state_10574__$1 = state_10574;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10574__$1,(4),ch);
} else {
if((state_val_10575 === (9))){
var inst_10561 = (state_10574[(9)]);
var inst_10554 = inst_10561;
var state_10574__$1 = (function (){var statearr_10585 = state_10574;
(statearr_10585[(7)] = inst_10554);

return statearr_10585;
})();
var statearr_10586_10600 = state_10574__$1;
(statearr_10586_10600[(2)] = null);

(statearr_10586_10600[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (5))){
var inst_10554 = (state_10574[(7)]);
var state_10574__$1 = state_10574;
var statearr_10587_10601 = state_10574__$1;
(statearr_10587_10601[(2)] = inst_10554);

(statearr_10587_10601[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (10))){
var inst_10568 = (state_10574[(2)]);
var state_10574__$1 = state_10574;
var statearr_10588_10602 = state_10574__$1;
(statearr_10588_10602[(2)] = inst_10568);

(statearr_10588_10602[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10575 === (8))){
var inst_10561 = (state_10574[(9)]);
var inst_10564 = cljs.core.deref.call(null,inst_10561);
var state_10574__$1 = state_10574;
var statearr_10589_10603 = state_10574__$1;
(statearr_10589_10603[(2)] = inst_10564);

(statearr_10589_10603[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$reduce_$_state_machine__9858__auto__ = null;
var cljs$core$async$reduce_$_state_machine__9858__auto____0 = (function (){
var statearr_10590 = [null,null,null,null,null,null,null,null,null,null];
(statearr_10590[(0)] = cljs$core$async$reduce_$_state_machine__9858__auto__);

(statearr_10590[(1)] = (1));

return statearr_10590;
});
var cljs$core$async$reduce_$_state_machine__9858__auto____1 = (function (state_10574){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10574);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10591){if((e10591 instanceof Object)){
var ex__9861__auto__ = e10591;
var statearr_10592_10604 = state_10574;
(statearr_10592_10604[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10574);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10591;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10605 = state_10574;
state_10574 = G__10605;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$reduce_$_state_machine__9858__auto__ = function(state_10574){
switch(arguments.length){
case 0:
return cljs$core$async$reduce_$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$reduce_$_state_machine__9858__auto____1.call(this,state_10574);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$reduce_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$reduce_$_state_machine__9858__auto____0;
cljs$core$async$reduce_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$reduce_$_state_machine__9858__auto____1;
return cljs$core$async$reduce_$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10593 = f__9875__auto__.call(null);
(statearr_10593[(6)] = c__9874__auto__);

return statearr_10593;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));

return c__9874__auto__;
});
/**
 * async/reduces a channel with a transformation (xform f).
 *   Returns a channel containing the result.  ch must close before
 *   transduce produces a result.
 */
cljs.core.async.transduce = (function cljs$core$async$transduce(xform,f,init,ch){
var f__$1 = xform.call(null,f);
var c__9874__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10611){
var state_val_10612 = (state_10611[(1)]);
if((state_val_10612 === (1))){
var inst_10606 = cljs.core.async.reduce.call(null,f__$1,init,ch);
var state_10611__$1 = state_10611;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10611__$1,(2),inst_10606);
} else {
if((state_val_10612 === (2))){
var inst_10608 = (state_10611[(2)]);
var inst_10609 = f__$1.call(null,inst_10608);
var state_10611__$1 = state_10611;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10611__$1,inst_10609);
} else {
return null;
}
}
});
return (function() {
var cljs$core$async$transduce_$_state_machine__9858__auto__ = null;
var cljs$core$async$transduce_$_state_machine__9858__auto____0 = (function (){
var statearr_10613 = [null,null,null,null,null,null,null];
(statearr_10613[(0)] = cljs$core$async$transduce_$_state_machine__9858__auto__);

(statearr_10613[(1)] = (1));

return statearr_10613;
});
var cljs$core$async$transduce_$_state_machine__9858__auto____1 = (function (state_10611){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10611);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10614){if((e10614 instanceof Object)){
var ex__9861__auto__ = e10614;
var statearr_10615_10617 = state_10611;
(statearr_10615_10617[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10611);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10614;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10618 = state_10611;
state_10611 = G__10618;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$transduce_$_state_machine__9858__auto__ = function(state_10611){
switch(arguments.length){
case 0:
return cljs$core$async$transduce_$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$transduce_$_state_machine__9858__auto____1.call(this,state_10611);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$transduce_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$transduce_$_state_machine__9858__auto____0;
cljs$core$async$transduce_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$transduce_$_state_machine__9858__auto____1;
return cljs$core$async$transduce_$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10616 = f__9875__auto__.call(null);
(statearr_10616[(6)] = c__9874__auto__);

return statearr_10616;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));

return c__9874__auto__;
});
/**
 * Puts the contents of coll into the supplied channel.
 * 
 *   By default the channel will be closed after the items are copied,
 *   but can be determined by the close? parameter.
 * 
 *   Returns a channel which will close after the items are copied.
 */
cljs.core.async.onto_chan = (function cljs$core$async$onto_chan(var_args){
var G__10620 = arguments.length;
switch (G__10620) {
case 2:
return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$2 = (function (ch,coll){
return cljs.core.async.onto_chan.call(null,ch,coll,true);
}));

(cljs.core.async.onto_chan.cljs$core$IFn$_invoke$arity$3 = (function (ch,coll,close_QMARK_){
var c__9874__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10645){
var state_val_10646 = (state_10645[(1)]);
if((state_val_10646 === (7))){
var inst_10627 = (state_10645[(2)]);
var state_10645__$1 = state_10645;
var statearr_10647_10668 = state_10645__$1;
(statearr_10647_10668[(2)] = inst_10627);

(statearr_10647_10668[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (1))){
var inst_10621 = cljs.core.seq.call(null,coll);
var inst_10622 = inst_10621;
var state_10645__$1 = (function (){var statearr_10648 = state_10645;
(statearr_10648[(7)] = inst_10622);

return statearr_10648;
})();
var statearr_10649_10669 = state_10645__$1;
(statearr_10649_10669[(2)] = null);

(statearr_10649_10669[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (4))){
var inst_10622 = (state_10645[(7)]);
var inst_10625 = cljs.core.first.call(null,inst_10622);
var state_10645__$1 = state_10645;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_10645__$1,(7),ch,inst_10625);
} else {
if((state_val_10646 === (13))){
var inst_10639 = (state_10645[(2)]);
var state_10645__$1 = state_10645;
var statearr_10650_10670 = state_10645__$1;
(statearr_10650_10670[(2)] = inst_10639);

(statearr_10650_10670[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (6))){
var inst_10630 = (state_10645[(2)]);
var state_10645__$1 = state_10645;
if(cljs.core.truth_(inst_10630)){
var statearr_10651_10671 = state_10645__$1;
(statearr_10651_10671[(1)] = (8));

} else {
var statearr_10652_10672 = state_10645__$1;
(statearr_10652_10672[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (3))){
var inst_10643 = (state_10645[(2)]);
var state_10645__$1 = state_10645;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10645__$1,inst_10643);
} else {
if((state_val_10646 === (12))){
var state_10645__$1 = state_10645;
var statearr_10653_10673 = state_10645__$1;
(statearr_10653_10673[(2)] = null);

(statearr_10653_10673[(1)] = (13));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (2))){
var inst_10622 = (state_10645[(7)]);
var state_10645__$1 = state_10645;
if(cljs.core.truth_(inst_10622)){
var statearr_10654_10674 = state_10645__$1;
(statearr_10654_10674[(1)] = (4));

} else {
var statearr_10655_10675 = state_10645__$1;
(statearr_10655_10675[(1)] = (5));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (11))){
var inst_10636 = cljs.core.async.close_BANG_.call(null,ch);
var state_10645__$1 = state_10645;
var statearr_10656_10676 = state_10645__$1;
(statearr_10656_10676[(2)] = inst_10636);

(statearr_10656_10676[(1)] = (13));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (9))){
var state_10645__$1 = state_10645;
if(cljs.core.truth_(close_QMARK_)){
var statearr_10657_10677 = state_10645__$1;
(statearr_10657_10677[(1)] = (11));

} else {
var statearr_10658_10678 = state_10645__$1;
(statearr_10658_10678[(1)] = (12));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (5))){
var inst_10622 = (state_10645[(7)]);
var state_10645__$1 = state_10645;
var statearr_10659_10679 = state_10645__$1;
(statearr_10659_10679[(2)] = inst_10622);

(statearr_10659_10679[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (10))){
var inst_10641 = (state_10645[(2)]);
var state_10645__$1 = state_10645;
var statearr_10660_10680 = state_10645__$1;
(statearr_10660_10680[(2)] = inst_10641);

(statearr_10660_10680[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10646 === (8))){
var inst_10622 = (state_10645[(7)]);
var inst_10632 = cljs.core.next.call(null,inst_10622);
var inst_10622__$1 = inst_10632;
var state_10645__$1 = (function (){var statearr_10661 = state_10645;
(statearr_10661[(7)] = inst_10622__$1);

return statearr_10661;
})();
var statearr_10662_10681 = state_10645__$1;
(statearr_10662_10681[(2)] = null);

(statearr_10662_10681[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_10663 = [null,null,null,null,null,null,null,null];
(statearr_10663[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_10663[(1)] = (1));

return statearr_10663;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_10645){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10645);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10664){if((e10664 instanceof Object)){
var ex__9861__auto__ = e10664;
var statearr_10665_10682 = state_10645;
(statearr_10665_10682[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10645);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10664;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10683 = state_10645;
state_10645 = G__10683;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_10645){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_10645);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10666 = f__9875__auto__.call(null);
(statearr_10666[(6)] = c__9874__auto__);

return statearr_10666;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));

return c__9874__auto__;
}));

(cljs.core.async.onto_chan.cljs$lang$maxFixedArity = 3);

/**
 * Creates and returns a channel which contains the contents of coll,
 *   closing when exhausted.
 */
cljs.core.async.to_chan = (function cljs$core$async$to_chan(coll){
var ch = cljs.core.async.chan.call(null,cljs.core.bounded_count.call(null,(100),coll));
cljs.core.async.onto_chan.call(null,ch,coll);

return ch;
});

/**
 * @interface
 */
cljs.core.async.Mux = function(){};

cljs.core.async.muxch_STAR_ = (function cljs$core$async$muxch_STAR_(_){
if((((!((_ == null)))) && ((!((_.cljs$core$async$Mux$muxch_STAR_$arity$1 == null)))))){
return _.cljs$core$async$Mux$muxch_STAR_$arity$1(_);
} else {
var x__4487__auto__ = (((_ == null))?null:_);
var m__4488__auto__ = (cljs.core.async.muxch_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,_);
} else {
var m__4485__auto__ = (cljs.core.async.muxch_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,_);
} else {
throw cljs.core.missing_protocol.call(null,"Mux.muxch*",_);
}
}
}
});


/**
 * @interface
 */
cljs.core.async.Mult = function(){};

cljs.core.async.tap_STAR_ = (function cljs$core$async$tap_STAR_(m,ch,close_QMARK_){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mult$tap_STAR_$arity$3 == null)))))){
return m.cljs$core$async$Mult$tap_STAR_$arity$3(m,ch,close_QMARK_);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.tap_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m,ch,close_QMARK_);
} else {
var m__4485__auto__ = (cljs.core.async.tap_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m,ch,close_QMARK_);
} else {
throw cljs.core.missing_protocol.call(null,"Mult.tap*",m);
}
}
}
});

cljs.core.async.untap_STAR_ = (function cljs$core$async$untap_STAR_(m,ch){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mult$untap_STAR_$arity$2 == null)))))){
return m.cljs$core$async$Mult$untap_STAR_$arity$2(m,ch);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.untap_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m,ch);
} else {
var m__4485__auto__ = (cljs.core.async.untap_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Mult.untap*",m);
}
}
}
});

cljs.core.async.untap_all_STAR_ = (function cljs$core$async$untap_all_STAR_(m){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mult$untap_all_STAR_$arity$1 == null)))))){
return m.cljs$core$async$Mult$untap_all_STAR_$arity$1(m);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.untap_all_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m);
} else {
var m__4485__auto__ = (cljs.core.async.untap_all_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m);
} else {
throw cljs.core.missing_protocol.call(null,"Mult.untap-all*",m);
}
}
}
});

/**
 * Creates and returns a mult(iple) of the supplied channel. Channels
 *   containing copies of the channel can be created with 'tap', and
 *   detached with 'untap'.
 * 
 *   Each item is distributed to all taps in parallel and synchronously,
 *   i.e. each tap must accept before the next item is distributed. Use
 *   buffering/windowing to prevent slow taps from holding up the mult.
 * 
 *   Items received when there are no taps get dropped.
 * 
 *   If a tap puts to a closed channel, it will be removed from the mult.
 */
cljs.core.async.mult = (function cljs$core$async$mult(ch){
var cs = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
var m = (function (){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async10684 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.Mult}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.async.Mux}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async10684 = (function (ch,cs,meta10685){
this.ch = ch;
this.cs = cs;
this.meta10685 = meta10685;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_10686,meta10685__$1){
var self__ = this;
var _10686__$1 = this;
return (new cljs.core.async.t_cljs$core$async10684(self__.ch,self__.cs,meta10685__$1));
}));

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_10686){
var self__ = this;
var _10686__$1 = this;
return self__.meta10685;
}));

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.ch;
}));

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$async$Mult$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$async$Mult$tap_STAR_$arity$3 = (function (_,ch__$1,close_QMARK_){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.assoc,ch__$1,close_QMARK_);

return null;
}));

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$async$Mult$untap_STAR_$arity$2 = (function (_,ch__$1){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.dissoc,ch__$1);

return null;
}));

(cljs.core.async.t_cljs$core$async10684.prototype.cljs$core$async$Mult$untap_all_STAR_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.reset_BANG_.call(null,self__.cs,cljs.core.PersistentArrayMap.EMPTY);

return null;
}));

(cljs.core.async.t_cljs$core$async10684.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"cs","cs",-117024463,null),new cljs.core.Symbol(null,"meta10685","meta10685",1649064282,null)], null);
}));

(cljs.core.async.t_cljs$core$async10684.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async10684.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async10684");

(cljs.core.async.t_cljs$core$async10684.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async10684");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async10684.
 */
cljs.core.async.__GT_t_cljs$core$async10684 = (function cljs$core$async$mult_$___GT_t_cljs$core$async10684(ch__$1,cs__$1,meta10685){
return (new cljs.core.async.t_cljs$core$async10684(ch__$1,cs__$1,meta10685));
});

}

return (new cljs.core.async.t_cljs$core$async10684(ch,cs,cljs.core.PersistentArrayMap.EMPTY));
})()
;
var dchan = cljs.core.async.chan.call(null,(1));
var dctr = cljs.core.atom.call(null,null);
var done = (function (_){
if((cljs.core.swap_BANG_.call(null,dctr,cljs.core.dec) === (0))){
return cljs.core.async.put_BANG_.call(null,dchan,true);
} else {
return null;
}
});
var c__9874__auto___10906 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_10821){
var state_val_10822 = (state_10821[(1)]);
if((state_val_10822 === (7))){
var inst_10817 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10823_10907 = state_10821__$1;
(statearr_10823_10907[(2)] = inst_10817);

(statearr_10823_10907[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (20))){
var inst_10720 = (state_10821[(7)]);
var inst_10732 = cljs.core.first.call(null,inst_10720);
var inst_10733 = cljs.core.nth.call(null,inst_10732,(0),null);
var inst_10734 = cljs.core.nth.call(null,inst_10732,(1),null);
var state_10821__$1 = (function (){var statearr_10824 = state_10821;
(statearr_10824[(8)] = inst_10733);

return statearr_10824;
})();
if(cljs.core.truth_(inst_10734)){
var statearr_10825_10908 = state_10821__$1;
(statearr_10825_10908[(1)] = (22));

} else {
var statearr_10826_10909 = state_10821__$1;
(statearr_10826_10909[(1)] = (23));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (27))){
var inst_10764 = (state_10821[(9)]);
var inst_10762 = (state_10821[(10)]);
var inst_10689 = (state_10821[(11)]);
var inst_10769 = (state_10821[(12)]);
var inst_10769__$1 = cljs.core._nth.call(null,inst_10762,inst_10764);
var inst_10770 = cljs.core.async.put_BANG_.call(null,inst_10769__$1,inst_10689,done);
var state_10821__$1 = (function (){var statearr_10827 = state_10821;
(statearr_10827[(12)] = inst_10769__$1);

return statearr_10827;
})();
if(cljs.core.truth_(inst_10770)){
var statearr_10828_10910 = state_10821__$1;
(statearr_10828_10910[(1)] = (30));

} else {
var statearr_10829_10911 = state_10821__$1;
(statearr_10829_10911[(1)] = (31));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (1))){
var state_10821__$1 = state_10821;
var statearr_10830_10912 = state_10821__$1;
(statearr_10830_10912[(2)] = null);

(statearr_10830_10912[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (24))){
var inst_10720 = (state_10821[(7)]);
var inst_10739 = (state_10821[(2)]);
var inst_10740 = cljs.core.next.call(null,inst_10720);
var inst_10698 = inst_10740;
var inst_10699 = null;
var inst_10700 = (0);
var inst_10701 = (0);
var state_10821__$1 = (function (){var statearr_10831 = state_10821;
(statearr_10831[(13)] = inst_10701);

(statearr_10831[(14)] = inst_10699);

(statearr_10831[(15)] = inst_10739);

(statearr_10831[(16)] = inst_10698);

(statearr_10831[(17)] = inst_10700);

return statearr_10831;
})();
var statearr_10832_10913 = state_10821__$1;
(statearr_10832_10913[(2)] = null);

(statearr_10832_10913[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (39))){
var state_10821__$1 = state_10821;
var statearr_10836_10914 = state_10821__$1;
(statearr_10836_10914[(2)] = null);

(statearr_10836_10914[(1)] = (41));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (4))){
var inst_10689 = (state_10821[(11)]);
var inst_10689__$1 = (state_10821[(2)]);
var inst_10690 = (inst_10689__$1 == null);
var state_10821__$1 = (function (){var statearr_10837 = state_10821;
(statearr_10837[(11)] = inst_10689__$1);

return statearr_10837;
})();
if(cljs.core.truth_(inst_10690)){
var statearr_10838_10915 = state_10821__$1;
(statearr_10838_10915[(1)] = (5));

} else {
var statearr_10839_10916 = state_10821__$1;
(statearr_10839_10916[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (15))){
var inst_10701 = (state_10821[(13)]);
var inst_10699 = (state_10821[(14)]);
var inst_10698 = (state_10821[(16)]);
var inst_10700 = (state_10821[(17)]);
var inst_10716 = (state_10821[(2)]);
var inst_10717 = (inst_10701 + (1));
var tmp10833 = inst_10699;
var tmp10834 = inst_10698;
var tmp10835 = inst_10700;
var inst_10698__$1 = tmp10834;
var inst_10699__$1 = tmp10833;
var inst_10700__$1 = tmp10835;
var inst_10701__$1 = inst_10717;
var state_10821__$1 = (function (){var statearr_10840 = state_10821;
(statearr_10840[(13)] = inst_10701__$1);

(statearr_10840[(14)] = inst_10699__$1);

(statearr_10840[(16)] = inst_10698__$1);

(statearr_10840[(18)] = inst_10716);

(statearr_10840[(17)] = inst_10700__$1);

return statearr_10840;
})();
var statearr_10841_10917 = state_10821__$1;
(statearr_10841_10917[(2)] = null);

(statearr_10841_10917[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (21))){
var inst_10743 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10845_10918 = state_10821__$1;
(statearr_10845_10918[(2)] = inst_10743);

(statearr_10845_10918[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (31))){
var inst_10769 = (state_10821[(12)]);
var inst_10773 = done.call(null,null);
var inst_10774 = cljs.core.async.untap_STAR_.call(null,m,inst_10769);
var state_10821__$1 = (function (){var statearr_10846 = state_10821;
(statearr_10846[(19)] = inst_10773);

return statearr_10846;
})();
var statearr_10847_10919 = state_10821__$1;
(statearr_10847_10919[(2)] = inst_10774);

(statearr_10847_10919[(1)] = (32));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (32))){
var inst_10764 = (state_10821[(9)]);
var inst_10761 = (state_10821[(20)]);
var inst_10763 = (state_10821[(21)]);
var inst_10762 = (state_10821[(10)]);
var inst_10776 = (state_10821[(2)]);
var inst_10777 = (inst_10764 + (1));
var tmp10842 = inst_10761;
var tmp10843 = inst_10763;
var tmp10844 = inst_10762;
var inst_10761__$1 = tmp10842;
var inst_10762__$1 = tmp10844;
var inst_10763__$1 = tmp10843;
var inst_10764__$1 = inst_10777;
var state_10821__$1 = (function (){var statearr_10848 = state_10821;
(statearr_10848[(9)] = inst_10764__$1);

(statearr_10848[(20)] = inst_10761__$1);

(statearr_10848[(22)] = inst_10776);

(statearr_10848[(21)] = inst_10763__$1);

(statearr_10848[(10)] = inst_10762__$1);

return statearr_10848;
})();
var statearr_10849_10920 = state_10821__$1;
(statearr_10849_10920[(2)] = null);

(statearr_10849_10920[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (40))){
var inst_10789 = (state_10821[(23)]);
var inst_10793 = done.call(null,null);
var inst_10794 = cljs.core.async.untap_STAR_.call(null,m,inst_10789);
var state_10821__$1 = (function (){var statearr_10850 = state_10821;
(statearr_10850[(24)] = inst_10793);

return statearr_10850;
})();
var statearr_10851_10921 = state_10821__$1;
(statearr_10851_10921[(2)] = inst_10794);

(statearr_10851_10921[(1)] = (41));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (33))){
var inst_10780 = (state_10821[(25)]);
var inst_10782 = cljs.core.chunked_seq_QMARK_.call(null,inst_10780);
var state_10821__$1 = state_10821;
if(inst_10782){
var statearr_10852_10922 = state_10821__$1;
(statearr_10852_10922[(1)] = (36));

} else {
var statearr_10853_10923 = state_10821__$1;
(statearr_10853_10923[(1)] = (37));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (13))){
var inst_10710 = (state_10821[(26)]);
var inst_10713 = cljs.core.async.close_BANG_.call(null,inst_10710);
var state_10821__$1 = state_10821;
var statearr_10854_10924 = state_10821__$1;
(statearr_10854_10924[(2)] = inst_10713);

(statearr_10854_10924[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (22))){
var inst_10733 = (state_10821[(8)]);
var inst_10736 = cljs.core.async.close_BANG_.call(null,inst_10733);
var state_10821__$1 = state_10821;
var statearr_10855_10925 = state_10821__$1;
(statearr_10855_10925[(2)] = inst_10736);

(statearr_10855_10925[(1)] = (24));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (36))){
var inst_10780 = (state_10821[(25)]);
var inst_10784 = cljs.core.chunk_first.call(null,inst_10780);
var inst_10785 = cljs.core.chunk_rest.call(null,inst_10780);
var inst_10786 = cljs.core.count.call(null,inst_10784);
var inst_10761 = inst_10785;
var inst_10762 = inst_10784;
var inst_10763 = inst_10786;
var inst_10764 = (0);
var state_10821__$1 = (function (){var statearr_10856 = state_10821;
(statearr_10856[(9)] = inst_10764);

(statearr_10856[(20)] = inst_10761);

(statearr_10856[(21)] = inst_10763);

(statearr_10856[(10)] = inst_10762);

return statearr_10856;
})();
var statearr_10857_10926 = state_10821__$1;
(statearr_10857_10926[(2)] = null);

(statearr_10857_10926[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (41))){
var inst_10780 = (state_10821[(25)]);
var inst_10796 = (state_10821[(2)]);
var inst_10797 = cljs.core.next.call(null,inst_10780);
var inst_10761 = inst_10797;
var inst_10762 = null;
var inst_10763 = (0);
var inst_10764 = (0);
var state_10821__$1 = (function (){var statearr_10858 = state_10821;
(statearr_10858[(9)] = inst_10764);

(statearr_10858[(20)] = inst_10761);

(statearr_10858[(21)] = inst_10763);

(statearr_10858[(10)] = inst_10762);

(statearr_10858[(27)] = inst_10796);

return statearr_10858;
})();
var statearr_10859_10927 = state_10821__$1;
(statearr_10859_10927[(2)] = null);

(statearr_10859_10927[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (43))){
var state_10821__$1 = state_10821;
var statearr_10860_10928 = state_10821__$1;
(statearr_10860_10928[(2)] = null);

(statearr_10860_10928[(1)] = (44));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (29))){
var inst_10805 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10861_10929 = state_10821__$1;
(statearr_10861_10929[(2)] = inst_10805);

(statearr_10861_10929[(1)] = (26));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (44))){
var inst_10814 = (state_10821[(2)]);
var state_10821__$1 = (function (){var statearr_10862 = state_10821;
(statearr_10862[(28)] = inst_10814);

return statearr_10862;
})();
var statearr_10863_10930 = state_10821__$1;
(statearr_10863_10930[(2)] = null);

(statearr_10863_10930[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (6))){
var inst_10753 = (state_10821[(29)]);
var inst_10752 = cljs.core.deref.call(null,cs);
var inst_10753__$1 = cljs.core.keys.call(null,inst_10752);
var inst_10754 = cljs.core.count.call(null,inst_10753__$1);
var inst_10755 = cljs.core.reset_BANG_.call(null,dctr,inst_10754);
var inst_10760 = cljs.core.seq.call(null,inst_10753__$1);
var inst_10761 = inst_10760;
var inst_10762 = null;
var inst_10763 = (0);
var inst_10764 = (0);
var state_10821__$1 = (function (){var statearr_10864 = state_10821;
(statearr_10864[(9)] = inst_10764);

(statearr_10864[(20)] = inst_10761);

(statearr_10864[(29)] = inst_10753__$1);

(statearr_10864[(21)] = inst_10763);

(statearr_10864[(10)] = inst_10762);

(statearr_10864[(30)] = inst_10755);

return statearr_10864;
})();
var statearr_10865_10931 = state_10821__$1;
(statearr_10865_10931[(2)] = null);

(statearr_10865_10931[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (28))){
var inst_10761 = (state_10821[(20)]);
var inst_10780 = (state_10821[(25)]);
var inst_10780__$1 = cljs.core.seq.call(null,inst_10761);
var state_10821__$1 = (function (){var statearr_10866 = state_10821;
(statearr_10866[(25)] = inst_10780__$1);

return statearr_10866;
})();
if(inst_10780__$1){
var statearr_10867_10932 = state_10821__$1;
(statearr_10867_10932[(1)] = (33));

} else {
var statearr_10868_10933 = state_10821__$1;
(statearr_10868_10933[(1)] = (34));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (25))){
var inst_10764 = (state_10821[(9)]);
var inst_10763 = (state_10821[(21)]);
var inst_10766 = (inst_10764 < inst_10763);
var inst_10767 = inst_10766;
var state_10821__$1 = state_10821;
if(cljs.core.truth_(inst_10767)){
var statearr_10869_10934 = state_10821__$1;
(statearr_10869_10934[(1)] = (27));

} else {
var statearr_10870_10935 = state_10821__$1;
(statearr_10870_10935[(1)] = (28));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (34))){
var state_10821__$1 = state_10821;
var statearr_10871_10936 = state_10821__$1;
(statearr_10871_10936[(2)] = null);

(statearr_10871_10936[(1)] = (35));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (17))){
var state_10821__$1 = state_10821;
var statearr_10872_10937 = state_10821__$1;
(statearr_10872_10937[(2)] = null);

(statearr_10872_10937[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (3))){
var inst_10819 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_10821__$1,inst_10819);
} else {
if((state_val_10822 === (12))){
var inst_10748 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10873_10938 = state_10821__$1;
(statearr_10873_10938[(2)] = inst_10748);

(statearr_10873_10938[(1)] = (9));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (2))){
var state_10821__$1 = state_10821;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10821__$1,(4),ch);
} else {
if((state_val_10822 === (23))){
var state_10821__$1 = state_10821;
var statearr_10874_10939 = state_10821__$1;
(statearr_10874_10939[(2)] = null);

(statearr_10874_10939[(1)] = (24));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (35))){
var inst_10803 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10875_10940 = state_10821__$1;
(statearr_10875_10940[(2)] = inst_10803);

(statearr_10875_10940[(1)] = (29));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (19))){
var inst_10720 = (state_10821[(7)]);
var inst_10724 = cljs.core.chunk_first.call(null,inst_10720);
var inst_10725 = cljs.core.chunk_rest.call(null,inst_10720);
var inst_10726 = cljs.core.count.call(null,inst_10724);
var inst_10698 = inst_10725;
var inst_10699 = inst_10724;
var inst_10700 = inst_10726;
var inst_10701 = (0);
var state_10821__$1 = (function (){var statearr_10876 = state_10821;
(statearr_10876[(13)] = inst_10701);

(statearr_10876[(14)] = inst_10699);

(statearr_10876[(16)] = inst_10698);

(statearr_10876[(17)] = inst_10700);

return statearr_10876;
})();
var statearr_10877_10941 = state_10821__$1;
(statearr_10877_10941[(2)] = null);

(statearr_10877_10941[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (11))){
var inst_10720 = (state_10821[(7)]);
var inst_10698 = (state_10821[(16)]);
var inst_10720__$1 = cljs.core.seq.call(null,inst_10698);
var state_10821__$1 = (function (){var statearr_10878 = state_10821;
(statearr_10878[(7)] = inst_10720__$1);

return statearr_10878;
})();
if(inst_10720__$1){
var statearr_10879_10942 = state_10821__$1;
(statearr_10879_10942[(1)] = (16));

} else {
var statearr_10880_10943 = state_10821__$1;
(statearr_10880_10943[(1)] = (17));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (9))){
var inst_10750 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10881_10944 = state_10821__$1;
(statearr_10881_10944[(2)] = inst_10750);

(statearr_10881_10944[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (5))){
var inst_10696 = cljs.core.deref.call(null,cs);
var inst_10697 = cljs.core.seq.call(null,inst_10696);
var inst_10698 = inst_10697;
var inst_10699 = null;
var inst_10700 = (0);
var inst_10701 = (0);
var state_10821__$1 = (function (){var statearr_10882 = state_10821;
(statearr_10882[(13)] = inst_10701);

(statearr_10882[(14)] = inst_10699);

(statearr_10882[(16)] = inst_10698);

(statearr_10882[(17)] = inst_10700);

return statearr_10882;
})();
var statearr_10883_10945 = state_10821__$1;
(statearr_10883_10945[(2)] = null);

(statearr_10883_10945[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (14))){
var state_10821__$1 = state_10821;
var statearr_10884_10946 = state_10821__$1;
(statearr_10884_10946[(2)] = null);

(statearr_10884_10946[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (45))){
var inst_10811 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10885_10947 = state_10821__$1;
(statearr_10885_10947[(2)] = inst_10811);

(statearr_10885_10947[(1)] = (44));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (26))){
var inst_10753 = (state_10821[(29)]);
var inst_10807 = (state_10821[(2)]);
var inst_10808 = cljs.core.seq.call(null,inst_10753);
var state_10821__$1 = (function (){var statearr_10886 = state_10821;
(statearr_10886[(31)] = inst_10807);

return statearr_10886;
})();
if(inst_10808){
var statearr_10887_10948 = state_10821__$1;
(statearr_10887_10948[(1)] = (42));

} else {
var statearr_10888_10949 = state_10821__$1;
(statearr_10888_10949[(1)] = (43));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (16))){
var inst_10720 = (state_10821[(7)]);
var inst_10722 = cljs.core.chunked_seq_QMARK_.call(null,inst_10720);
var state_10821__$1 = state_10821;
if(inst_10722){
var statearr_10889_10950 = state_10821__$1;
(statearr_10889_10950[(1)] = (19));

} else {
var statearr_10890_10951 = state_10821__$1;
(statearr_10890_10951[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (38))){
var inst_10800 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10891_10952 = state_10821__$1;
(statearr_10891_10952[(2)] = inst_10800);

(statearr_10891_10952[(1)] = (35));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (30))){
var state_10821__$1 = state_10821;
var statearr_10892_10953 = state_10821__$1;
(statearr_10892_10953[(2)] = null);

(statearr_10892_10953[(1)] = (32));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (10))){
var inst_10701 = (state_10821[(13)]);
var inst_10699 = (state_10821[(14)]);
var inst_10709 = cljs.core._nth.call(null,inst_10699,inst_10701);
var inst_10710 = cljs.core.nth.call(null,inst_10709,(0),null);
var inst_10711 = cljs.core.nth.call(null,inst_10709,(1),null);
var state_10821__$1 = (function (){var statearr_10893 = state_10821;
(statearr_10893[(26)] = inst_10710);

return statearr_10893;
})();
if(cljs.core.truth_(inst_10711)){
var statearr_10894_10954 = state_10821__$1;
(statearr_10894_10954[(1)] = (13));

} else {
var statearr_10895_10955 = state_10821__$1;
(statearr_10895_10955[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (18))){
var inst_10746 = (state_10821[(2)]);
var state_10821__$1 = state_10821;
var statearr_10896_10956 = state_10821__$1;
(statearr_10896_10956[(2)] = inst_10746);

(statearr_10896_10956[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (42))){
var state_10821__$1 = state_10821;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_10821__$1,(45),dchan);
} else {
if((state_val_10822 === (37))){
var inst_10780 = (state_10821[(25)]);
var inst_10689 = (state_10821[(11)]);
var inst_10789 = (state_10821[(23)]);
var inst_10789__$1 = cljs.core.first.call(null,inst_10780);
var inst_10790 = cljs.core.async.put_BANG_.call(null,inst_10789__$1,inst_10689,done);
var state_10821__$1 = (function (){var statearr_10897 = state_10821;
(statearr_10897[(23)] = inst_10789__$1);

return statearr_10897;
})();
if(cljs.core.truth_(inst_10790)){
var statearr_10898_10957 = state_10821__$1;
(statearr_10898_10957[(1)] = (39));

} else {
var statearr_10899_10958 = state_10821__$1;
(statearr_10899_10958[(1)] = (40));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_10822 === (8))){
var inst_10701 = (state_10821[(13)]);
var inst_10700 = (state_10821[(17)]);
var inst_10703 = (inst_10701 < inst_10700);
var inst_10704 = inst_10703;
var state_10821__$1 = state_10821;
if(cljs.core.truth_(inst_10704)){
var statearr_10900_10959 = state_10821__$1;
(statearr_10900_10959[(1)] = (10));

} else {
var statearr_10901_10960 = state_10821__$1;
(statearr_10901_10960[(1)] = (11));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$mult_$_state_machine__9858__auto__ = null;
var cljs$core$async$mult_$_state_machine__9858__auto____0 = (function (){
var statearr_10902 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_10902[(0)] = cljs$core$async$mult_$_state_machine__9858__auto__);

(statearr_10902[(1)] = (1));

return statearr_10902;
});
var cljs$core$async$mult_$_state_machine__9858__auto____1 = (function (state_10821){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_10821);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e10903){if((e10903 instanceof Object)){
var ex__9861__auto__ = e10903;
var statearr_10904_10961 = state_10821;
(statearr_10904_10961[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_10821);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e10903;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__10962 = state_10821;
state_10821 = G__10962;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$mult_$_state_machine__9858__auto__ = function(state_10821){
switch(arguments.length){
case 0:
return cljs$core$async$mult_$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$mult_$_state_machine__9858__auto____1.call(this,state_10821);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$mult_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mult_$_state_machine__9858__auto____0;
cljs$core$async$mult_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mult_$_state_machine__9858__auto____1;
return cljs$core$async$mult_$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_10905 = f__9875__auto__.call(null);
(statearr_10905[(6)] = c__9874__auto___10906);

return statearr_10905;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return m;
});
/**
 * Copies the mult source onto the supplied channel.
 * 
 *   By default the channel will be closed when the source closes,
 *   but can be determined by the close? parameter.
 */
cljs.core.async.tap = (function cljs$core$async$tap(var_args){
var G__10964 = arguments.length;
switch (G__10964) {
case 2:
return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.tap.cljs$core$IFn$_invoke$arity$2 = (function (mult,ch){
return cljs.core.async.tap.call(null,mult,ch,true);
}));

(cljs.core.async.tap.cljs$core$IFn$_invoke$arity$3 = (function (mult,ch,close_QMARK_){
cljs.core.async.tap_STAR_.call(null,mult,ch,close_QMARK_);

return ch;
}));

(cljs.core.async.tap.cljs$lang$maxFixedArity = 3);

/**
 * Disconnects a target channel from a mult
 */
cljs.core.async.untap = (function cljs$core$async$untap(mult,ch){
return cljs.core.async.untap_STAR_.call(null,mult,ch);
});
/**
 * Disconnects all target channels from a mult
 */
cljs.core.async.untap_all = (function cljs$core$async$untap_all(mult){
return cljs.core.async.untap_all_STAR_.call(null,mult);
});

/**
 * @interface
 */
cljs.core.async.Mix = function(){};

cljs.core.async.admix_STAR_ = (function cljs$core$async$admix_STAR_(m,ch){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mix$admix_STAR_$arity$2 == null)))))){
return m.cljs$core$async$Mix$admix_STAR_$arity$2(m,ch);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.admix_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m,ch);
} else {
var m__4485__auto__ = (cljs.core.async.admix_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.admix*",m);
}
}
}
});

cljs.core.async.unmix_STAR_ = (function cljs$core$async$unmix_STAR_(m,ch){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mix$unmix_STAR_$arity$2 == null)))))){
return m.cljs$core$async$Mix$unmix_STAR_$arity$2(m,ch);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.unmix_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m,ch);
} else {
var m__4485__auto__ = (cljs.core.async.unmix_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.unmix*",m);
}
}
}
});

cljs.core.async.unmix_all_STAR_ = (function cljs$core$async$unmix_all_STAR_(m){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mix$unmix_all_STAR_$arity$1 == null)))))){
return m.cljs$core$async$Mix$unmix_all_STAR_$arity$1(m);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.unmix_all_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m);
} else {
var m__4485__auto__ = (cljs.core.async.unmix_all_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.unmix-all*",m);
}
}
}
});

cljs.core.async.toggle_STAR_ = (function cljs$core$async$toggle_STAR_(m,state_map){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mix$toggle_STAR_$arity$2 == null)))))){
return m.cljs$core$async$Mix$toggle_STAR_$arity$2(m,state_map);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.toggle_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m,state_map);
} else {
var m__4485__auto__ = (cljs.core.async.toggle_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m,state_map);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.toggle*",m);
}
}
}
});

cljs.core.async.solo_mode_STAR_ = (function cljs$core$async$solo_mode_STAR_(m,mode){
if((((!((m == null)))) && ((!((m.cljs$core$async$Mix$solo_mode_STAR_$arity$2 == null)))))){
return m.cljs$core$async$Mix$solo_mode_STAR_$arity$2(m,mode);
} else {
var x__4487__auto__ = (((m == null))?null:m);
var m__4488__auto__ = (cljs.core.async.solo_mode_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,m,mode);
} else {
var m__4485__auto__ = (cljs.core.async.solo_mode_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,m,mode);
} else {
throw cljs.core.missing_protocol.call(null,"Mix.solo-mode*",m);
}
}
}
});

cljs.core.async.ioc_alts_BANG_ = (function cljs$core$async$ioc_alts_BANG_(var_args){
var args__4795__auto__ = [];
var len__4789__auto___10976 = arguments.length;
var i__4790__auto___10977 = (0);
while(true){
if((i__4790__auto___10977 < len__4789__auto___10976)){
args__4795__auto__.push((arguments[i__4790__auto___10977]));

var G__10978 = (i__4790__auto___10977 + (1));
i__4790__auto___10977 = G__10978;
continue;
} else {
}
break;
}

var argseq__4796__auto__ = ((((3) < args__4795__auto__.length))?(new cljs.core.IndexedSeq(args__4795__auto__.slice((3)),(0),null)):null);
return cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4796__auto__);
});

(cljs.core.async.ioc_alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (state,cont_block,ports,p__10970){
var map__10971 = p__10970;
var map__10971__$1 = (((((!((map__10971 == null))))?(((((map__10971.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10971.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__10971):map__10971);
var opts = map__10971__$1;
var statearr_10973_10979 = state;
(statearr_10973_10979[(1)] = cont_block);


var temp__5735__auto__ = cljs.core.async.do_alts.call(null,(function (val){
var statearr_10974_10980 = state;
(statearr_10974_10980[(2)] = val);


return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state);
}),ports,opts);
if(cljs.core.truth_(temp__5735__auto__)){
var cb = temp__5735__auto__;
var statearr_10975_10981 = state;
(statearr_10975_10981[(2)] = cljs.core.deref.call(null,cb));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}));

(cljs.core.async.ioc_alts_BANG_.cljs$lang$maxFixedArity = (3));

/** @this {Function} */
(cljs.core.async.ioc_alts_BANG_.cljs$lang$applyTo = (function (seq10966){
var G__10967 = cljs.core.first.call(null,seq10966);
var seq10966__$1 = cljs.core.next.call(null,seq10966);
var G__10968 = cljs.core.first.call(null,seq10966__$1);
var seq10966__$2 = cljs.core.next.call(null,seq10966__$1);
var G__10969 = cljs.core.first.call(null,seq10966__$2);
var seq10966__$3 = cljs.core.next.call(null,seq10966__$2);
var self__4776__auto__ = this;
return self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__10967,G__10968,G__10969,seq10966__$3);
}));

/**
 * Creates and returns a mix of one or more input channels which will
 *   be put on the supplied out channel. Input sources can be added to
 *   the mix with 'admix', and removed with 'unmix'. A mix supports
 *   soloing, muting and pausing multiple inputs atomically using
 *   'toggle', and can solo using either muting or pausing as determined
 *   by 'solo-mode'.
 * 
 *   Each channel can have zero or more boolean modes set via 'toggle':
 * 
 *   :solo - when true, only this (ond other soloed) channel(s) will appear
 *        in the mix output channel. :mute and :pause states of soloed
 *        channels are ignored. If solo-mode is :mute, non-soloed
 *        channels are muted, if :pause, non-soloed channels are
 *        paused.
 * 
 *   :mute - muted channels will have their contents consumed but not included in the mix
 *   :pause - paused channels will not have their contents consumed (and thus also not included in the mix)
 */
cljs.core.async.mix = (function cljs$core$async$mix(out){
var cs = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
var solo_modes = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"pause","pause",-2095325672),null,new cljs.core.Keyword(null,"mute","mute",1151223646),null], null), null);
var attrs = cljs.core.conj.call(null,solo_modes,new cljs.core.Keyword(null,"solo","solo",-316350075));
var solo_mode = cljs.core.atom.call(null,new cljs.core.Keyword(null,"mute","mute",1151223646));
var change = cljs.core.async.chan.call(null);
var changed = (function (){
return cljs.core.async.put_BANG_.call(null,change,true);
});
var pick = (function (attr,chs){
return cljs.core.reduce_kv.call(null,(function (ret,c,v){
if(cljs.core.truth_(attr.call(null,v))){
return cljs.core.conj.call(null,ret,c);
} else {
return ret;
}
}),cljs.core.PersistentHashSet.EMPTY,chs);
});
var calc_state = (function (){
var chs = cljs.core.deref.call(null,cs);
var mode = cljs.core.deref.call(null,solo_mode);
var solos = pick.call(null,new cljs.core.Keyword(null,"solo","solo",-316350075),chs);
var pauses = pick.call(null,new cljs.core.Keyword(null,"pause","pause",-2095325672),chs);
return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,"solos","solos",1441458643),solos,new cljs.core.Keyword(null,"mutes","mutes",1068806309),pick.call(null,new cljs.core.Keyword(null,"mute","mute",1151223646),chs),new cljs.core.Keyword(null,"reads","reads",-1215067361),cljs.core.conj.call(null,((((cljs.core._EQ_.call(null,mode,new cljs.core.Keyword(null,"pause","pause",-2095325672))) && ((!(cljs.core.empty_QMARK_.call(null,solos))))))?cljs.core.vec.call(null,solos):cljs.core.vec.call(null,cljs.core.remove.call(null,pauses,cljs.core.keys.call(null,chs)))),change)], null);
});
var m = (function (){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async10982 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.async.Mix}
 * @implements {cljs.core.async.Mux}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async10982 = (function (change,solo_mode,pick,cs,calc_state,out,changed,solo_modes,attrs,meta10983){
this.change = change;
this.solo_mode = solo_mode;
this.pick = pick;
this.cs = cs;
this.calc_state = calc_state;
this.out = out;
this.changed = changed;
this.solo_modes = solo_modes;
this.attrs = attrs;
this.meta10983 = meta10983;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_10984,meta10983__$1){
var self__ = this;
var _10984__$1 = this;
return (new cljs.core.async.t_cljs$core$async10982(self__.change,self__.solo_mode,self__.pick,self__.cs,self__.calc_state,self__.out,self__.changed,self__.solo_modes,self__.attrs,meta10983__$1));
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_10984){
var self__ = this;
var _10984__$1 = this;
return self__.meta10983;
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.out;
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mix$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mix$admix_STAR_$arity$2 = (function (_,ch){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.assoc,ch,cljs.core.PersistentArrayMap.EMPTY);

return self__.changed.call(null);
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mix$unmix_STAR_$arity$2 = (function (_,ch){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.dissoc,ch);

return self__.changed.call(null);
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mix$unmix_all_STAR_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
cljs.core.reset_BANG_.call(null,self__.cs,cljs.core.PersistentArrayMap.EMPTY);

return self__.changed.call(null);
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mix$toggle_STAR_$arity$2 = (function (_,state_map){
var self__ = this;
var ___$1 = this;
cljs.core.swap_BANG_.call(null,self__.cs,cljs.core.partial.call(null,cljs.core.merge_with,cljs.core.merge),state_map);

return self__.changed.call(null);
}));

(cljs.core.async.t_cljs$core$async10982.prototype.cljs$core$async$Mix$solo_mode_STAR_$arity$2 = (function (_,mode){
var self__ = this;
var ___$1 = this;
if(cljs.core.truth_(self__.solo_modes.call(null,mode))){
} else {
throw (new Error(["Assert failed: ",["mode must be one of: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.solo_modes)].join(''),"\n","(solo-modes mode)"].join('')));
}

cljs.core.reset_BANG_.call(null,self__.solo_mode,mode);

return self__.changed.call(null);
}));

(cljs.core.async.t_cljs$core$async10982.getBasis = (function (){
return new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"change","change",477485025,null),new cljs.core.Symbol(null,"solo-mode","solo-mode",2031788074,null),new cljs.core.Symbol(null,"pick","pick",1300068175,null),new cljs.core.Symbol(null,"cs","cs",-117024463,null),new cljs.core.Symbol(null,"calc-state","calc-state",-349968968,null),new cljs.core.Symbol(null,"out","out",729986010,null),new cljs.core.Symbol(null,"changed","changed",-2083710852,null),new cljs.core.Symbol(null,"solo-modes","solo-modes",882180540,null),new cljs.core.Symbol(null,"attrs","attrs",-450137186,null),new cljs.core.Symbol(null,"meta10983","meta10983",-1922114648,null)], null);
}));

(cljs.core.async.t_cljs$core$async10982.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async10982.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async10982");

(cljs.core.async.t_cljs$core$async10982.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async10982");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async10982.
 */
cljs.core.async.__GT_t_cljs$core$async10982 = (function cljs$core$async$mix_$___GT_t_cljs$core$async10982(change__$1,solo_mode__$1,pick__$1,cs__$1,calc_state__$1,out__$1,changed__$1,solo_modes__$1,attrs__$1,meta10983){
return (new cljs.core.async.t_cljs$core$async10982(change__$1,solo_mode__$1,pick__$1,cs__$1,calc_state__$1,out__$1,changed__$1,solo_modes__$1,attrs__$1,meta10983));
});

}

return (new cljs.core.async.t_cljs$core$async10982(change,solo_mode,pick,cs,calc_state,out,changed,solo_modes,attrs,cljs.core.PersistentArrayMap.EMPTY));
})()
;
var c__9874__auto___11146 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11086){
var state_val_11087 = (state_11086[(1)]);
if((state_val_11087 === (7))){
var inst_11001 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
var statearr_11088_11147 = state_11086__$1;
(statearr_11088_11147[(2)] = inst_11001);

(statearr_11088_11147[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (20))){
var inst_11013 = (state_11086[(7)]);
var state_11086__$1 = state_11086;
var statearr_11089_11148 = state_11086__$1;
(statearr_11089_11148[(2)] = inst_11013);

(statearr_11089_11148[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (27))){
var state_11086__$1 = state_11086;
var statearr_11090_11149 = state_11086__$1;
(statearr_11090_11149[(2)] = null);

(statearr_11090_11149[(1)] = (28));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (1))){
var inst_10988 = (state_11086[(8)]);
var inst_10988__$1 = calc_state.call(null);
var inst_10990 = (inst_10988__$1 == null);
var inst_10991 = cljs.core.not.call(null,inst_10990);
var state_11086__$1 = (function (){var statearr_11091 = state_11086;
(statearr_11091[(8)] = inst_10988__$1);

return statearr_11091;
})();
if(inst_10991){
var statearr_11092_11150 = state_11086__$1;
(statearr_11092_11150[(1)] = (2));

} else {
var statearr_11093_11151 = state_11086__$1;
(statearr_11093_11151[(1)] = (3));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (24))){
var inst_11046 = (state_11086[(9)]);
var inst_11060 = (state_11086[(10)]);
var inst_11037 = (state_11086[(11)]);
var inst_11060__$1 = inst_11037.call(null,inst_11046);
var state_11086__$1 = (function (){var statearr_11094 = state_11086;
(statearr_11094[(10)] = inst_11060__$1);

return statearr_11094;
})();
if(cljs.core.truth_(inst_11060__$1)){
var statearr_11095_11152 = state_11086__$1;
(statearr_11095_11152[(1)] = (29));

} else {
var statearr_11096_11153 = state_11086__$1;
(statearr_11096_11153[(1)] = (30));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (4))){
var inst_11004 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_11004)){
var statearr_11097_11154 = state_11086__$1;
(statearr_11097_11154[(1)] = (8));

} else {
var statearr_11098_11155 = state_11086__$1;
(statearr_11098_11155[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (15))){
var inst_11031 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_11031)){
var statearr_11099_11156 = state_11086__$1;
(statearr_11099_11156[(1)] = (19));

} else {
var statearr_11100_11157 = state_11086__$1;
(statearr_11100_11157[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (21))){
var inst_11036 = (state_11086[(12)]);
var inst_11036__$1 = (state_11086[(2)]);
var inst_11037 = cljs.core.get.call(null,inst_11036__$1,new cljs.core.Keyword(null,"solos","solos",1441458643));
var inst_11038 = cljs.core.get.call(null,inst_11036__$1,new cljs.core.Keyword(null,"mutes","mutes",1068806309));
var inst_11039 = cljs.core.get.call(null,inst_11036__$1,new cljs.core.Keyword(null,"reads","reads",-1215067361));
var state_11086__$1 = (function (){var statearr_11101 = state_11086;
(statearr_11101[(11)] = inst_11037);

(statearr_11101[(13)] = inst_11038);

(statearr_11101[(12)] = inst_11036__$1);

return statearr_11101;
})();
return cljs.core.async.ioc_alts_BANG_.call(null,state_11086__$1,(22),inst_11039);
} else {
if((state_val_11087 === (31))){
var inst_11068 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_11068)){
var statearr_11102_11158 = state_11086__$1;
(statearr_11102_11158[(1)] = (32));

} else {
var statearr_11103_11159 = state_11086__$1;
(statearr_11103_11159[(1)] = (33));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (32))){
var inst_11045 = (state_11086[(14)]);
var state_11086__$1 = state_11086;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11086__$1,(35),out,inst_11045);
} else {
if((state_val_11087 === (33))){
var inst_11036 = (state_11086[(12)]);
var inst_11013 = inst_11036;
var state_11086__$1 = (function (){var statearr_11104 = state_11086;
(statearr_11104[(7)] = inst_11013);

return statearr_11104;
})();
var statearr_11105_11160 = state_11086__$1;
(statearr_11105_11160[(2)] = null);

(statearr_11105_11160[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (13))){
var inst_11013 = (state_11086[(7)]);
var inst_11020 = inst_11013.cljs$lang$protocol_mask$partition0$;
var inst_11021 = (inst_11020 & (64));
var inst_11022 = inst_11013.cljs$core$ISeq$;
var inst_11023 = (cljs.core.PROTOCOL_SENTINEL === inst_11022);
var inst_11024 = ((inst_11021) || (inst_11023));
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_11024)){
var statearr_11106_11161 = state_11086__$1;
(statearr_11106_11161[(1)] = (16));

} else {
var statearr_11107_11162 = state_11086__$1;
(statearr_11107_11162[(1)] = (17));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (22))){
var inst_11045 = (state_11086[(14)]);
var inst_11046 = (state_11086[(9)]);
var inst_11044 = (state_11086[(2)]);
var inst_11045__$1 = cljs.core.nth.call(null,inst_11044,(0),null);
var inst_11046__$1 = cljs.core.nth.call(null,inst_11044,(1),null);
var inst_11047 = (inst_11045__$1 == null);
var inst_11048 = cljs.core._EQ_.call(null,inst_11046__$1,change);
var inst_11049 = ((inst_11047) || (inst_11048));
var state_11086__$1 = (function (){var statearr_11108 = state_11086;
(statearr_11108[(14)] = inst_11045__$1);

(statearr_11108[(9)] = inst_11046__$1);

return statearr_11108;
})();
if(cljs.core.truth_(inst_11049)){
var statearr_11109_11163 = state_11086__$1;
(statearr_11109_11163[(1)] = (23));

} else {
var statearr_11110_11164 = state_11086__$1;
(statearr_11110_11164[(1)] = (24));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (36))){
var inst_11036 = (state_11086[(12)]);
var inst_11013 = inst_11036;
var state_11086__$1 = (function (){var statearr_11111 = state_11086;
(statearr_11111[(7)] = inst_11013);

return statearr_11111;
})();
var statearr_11112_11165 = state_11086__$1;
(statearr_11112_11165[(2)] = null);

(statearr_11112_11165[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (29))){
var inst_11060 = (state_11086[(10)]);
var state_11086__$1 = state_11086;
var statearr_11113_11166 = state_11086__$1;
(statearr_11113_11166[(2)] = inst_11060);

(statearr_11113_11166[(1)] = (31));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (6))){
var state_11086__$1 = state_11086;
var statearr_11114_11167 = state_11086__$1;
(statearr_11114_11167[(2)] = false);

(statearr_11114_11167[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (28))){
var inst_11056 = (state_11086[(2)]);
var inst_11057 = calc_state.call(null);
var inst_11013 = inst_11057;
var state_11086__$1 = (function (){var statearr_11115 = state_11086;
(statearr_11115[(7)] = inst_11013);

(statearr_11115[(15)] = inst_11056);

return statearr_11115;
})();
var statearr_11116_11168 = state_11086__$1;
(statearr_11116_11168[(2)] = null);

(statearr_11116_11168[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (25))){
var inst_11082 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
var statearr_11117_11169 = state_11086__$1;
(statearr_11117_11169[(2)] = inst_11082);

(statearr_11117_11169[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (34))){
var inst_11080 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
var statearr_11118_11170 = state_11086__$1;
(statearr_11118_11170[(2)] = inst_11080);

(statearr_11118_11170[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (17))){
var state_11086__$1 = state_11086;
var statearr_11119_11171 = state_11086__$1;
(statearr_11119_11171[(2)] = false);

(statearr_11119_11171[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (3))){
var state_11086__$1 = state_11086;
var statearr_11120_11172 = state_11086__$1;
(statearr_11120_11172[(2)] = false);

(statearr_11120_11172[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (12))){
var inst_11084 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11086__$1,inst_11084);
} else {
if((state_val_11087 === (2))){
var inst_10988 = (state_11086[(8)]);
var inst_10993 = inst_10988.cljs$lang$protocol_mask$partition0$;
var inst_10994 = (inst_10993 & (64));
var inst_10995 = inst_10988.cljs$core$ISeq$;
var inst_10996 = (cljs.core.PROTOCOL_SENTINEL === inst_10995);
var inst_10997 = ((inst_10994) || (inst_10996));
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_10997)){
var statearr_11121_11173 = state_11086__$1;
(statearr_11121_11173[(1)] = (5));

} else {
var statearr_11122_11174 = state_11086__$1;
(statearr_11122_11174[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (23))){
var inst_11045 = (state_11086[(14)]);
var inst_11051 = (inst_11045 == null);
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_11051)){
var statearr_11123_11175 = state_11086__$1;
(statearr_11123_11175[(1)] = (26));

} else {
var statearr_11124_11176 = state_11086__$1;
(statearr_11124_11176[(1)] = (27));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (35))){
var inst_11071 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
if(cljs.core.truth_(inst_11071)){
var statearr_11125_11177 = state_11086__$1;
(statearr_11125_11177[(1)] = (36));

} else {
var statearr_11126_11178 = state_11086__$1;
(statearr_11126_11178[(1)] = (37));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (19))){
var inst_11013 = (state_11086[(7)]);
var inst_11033 = cljs.core.apply.call(null,cljs.core.hash_map,inst_11013);
var state_11086__$1 = state_11086;
var statearr_11127_11179 = state_11086__$1;
(statearr_11127_11179[(2)] = inst_11033);

(statearr_11127_11179[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (11))){
var inst_11013 = (state_11086[(7)]);
var inst_11017 = (inst_11013 == null);
var inst_11018 = cljs.core.not.call(null,inst_11017);
var state_11086__$1 = state_11086;
if(inst_11018){
var statearr_11128_11180 = state_11086__$1;
(statearr_11128_11180[(1)] = (13));

} else {
var statearr_11129_11181 = state_11086__$1;
(statearr_11129_11181[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (9))){
var inst_10988 = (state_11086[(8)]);
var state_11086__$1 = state_11086;
var statearr_11130_11182 = state_11086__$1;
(statearr_11130_11182[(2)] = inst_10988);

(statearr_11130_11182[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (5))){
var state_11086__$1 = state_11086;
var statearr_11131_11183 = state_11086__$1;
(statearr_11131_11183[(2)] = true);

(statearr_11131_11183[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (14))){
var state_11086__$1 = state_11086;
var statearr_11132_11184 = state_11086__$1;
(statearr_11132_11184[(2)] = false);

(statearr_11132_11184[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (26))){
var inst_11046 = (state_11086[(9)]);
var inst_11053 = cljs.core.swap_BANG_.call(null,cs,cljs.core.dissoc,inst_11046);
var state_11086__$1 = state_11086;
var statearr_11133_11185 = state_11086__$1;
(statearr_11133_11185[(2)] = inst_11053);

(statearr_11133_11185[(1)] = (28));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (16))){
var state_11086__$1 = state_11086;
var statearr_11134_11186 = state_11086__$1;
(statearr_11134_11186[(2)] = true);

(statearr_11134_11186[(1)] = (18));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (38))){
var inst_11076 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
var statearr_11135_11187 = state_11086__$1;
(statearr_11135_11187[(2)] = inst_11076);

(statearr_11135_11187[(1)] = (34));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (30))){
var inst_11046 = (state_11086[(9)]);
var inst_11037 = (state_11086[(11)]);
var inst_11038 = (state_11086[(13)]);
var inst_11063 = cljs.core.empty_QMARK_.call(null,inst_11037);
var inst_11064 = inst_11038.call(null,inst_11046);
var inst_11065 = cljs.core.not.call(null,inst_11064);
var inst_11066 = ((inst_11063) && (inst_11065));
var state_11086__$1 = state_11086;
var statearr_11136_11188 = state_11086__$1;
(statearr_11136_11188[(2)] = inst_11066);

(statearr_11136_11188[(1)] = (31));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (10))){
var inst_10988 = (state_11086[(8)]);
var inst_11009 = (state_11086[(2)]);
var inst_11010 = cljs.core.get.call(null,inst_11009,new cljs.core.Keyword(null,"solos","solos",1441458643));
var inst_11011 = cljs.core.get.call(null,inst_11009,new cljs.core.Keyword(null,"mutes","mutes",1068806309));
var inst_11012 = cljs.core.get.call(null,inst_11009,new cljs.core.Keyword(null,"reads","reads",-1215067361));
var inst_11013 = inst_10988;
var state_11086__$1 = (function (){var statearr_11137 = state_11086;
(statearr_11137[(16)] = inst_11010);

(statearr_11137[(17)] = inst_11012);

(statearr_11137[(7)] = inst_11013);

(statearr_11137[(18)] = inst_11011);

return statearr_11137;
})();
var statearr_11138_11189 = state_11086__$1;
(statearr_11138_11189[(2)] = null);

(statearr_11138_11189[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (18))){
var inst_11028 = (state_11086[(2)]);
var state_11086__$1 = state_11086;
var statearr_11139_11190 = state_11086__$1;
(statearr_11139_11190[(2)] = inst_11028);

(statearr_11139_11190[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (37))){
var state_11086__$1 = state_11086;
var statearr_11140_11191 = state_11086__$1;
(statearr_11140_11191[(2)] = null);

(statearr_11140_11191[(1)] = (38));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11087 === (8))){
var inst_10988 = (state_11086[(8)]);
var inst_11006 = cljs.core.apply.call(null,cljs.core.hash_map,inst_10988);
var state_11086__$1 = state_11086;
var statearr_11141_11192 = state_11086__$1;
(statearr_11141_11192[(2)] = inst_11006);

(statearr_11141_11192[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$mix_$_state_machine__9858__auto__ = null;
var cljs$core$async$mix_$_state_machine__9858__auto____0 = (function (){
var statearr_11142 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11142[(0)] = cljs$core$async$mix_$_state_machine__9858__auto__);

(statearr_11142[(1)] = (1));

return statearr_11142;
});
var cljs$core$async$mix_$_state_machine__9858__auto____1 = (function (state_11086){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11086);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11143){if((e11143 instanceof Object)){
var ex__9861__auto__ = e11143;
var statearr_11144_11193 = state_11086;
(statearr_11144_11193[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11086);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11143;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11194 = state_11086;
state_11086 = G__11194;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$mix_$_state_machine__9858__auto__ = function(state_11086){
switch(arguments.length){
case 0:
return cljs$core$async$mix_$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$mix_$_state_machine__9858__auto____1.call(this,state_11086);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$mix_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mix_$_state_machine__9858__auto____0;
cljs$core$async$mix_$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mix_$_state_machine__9858__auto____1;
return cljs$core$async$mix_$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11145 = f__9875__auto__.call(null);
(statearr_11145[(6)] = c__9874__auto___11146);

return statearr_11145;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return m;
});
/**
 * Adds ch as an input to the mix
 */
cljs.core.async.admix = (function cljs$core$async$admix(mix,ch){
return cljs.core.async.admix_STAR_.call(null,mix,ch);
});
/**
 * Removes ch as an input to the mix
 */
cljs.core.async.unmix = (function cljs$core$async$unmix(mix,ch){
return cljs.core.async.unmix_STAR_.call(null,mix,ch);
});
/**
 * removes all inputs from the mix
 */
cljs.core.async.unmix_all = (function cljs$core$async$unmix_all(mix){
return cljs.core.async.unmix_all_STAR_.call(null,mix);
});
/**
 * Atomically sets the state(s) of one or more channels in a mix. The
 *   state map is a map of channels -> channel-state-map. A
 *   channel-state-map is a map of attrs -> boolean, where attr is one or
 *   more of :mute, :pause or :solo. Any states supplied are merged with
 *   the current state.
 * 
 *   Note that channels can be added to a mix via toggle, which can be
 *   used to add channels in a particular (e.g. paused) state.
 */
cljs.core.async.toggle = (function cljs$core$async$toggle(mix,state_map){
return cljs.core.async.toggle_STAR_.call(null,mix,state_map);
});
/**
 * Sets the solo mode of the mix. mode must be one of :mute or :pause
 */
cljs.core.async.solo_mode = (function cljs$core$async$solo_mode(mix,mode){
return cljs.core.async.solo_mode_STAR_.call(null,mix,mode);
});

/**
 * @interface
 */
cljs.core.async.Pub = function(){};

cljs.core.async.sub_STAR_ = (function cljs$core$async$sub_STAR_(p,v,ch,close_QMARK_){
if((((!((p == null)))) && ((!((p.cljs$core$async$Pub$sub_STAR_$arity$4 == null)))))){
return p.cljs$core$async$Pub$sub_STAR_$arity$4(p,v,ch,close_QMARK_);
} else {
var x__4487__auto__ = (((p == null))?null:p);
var m__4488__auto__ = (cljs.core.async.sub_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,p,v,ch,close_QMARK_);
} else {
var m__4485__auto__ = (cljs.core.async.sub_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,p,v,ch,close_QMARK_);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.sub*",p);
}
}
}
});

cljs.core.async.unsub_STAR_ = (function cljs$core$async$unsub_STAR_(p,v,ch){
if((((!((p == null)))) && ((!((p.cljs$core$async$Pub$unsub_STAR_$arity$3 == null)))))){
return p.cljs$core$async$Pub$unsub_STAR_$arity$3(p,v,ch);
} else {
var x__4487__auto__ = (((p == null))?null:p);
var m__4488__auto__ = (cljs.core.async.unsub_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,p,v,ch);
} else {
var m__4485__auto__ = (cljs.core.async.unsub_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,p,v,ch);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.unsub*",p);
}
}
}
});

cljs.core.async.unsub_all_STAR_ = (function cljs$core$async$unsub_all_STAR_(var_args){
var G__11196 = arguments.length;
switch (G__11196) {
case 1:
return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (p){
if((((!((p == null)))) && ((!((p.cljs$core$async$Pub$unsub_all_STAR_$arity$1 == null)))))){
return p.cljs$core$async$Pub$unsub_all_STAR_$arity$1(p);
} else {
var x__4487__auto__ = (((p == null))?null:p);
var m__4488__auto__ = (cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,p);
} else {
var m__4485__auto__ = (cljs.core.async.unsub_all_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,p);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.unsub-all*",p);
}
}
}
}));

(cljs.core.async.unsub_all_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (p,v){
if((((!((p == null)))) && ((!((p.cljs$core$async$Pub$unsub_all_STAR_$arity$2 == null)))))){
return p.cljs$core$async$Pub$unsub_all_STAR_$arity$2(p,v);
} else {
var x__4487__auto__ = (((p == null))?null:p);
var m__4488__auto__ = (cljs.core.async.unsub_all_STAR_[goog.typeOf(x__4487__auto__)]);
if((!((m__4488__auto__ == null)))){
return m__4488__auto__.call(null,p,v);
} else {
var m__4485__auto__ = (cljs.core.async.unsub_all_STAR_["_"]);
if((!((m__4485__auto__ == null)))){
return m__4485__auto__.call(null,p,v);
} else {
throw cljs.core.missing_protocol.call(null,"Pub.unsub-all*",p);
}
}
}
}));

(cljs.core.async.unsub_all_STAR_.cljs$lang$maxFixedArity = 2);


/**
 * Creates and returns a pub(lication) of the supplied channel,
 *   partitioned into topics by the topic-fn. topic-fn will be applied to
 *   each value on the channel and the result will determine the 'topic'
 *   on which that value will be put. Channels can be subscribed to
 *   receive copies of topics using 'sub', and unsubscribed using
 *   'unsub'. Each topic will be handled by an internal mult on a
 *   dedicated channel. By default these internal channels are
 *   unbuffered, but a buf-fn can be supplied which, given a topic,
 *   creates a buffer with desired properties.
 * 
 *   Each item is distributed to all subs in parallel and synchronously,
 *   i.e. each sub must accept before the next item is distributed. Use
 *   buffering/windowing to prevent slow subs from holding up the pub.
 * 
 *   Items received when there are no matching subs get dropped.
 * 
 *   Note that if buf-fns are used then each topic is handled
 *   asynchronously, i.e. if a channel is subscribed to more than one
 *   topic it should not expect them to be interleaved identically with
 *   the source.
 */
cljs.core.async.pub = (function cljs$core$async$pub(var_args){
var G__11200 = arguments.length;
switch (G__11200) {
case 2:
return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.pub.cljs$core$IFn$_invoke$arity$2 = (function (ch,topic_fn){
return cljs.core.async.pub.call(null,ch,topic_fn,cljs.core.constantly.call(null,null));
}));

(cljs.core.async.pub.cljs$core$IFn$_invoke$arity$3 = (function (ch,topic_fn,buf_fn){
var mults = cljs.core.atom.call(null,cljs.core.PersistentArrayMap.EMPTY);
var ensure_mult = (function (topic){
var or__4185__auto__ = cljs.core.get.call(null,cljs.core.deref.call(null,mults),topic);
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return cljs.core.get.call(null,cljs.core.swap_BANG_.call(null,mults,(function (p1__11198_SHARP_){
if(cljs.core.truth_(p1__11198_SHARP_.call(null,topic))){
return p1__11198_SHARP_;
} else {
return cljs.core.assoc.call(null,p1__11198_SHARP_,topic,cljs.core.async.mult.call(null,cljs.core.async.chan.call(null,buf_fn.call(null,topic))));
}
})),topic);
}
});
var p = (function (){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async11201 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.Pub}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.async.Mux}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async11201 = (function (ch,topic_fn,buf_fn,mults,ensure_mult,meta11202){
this.ch = ch;
this.topic_fn = topic_fn;
this.buf_fn = buf_fn;
this.mults = mults;
this.ensure_mult = ensure_mult;
this.meta11202 = meta11202;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_11203,meta11202__$1){
var self__ = this;
var _11203__$1 = this;
return (new cljs.core.async.t_cljs$core$async11201(self__.ch,self__.topic_fn,self__.buf_fn,self__.mults,self__.ensure_mult,meta11202__$1));
}));

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_11203){
var self__ = this;
var _11203__$1 = this;
return self__.meta11202;
}));

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Mux$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Mux$muxch_STAR_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return self__.ch;
}));

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Pub$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Pub$sub_STAR_$arity$4 = (function (p,topic,ch__$1,close_QMARK_){
var self__ = this;
var p__$1 = this;
var m = self__.ensure_mult.call(null,topic);
return cljs.core.async.tap.call(null,m,ch__$1,close_QMARK_);
}));

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Pub$unsub_STAR_$arity$3 = (function (p,topic,ch__$1){
var self__ = this;
var p__$1 = this;
var temp__5735__auto__ = cljs.core.get.call(null,cljs.core.deref.call(null,self__.mults),topic);
if(cljs.core.truth_(temp__5735__auto__)){
var m = temp__5735__auto__;
return cljs.core.async.untap.call(null,m,ch__$1);
} else {
return null;
}
}));

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.reset_BANG_.call(null,self__.mults,cljs.core.PersistentArrayMap.EMPTY);
}));

(cljs.core.async.t_cljs$core$async11201.prototype.cljs$core$async$Pub$unsub_all_STAR_$arity$2 = (function (_,topic){
var self__ = this;
var ___$1 = this;
return cljs.core.swap_BANG_.call(null,self__.mults,cljs.core.dissoc,topic);
}));

(cljs.core.async.t_cljs$core$async11201.getBasis = (function (){
return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"topic-fn","topic-fn",-862449736,null),new cljs.core.Symbol(null,"buf-fn","buf-fn",-1200281591,null),new cljs.core.Symbol(null,"mults","mults",-461114485,null),new cljs.core.Symbol(null,"ensure-mult","ensure-mult",1796584816,null),new cljs.core.Symbol(null,"meta11202","meta11202",-1714189472,null)], null);
}));

(cljs.core.async.t_cljs$core$async11201.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async11201.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11201");

(cljs.core.async.t_cljs$core$async11201.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async11201");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async11201.
 */
cljs.core.async.__GT_t_cljs$core$async11201 = (function cljs$core$async$__GT_t_cljs$core$async11201(ch__$1,topic_fn__$1,buf_fn__$1,mults__$1,ensure_mult__$1,meta11202){
return (new cljs.core.async.t_cljs$core$async11201(ch__$1,topic_fn__$1,buf_fn__$1,mults__$1,ensure_mult__$1,meta11202));
});

}

return (new cljs.core.async.t_cljs$core$async11201(ch,topic_fn,buf_fn,mults,ensure_mult,cljs.core.PersistentArrayMap.EMPTY));
})()
;
var c__9874__auto___11321 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11275){
var state_val_11276 = (state_11275[(1)]);
if((state_val_11276 === (7))){
var inst_11271 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
var statearr_11277_11322 = state_11275__$1;
(statearr_11277_11322[(2)] = inst_11271);

(statearr_11277_11322[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (20))){
var state_11275__$1 = state_11275;
var statearr_11278_11323 = state_11275__$1;
(statearr_11278_11323[(2)] = null);

(statearr_11278_11323[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (1))){
var state_11275__$1 = state_11275;
var statearr_11279_11324 = state_11275__$1;
(statearr_11279_11324[(2)] = null);

(statearr_11279_11324[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (24))){
var inst_11254 = (state_11275[(7)]);
var inst_11263 = cljs.core.swap_BANG_.call(null,mults,cljs.core.dissoc,inst_11254);
var state_11275__$1 = state_11275;
var statearr_11280_11325 = state_11275__$1;
(statearr_11280_11325[(2)] = inst_11263);

(statearr_11280_11325[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (4))){
var inst_11206 = (state_11275[(8)]);
var inst_11206__$1 = (state_11275[(2)]);
var inst_11207 = (inst_11206__$1 == null);
var state_11275__$1 = (function (){var statearr_11281 = state_11275;
(statearr_11281[(8)] = inst_11206__$1);

return statearr_11281;
})();
if(cljs.core.truth_(inst_11207)){
var statearr_11282_11326 = state_11275__$1;
(statearr_11282_11326[(1)] = (5));

} else {
var statearr_11283_11327 = state_11275__$1;
(statearr_11283_11327[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (15))){
var inst_11248 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
var statearr_11284_11328 = state_11275__$1;
(statearr_11284_11328[(2)] = inst_11248);

(statearr_11284_11328[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (21))){
var inst_11268 = (state_11275[(2)]);
var state_11275__$1 = (function (){var statearr_11285 = state_11275;
(statearr_11285[(9)] = inst_11268);

return statearr_11285;
})();
var statearr_11286_11329 = state_11275__$1;
(statearr_11286_11329[(2)] = null);

(statearr_11286_11329[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (13))){
var inst_11230 = (state_11275[(10)]);
var inst_11232 = cljs.core.chunked_seq_QMARK_.call(null,inst_11230);
var state_11275__$1 = state_11275;
if(inst_11232){
var statearr_11287_11330 = state_11275__$1;
(statearr_11287_11330[(1)] = (16));

} else {
var statearr_11288_11331 = state_11275__$1;
(statearr_11288_11331[(1)] = (17));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (22))){
var inst_11260 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
if(cljs.core.truth_(inst_11260)){
var statearr_11289_11332 = state_11275__$1;
(statearr_11289_11332[(1)] = (23));

} else {
var statearr_11290_11333 = state_11275__$1;
(statearr_11290_11333[(1)] = (24));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (6))){
var inst_11256 = (state_11275[(11)]);
var inst_11206 = (state_11275[(8)]);
var inst_11254 = (state_11275[(7)]);
var inst_11254__$1 = topic_fn.call(null,inst_11206);
var inst_11255 = cljs.core.deref.call(null,mults);
var inst_11256__$1 = cljs.core.get.call(null,inst_11255,inst_11254__$1);
var state_11275__$1 = (function (){var statearr_11291 = state_11275;
(statearr_11291[(11)] = inst_11256__$1);

(statearr_11291[(7)] = inst_11254__$1);

return statearr_11291;
})();
if(cljs.core.truth_(inst_11256__$1)){
var statearr_11292_11334 = state_11275__$1;
(statearr_11292_11334[(1)] = (19));

} else {
var statearr_11293_11335 = state_11275__$1;
(statearr_11293_11335[(1)] = (20));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (25))){
var inst_11265 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
var statearr_11294_11336 = state_11275__$1;
(statearr_11294_11336[(2)] = inst_11265);

(statearr_11294_11336[(1)] = (21));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (17))){
var inst_11230 = (state_11275[(10)]);
var inst_11239 = cljs.core.first.call(null,inst_11230);
var inst_11240 = cljs.core.async.muxch_STAR_.call(null,inst_11239);
var inst_11241 = cljs.core.async.close_BANG_.call(null,inst_11240);
var inst_11242 = cljs.core.next.call(null,inst_11230);
var inst_11216 = inst_11242;
var inst_11217 = null;
var inst_11218 = (0);
var inst_11219 = (0);
var state_11275__$1 = (function (){var statearr_11295 = state_11275;
(statearr_11295[(12)] = inst_11217);

(statearr_11295[(13)] = inst_11241);

(statearr_11295[(14)] = inst_11219);

(statearr_11295[(15)] = inst_11218);

(statearr_11295[(16)] = inst_11216);

return statearr_11295;
})();
var statearr_11296_11337 = state_11275__$1;
(statearr_11296_11337[(2)] = null);

(statearr_11296_11337[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (3))){
var inst_11273 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11275__$1,inst_11273);
} else {
if((state_val_11276 === (12))){
var inst_11250 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
var statearr_11297_11338 = state_11275__$1;
(statearr_11297_11338[(2)] = inst_11250);

(statearr_11297_11338[(1)] = (9));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (2))){
var state_11275__$1 = state_11275;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11275__$1,(4),ch);
} else {
if((state_val_11276 === (23))){
var state_11275__$1 = state_11275;
var statearr_11298_11339 = state_11275__$1;
(statearr_11298_11339[(2)] = null);

(statearr_11298_11339[(1)] = (25));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (19))){
var inst_11256 = (state_11275[(11)]);
var inst_11206 = (state_11275[(8)]);
var inst_11258 = cljs.core.async.muxch_STAR_.call(null,inst_11256);
var state_11275__$1 = state_11275;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11275__$1,(22),inst_11258,inst_11206);
} else {
if((state_val_11276 === (11))){
var inst_11230 = (state_11275[(10)]);
var inst_11216 = (state_11275[(16)]);
var inst_11230__$1 = cljs.core.seq.call(null,inst_11216);
var state_11275__$1 = (function (){var statearr_11299 = state_11275;
(statearr_11299[(10)] = inst_11230__$1);

return statearr_11299;
})();
if(inst_11230__$1){
var statearr_11300_11340 = state_11275__$1;
(statearr_11300_11340[(1)] = (13));

} else {
var statearr_11301_11341 = state_11275__$1;
(statearr_11301_11341[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (9))){
var inst_11252 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
var statearr_11302_11342 = state_11275__$1;
(statearr_11302_11342[(2)] = inst_11252);

(statearr_11302_11342[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (5))){
var inst_11213 = cljs.core.deref.call(null,mults);
var inst_11214 = cljs.core.vals.call(null,inst_11213);
var inst_11215 = cljs.core.seq.call(null,inst_11214);
var inst_11216 = inst_11215;
var inst_11217 = null;
var inst_11218 = (0);
var inst_11219 = (0);
var state_11275__$1 = (function (){var statearr_11303 = state_11275;
(statearr_11303[(12)] = inst_11217);

(statearr_11303[(14)] = inst_11219);

(statearr_11303[(15)] = inst_11218);

(statearr_11303[(16)] = inst_11216);

return statearr_11303;
})();
var statearr_11304_11343 = state_11275__$1;
(statearr_11304_11343[(2)] = null);

(statearr_11304_11343[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (14))){
var state_11275__$1 = state_11275;
var statearr_11308_11344 = state_11275__$1;
(statearr_11308_11344[(2)] = null);

(statearr_11308_11344[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (16))){
var inst_11230 = (state_11275[(10)]);
var inst_11234 = cljs.core.chunk_first.call(null,inst_11230);
var inst_11235 = cljs.core.chunk_rest.call(null,inst_11230);
var inst_11236 = cljs.core.count.call(null,inst_11234);
var inst_11216 = inst_11235;
var inst_11217 = inst_11234;
var inst_11218 = inst_11236;
var inst_11219 = (0);
var state_11275__$1 = (function (){var statearr_11309 = state_11275;
(statearr_11309[(12)] = inst_11217);

(statearr_11309[(14)] = inst_11219);

(statearr_11309[(15)] = inst_11218);

(statearr_11309[(16)] = inst_11216);

return statearr_11309;
})();
var statearr_11310_11345 = state_11275__$1;
(statearr_11310_11345[(2)] = null);

(statearr_11310_11345[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (10))){
var inst_11217 = (state_11275[(12)]);
var inst_11219 = (state_11275[(14)]);
var inst_11218 = (state_11275[(15)]);
var inst_11216 = (state_11275[(16)]);
var inst_11224 = cljs.core._nth.call(null,inst_11217,inst_11219);
var inst_11225 = cljs.core.async.muxch_STAR_.call(null,inst_11224);
var inst_11226 = cljs.core.async.close_BANG_.call(null,inst_11225);
var inst_11227 = (inst_11219 + (1));
var tmp11305 = inst_11217;
var tmp11306 = inst_11218;
var tmp11307 = inst_11216;
var inst_11216__$1 = tmp11307;
var inst_11217__$1 = tmp11305;
var inst_11218__$1 = tmp11306;
var inst_11219__$1 = inst_11227;
var state_11275__$1 = (function (){var statearr_11311 = state_11275;
(statearr_11311[(12)] = inst_11217__$1);

(statearr_11311[(17)] = inst_11226);

(statearr_11311[(14)] = inst_11219__$1);

(statearr_11311[(15)] = inst_11218__$1);

(statearr_11311[(16)] = inst_11216__$1);

return statearr_11311;
})();
var statearr_11312_11346 = state_11275__$1;
(statearr_11312_11346[(2)] = null);

(statearr_11312_11346[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (18))){
var inst_11245 = (state_11275[(2)]);
var state_11275__$1 = state_11275;
var statearr_11313_11347 = state_11275__$1;
(statearr_11313_11347[(2)] = inst_11245);

(statearr_11313_11347[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11276 === (8))){
var inst_11219 = (state_11275[(14)]);
var inst_11218 = (state_11275[(15)]);
var inst_11221 = (inst_11219 < inst_11218);
var inst_11222 = inst_11221;
var state_11275__$1 = state_11275;
if(cljs.core.truth_(inst_11222)){
var statearr_11314_11348 = state_11275__$1;
(statearr_11314_11348[(1)] = (10));

} else {
var statearr_11315_11349 = state_11275__$1;
(statearr_11315_11349[(1)] = (11));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11316 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11316[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11316[(1)] = (1));

return statearr_11316;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11275){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11275);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11317){if((e11317 instanceof Object)){
var ex__9861__auto__ = e11317;
var statearr_11318_11350 = state_11275;
(statearr_11318_11350[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11275);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11317;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11351 = state_11275;
state_11275 = G__11351;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11275){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11275);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11319 = f__9875__auto__.call(null);
(statearr_11319[(6)] = c__9874__auto___11321);

return statearr_11319;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return p;
}));

(cljs.core.async.pub.cljs$lang$maxFixedArity = 3);

/**
 * Subscribes a channel to a topic of a pub.
 * 
 *   By default the channel will be closed when the source closes,
 *   but can be determined by the close? parameter.
 */
cljs.core.async.sub = (function cljs$core$async$sub(var_args){
var G__11353 = arguments.length;
switch (G__11353) {
case 3:
return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.sub.cljs$core$IFn$_invoke$arity$3 = (function (p,topic,ch){
return cljs.core.async.sub.call(null,p,topic,ch,true);
}));

(cljs.core.async.sub.cljs$core$IFn$_invoke$arity$4 = (function (p,topic,ch,close_QMARK_){
return cljs.core.async.sub_STAR_.call(null,p,topic,ch,close_QMARK_);
}));

(cljs.core.async.sub.cljs$lang$maxFixedArity = 4);

/**
 * Unsubscribes a channel from a topic of a pub
 */
cljs.core.async.unsub = (function cljs$core$async$unsub(p,topic,ch){
return cljs.core.async.unsub_STAR_.call(null,p,topic,ch);
});
/**
 * Unsubscribes all channels from a pub, or a topic of a pub
 */
cljs.core.async.unsub_all = (function cljs$core$async$unsub_all(var_args){
var G__11356 = arguments.length;
switch (G__11356) {
case 1:
return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$1 = (function (p){
return cljs.core.async.unsub_all_STAR_.call(null,p);
}));

(cljs.core.async.unsub_all.cljs$core$IFn$_invoke$arity$2 = (function (p,topic){
return cljs.core.async.unsub_all_STAR_.call(null,p,topic);
}));

(cljs.core.async.unsub_all.cljs$lang$maxFixedArity = 2);

/**
 * Takes a function and a collection of source channels, and returns a
 *   channel which contains the values produced by applying f to the set
 *   of first items taken from each source channel, followed by applying
 *   f to the set of second items from each channel, until any one of the
 *   channels is closed, at which point the output channel will be
 *   closed. The returned channel will be unbuffered by default, or a
 *   buf-or-n can be supplied
 */
cljs.core.async.map = (function cljs$core$async$map(var_args){
var G__11359 = arguments.length;
switch (G__11359) {
case 2:
return cljs.core.async.map.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.map.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.map.cljs$core$IFn$_invoke$arity$2 = (function (f,chs){
return cljs.core.async.map.call(null,f,chs,null);
}));

(cljs.core.async.map.cljs$core$IFn$_invoke$arity$3 = (function (f,chs,buf_or_n){
var chs__$1 = cljs.core.vec.call(null,chs);
var out = cljs.core.async.chan.call(null,buf_or_n);
var cnt = cljs.core.count.call(null,chs__$1);
var rets = cljs.core.object_array.call(null,cnt);
var dchan = cljs.core.async.chan.call(null,(1));
var dctr = cljs.core.atom.call(null,null);
var done = cljs.core.mapv.call(null,(function (i){
return (function (ret){
(rets[i] = ret);

if((cljs.core.swap_BANG_.call(null,dctr,cljs.core.dec) === (0))){
return cljs.core.async.put_BANG_.call(null,dchan,rets.slice((0)));
} else {
return null;
}
});
}),cljs.core.range.call(null,cnt));
var c__9874__auto___11426 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11398){
var state_val_11399 = (state_11398[(1)]);
if((state_val_11399 === (7))){
var state_11398__$1 = state_11398;
var statearr_11400_11427 = state_11398__$1;
(statearr_11400_11427[(2)] = null);

(statearr_11400_11427[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (1))){
var state_11398__$1 = state_11398;
var statearr_11401_11428 = state_11398__$1;
(statearr_11401_11428[(2)] = null);

(statearr_11401_11428[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (4))){
var inst_11362 = (state_11398[(7)]);
var inst_11364 = (inst_11362 < cnt);
var state_11398__$1 = state_11398;
if(cljs.core.truth_(inst_11364)){
var statearr_11402_11429 = state_11398__$1;
(statearr_11402_11429[(1)] = (6));

} else {
var statearr_11403_11430 = state_11398__$1;
(statearr_11403_11430[(1)] = (7));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (15))){
var inst_11394 = (state_11398[(2)]);
var state_11398__$1 = state_11398;
var statearr_11404_11431 = state_11398__$1;
(statearr_11404_11431[(2)] = inst_11394);

(statearr_11404_11431[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (13))){
var inst_11387 = cljs.core.async.close_BANG_.call(null,out);
var state_11398__$1 = state_11398;
var statearr_11405_11432 = state_11398__$1;
(statearr_11405_11432[(2)] = inst_11387);

(statearr_11405_11432[(1)] = (15));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (6))){
var state_11398__$1 = state_11398;
var statearr_11406_11433 = state_11398__$1;
(statearr_11406_11433[(2)] = null);

(statearr_11406_11433[(1)] = (11));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (3))){
var inst_11396 = (state_11398[(2)]);
var state_11398__$1 = state_11398;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11398__$1,inst_11396);
} else {
if((state_val_11399 === (12))){
var inst_11384 = (state_11398[(8)]);
var inst_11384__$1 = (state_11398[(2)]);
var inst_11385 = cljs.core.some.call(null,cljs.core.nil_QMARK_,inst_11384__$1);
var state_11398__$1 = (function (){var statearr_11407 = state_11398;
(statearr_11407[(8)] = inst_11384__$1);

return statearr_11407;
})();
if(cljs.core.truth_(inst_11385)){
var statearr_11408_11434 = state_11398__$1;
(statearr_11408_11434[(1)] = (13));

} else {
var statearr_11409_11435 = state_11398__$1;
(statearr_11409_11435[(1)] = (14));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (2))){
var inst_11361 = cljs.core.reset_BANG_.call(null,dctr,cnt);
var inst_11362 = (0);
var state_11398__$1 = (function (){var statearr_11410 = state_11398;
(statearr_11410[(9)] = inst_11361);

(statearr_11410[(7)] = inst_11362);

return statearr_11410;
})();
var statearr_11411_11436 = state_11398__$1;
(statearr_11411_11436[(2)] = null);

(statearr_11411_11436[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (11))){
var inst_11362 = (state_11398[(7)]);
var _ = cljs.core.async.impl.ioc_helpers.add_exception_frame.call(null,state_11398,(10),Object,null,(9));
var inst_11371 = chs__$1.call(null,inst_11362);
var inst_11372 = done.call(null,inst_11362);
var inst_11373 = cljs.core.async.take_BANG_.call(null,inst_11371,inst_11372);
var state_11398__$1 = state_11398;
var statearr_11412_11437 = state_11398__$1;
(statearr_11412_11437[(2)] = inst_11373);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11398__$1);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (9))){
var inst_11362 = (state_11398[(7)]);
var inst_11375 = (state_11398[(2)]);
var inst_11376 = (inst_11362 + (1));
var inst_11362__$1 = inst_11376;
var state_11398__$1 = (function (){var statearr_11413 = state_11398;
(statearr_11413[(7)] = inst_11362__$1);

(statearr_11413[(10)] = inst_11375);

return statearr_11413;
})();
var statearr_11414_11438 = state_11398__$1;
(statearr_11414_11438[(2)] = null);

(statearr_11414_11438[(1)] = (4));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (5))){
var inst_11382 = (state_11398[(2)]);
var state_11398__$1 = (function (){var statearr_11415 = state_11398;
(statearr_11415[(11)] = inst_11382);

return statearr_11415;
})();
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11398__$1,(12),dchan);
} else {
if((state_val_11399 === (14))){
var inst_11384 = (state_11398[(8)]);
var inst_11389 = cljs.core.apply.call(null,f,inst_11384);
var state_11398__$1 = state_11398;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11398__$1,(16),out,inst_11389);
} else {
if((state_val_11399 === (16))){
var inst_11391 = (state_11398[(2)]);
var state_11398__$1 = (function (){var statearr_11416 = state_11398;
(statearr_11416[(12)] = inst_11391);

return statearr_11416;
})();
var statearr_11417_11439 = state_11398__$1;
(statearr_11417_11439[(2)] = null);

(statearr_11417_11439[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (10))){
var inst_11366 = (state_11398[(2)]);
var inst_11367 = cljs.core.swap_BANG_.call(null,dctr,cljs.core.dec);
var state_11398__$1 = (function (){var statearr_11418 = state_11398;
(statearr_11418[(13)] = inst_11366);

return statearr_11418;
})();
var statearr_11419_11440 = state_11398__$1;
(statearr_11419_11440[(2)] = inst_11367);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11398__$1);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11399 === (8))){
var inst_11380 = (state_11398[(2)]);
var state_11398__$1 = state_11398;
var statearr_11420_11441 = state_11398__$1;
(statearr_11420_11441[(2)] = inst_11380);

(statearr_11420_11441[(1)] = (5));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11421 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11421[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11421[(1)] = (1));

return statearr_11421;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11398){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11398);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11422){if((e11422 instanceof Object)){
var ex__9861__auto__ = e11422;
var statearr_11423_11442 = state_11398;
(statearr_11423_11442[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11398);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11422;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11443 = state_11398;
state_11398 = G__11443;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11398){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11398);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11424 = f__9875__auto__.call(null);
(statearr_11424[(6)] = c__9874__auto___11426);

return statearr_11424;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.map.cljs$lang$maxFixedArity = 3);

/**
 * Takes a collection of source channels and returns a channel which
 *   contains all values taken from them. The returned channel will be
 *   unbuffered by default, or a buf-or-n can be supplied. The channel
 *   will close after all the source channels have closed.
 */
cljs.core.async.merge = (function cljs$core$async$merge(var_args){
var G__11446 = arguments.length;
switch (G__11446) {
case 1:
return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.merge.cljs$core$IFn$_invoke$arity$1 = (function (chs){
return cljs.core.async.merge.call(null,chs,null);
}));

(cljs.core.async.merge.cljs$core$IFn$_invoke$arity$2 = (function (chs,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__9874__auto___11500 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11478){
var state_val_11479 = (state_11478[(1)]);
if((state_val_11479 === (7))){
var inst_11458 = (state_11478[(7)]);
var inst_11457 = (state_11478[(8)]);
var inst_11457__$1 = (state_11478[(2)]);
var inst_11458__$1 = cljs.core.nth.call(null,inst_11457__$1,(0),null);
var inst_11459 = cljs.core.nth.call(null,inst_11457__$1,(1),null);
var inst_11460 = (inst_11458__$1 == null);
var state_11478__$1 = (function (){var statearr_11480 = state_11478;
(statearr_11480[(9)] = inst_11459);

(statearr_11480[(7)] = inst_11458__$1);

(statearr_11480[(8)] = inst_11457__$1);

return statearr_11480;
})();
if(cljs.core.truth_(inst_11460)){
var statearr_11481_11501 = state_11478__$1;
(statearr_11481_11501[(1)] = (8));

} else {
var statearr_11482_11502 = state_11478__$1;
(statearr_11482_11502[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (1))){
var inst_11447 = cljs.core.vec.call(null,chs);
var inst_11448 = inst_11447;
var state_11478__$1 = (function (){var statearr_11483 = state_11478;
(statearr_11483[(10)] = inst_11448);

return statearr_11483;
})();
var statearr_11484_11503 = state_11478__$1;
(statearr_11484_11503[(2)] = null);

(statearr_11484_11503[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (4))){
var inst_11448 = (state_11478[(10)]);
var state_11478__$1 = state_11478;
return cljs.core.async.ioc_alts_BANG_.call(null,state_11478__$1,(7),inst_11448);
} else {
if((state_val_11479 === (6))){
var inst_11474 = (state_11478[(2)]);
var state_11478__$1 = state_11478;
var statearr_11485_11504 = state_11478__$1;
(statearr_11485_11504[(2)] = inst_11474);

(statearr_11485_11504[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (3))){
var inst_11476 = (state_11478[(2)]);
var state_11478__$1 = state_11478;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11478__$1,inst_11476);
} else {
if((state_val_11479 === (2))){
var inst_11448 = (state_11478[(10)]);
var inst_11450 = cljs.core.count.call(null,inst_11448);
var inst_11451 = (inst_11450 > (0));
var state_11478__$1 = state_11478;
if(cljs.core.truth_(inst_11451)){
var statearr_11487_11505 = state_11478__$1;
(statearr_11487_11505[(1)] = (4));

} else {
var statearr_11488_11506 = state_11478__$1;
(statearr_11488_11506[(1)] = (5));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (11))){
var inst_11448 = (state_11478[(10)]);
var inst_11467 = (state_11478[(2)]);
var tmp11486 = inst_11448;
var inst_11448__$1 = tmp11486;
var state_11478__$1 = (function (){var statearr_11489 = state_11478;
(statearr_11489[(10)] = inst_11448__$1);

(statearr_11489[(11)] = inst_11467);

return statearr_11489;
})();
var statearr_11490_11507 = state_11478__$1;
(statearr_11490_11507[(2)] = null);

(statearr_11490_11507[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (9))){
var inst_11458 = (state_11478[(7)]);
var state_11478__$1 = state_11478;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11478__$1,(11),out,inst_11458);
} else {
if((state_val_11479 === (5))){
var inst_11472 = cljs.core.async.close_BANG_.call(null,out);
var state_11478__$1 = state_11478;
var statearr_11491_11508 = state_11478__$1;
(statearr_11491_11508[(2)] = inst_11472);

(statearr_11491_11508[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (10))){
var inst_11470 = (state_11478[(2)]);
var state_11478__$1 = state_11478;
var statearr_11492_11509 = state_11478__$1;
(statearr_11492_11509[(2)] = inst_11470);

(statearr_11492_11509[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11479 === (8))){
var inst_11459 = (state_11478[(9)]);
var inst_11458 = (state_11478[(7)]);
var inst_11448 = (state_11478[(10)]);
var inst_11457 = (state_11478[(8)]);
var inst_11462 = (function (){var cs = inst_11448;
var vec__11453 = inst_11457;
var v = inst_11458;
var c = inst_11459;
return (function (p1__11444_SHARP_){
return cljs.core.not_EQ_.call(null,c,p1__11444_SHARP_);
});
})();
var inst_11463 = cljs.core.filterv.call(null,inst_11462,inst_11448);
var inst_11448__$1 = inst_11463;
var state_11478__$1 = (function (){var statearr_11493 = state_11478;
(statearr_11493[(10)] = inst_11448__$1);

return statearr_11493;
})();
var statearr_11494_11510 = state_11478__$1;
(statearr_11494_11510[(2)] = null);

(statearr_11494_11510[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11495 = [null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11495[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11495[(1)] = (1));

return statearr_11495;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11478){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11478);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11496){if((e11496 instanceof Object)){
var ex__9861__auto__ = e11496;
var statearr_11497_11511 = state_11478;
(statearr_11497_11511[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11478);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11496;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11512 = state_11478;
state_11478 = G__11512;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11478){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11478);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11498 = f__9875__auto__.call(null);
(statearr_11498[(6)] = c__9874__auto___11500);

return statearr_11498;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.merge.cljs$lang$maxFixedArity = 2);

/**
 * Returns a channel containing the single (collection) result of the
 *   items taken from the channel conjoined to the supplied
 *   collection. ch must close before into produces a result.
 */
cljs.core.async.into = (function cljs$core$async$into(coll,ch){
return cljs.core.async.reduce.call(null,cljs.core.conj,coll,ch);
});
/**
 * Returns a channel that will return, at most, n items from ch. After n items
 * have been returned, or ch has been closed, the return chanel will close.
 * 
 *   The output channel is unbuffered by default, unless buf-or-n is given.
 */
cljs.core.async.take = (function cljs$core$async$take(var_args){
var G__11514 = arguments.length;
switch (G__11514) {
case 2:
return cljs.core.async.take.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.take.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.take.cljs$core$IFn$_invoke$arity$2 = (function (n,ch){
return cljs.core.async.take.call(null,n,ch,null);
}));

(cljs.core.async.take.cljs$core$IFn$_invoke$arity$3 = (function (n,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__9874__auto___11559 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11538){
var state_val_11539 = (state_11538[(1)]);
if((state_val_11539 === (7))){
var inst_11520 = (state_11538[(7)]);
var inst_11520__$1 = (state_11538[(2)]);
var inst_11521 = (inst_11520__$1 == null);
var inst_11522 = cljs.core.not.call(null,inst_11521);
var state_11538__$1 = (function (){var statearr_11540 = state_11538;
(statearr_11540[(7)] = inst_11520__$1);

return statearr_11540;
})();
if(inst_11522){
var statearr_11541_11560 = state_11538__$1;
(statearr_11541_11560[(1)] = (8));

} else {
var statearr_11542_11561 = state_11538__$1;
(statearr_11542_11561[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (1))){
var inst_11515 = (0);
var state_11538__$1 = (function (){var statearr_11543 = state_11538;
(statearr_11543[(8)] = inst_11515);

return statearr_11543;
})();
var statearr_11544_11562 = state_11538__$1;
(statearr_11544_11562[(2)] = null);

(statearr_11544_11562[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (4))){
var state_11538__$1 = state_11538;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11538__$1,(7),ch);
} else {
if((state_val_11539 === (6))){
var inst_11533 = (state_11538[(2)]);
var state_11538__$1 = state_11538;
var statearr_11545_11563 = state_11538__$1;
(statearr_11545_11563[(2)] = inst_11533);

(statearr_11545_11563[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (3))){
var inst_11535 = (state_11538[(2)]);
var inst_11536 = cljs.core.async.close_BANG_.call(null,out);
var state_11538__$1 = (function (){var statearr_11546 = state_11538;
(statearr_11546[(9)] = inst_11535);

return statearr_11546;
})();
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11538__$1,inst_11536);
} else {
if((state_val_11539 === (2))){
var inst_11515 = (state_11538[(8)]);
var inst_11517 = (inst_11515 < n);
var state_11538__$1 = state_11538;
if(cljs.core.truth_(inst_11517)){
var statearr_11547_11564 = state_11538__$1;
(statearr_11547_11564[(1)] = (4));

} else {
var statearr_11548_11565 = state_11538__$1;
(statearr_11548_11565[(1)] = (5));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (11))){
var inst_11515 = (state_11538[(8)]);
var inst_11525 = (state_11538[(2)]);
var inst_11526 = (inst_11515 + (1));
var inst_11515__$1 = inst_11526;
var state_11538__$1 = (function (){var statearr_11549 = state_11538;
(statearr_11549[(10)] = inst_11525);

(statearr_11549[(8)] = inst_11515__$1);

return statearr_11549;
})();
var statearr_11550_11566 = state_11538__$1;
(statearr_11550_11566[(2)] = null);

(statearr_11550_11566[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (9))){
var state_11538__$1 = state_11538;
var statearr_11551_11567 = state_11538__$1;
(statearr_11551_11567[(2)] = null);

(statearr_11551_11567[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (5))){
var state_11538__$1 = state_11538;
var statearr_11552_11568 = state_11538__$1;
(statearr_11552_11568[(2)] = null);

(statearr_11552_11568[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (10))){
var inst_11530 = (state_11538[(2)]);
var state_11538__$1 = state_11538;
var statearr_11553_11569 = state_11538__$1;
(statearr_11553_11569[(2)] = inst_11530);

(statearr_11553_11569[(1)] = (6));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11539 === (8))){
var inst_11520 = (state_11538[(7)]);
var state_11538__$1 = state_11538;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11538__$1,(11),out,inst_11520);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11554 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_11554[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11554[(1)] = (1));

return statearr_11554;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11538){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11538);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11555){if((e11555 instanceof Object)){
var ex__9861__auto__ = e11555;
var statearr_11556_11570 = state_11538;
(statearr_11556_11570[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11538);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11555;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11571 = state_11538;
state_11538 = G__11571;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11538){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11538);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11557 = f__9875__auto__.call(null);
(statearr_11557[(6)] = c__9874__auto___11559);

return statearr_11557;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.take.cljs$lang$maxFixedArity = 3);

/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.map_LT_ = (function cljs$core$async$map_LT_(f,ch){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async11573 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Channel}
 * @implements {cljs.core.async.impl.protocols.WritePort}
 * @implements {cljs.core.async.impl.protocols.ReadPort}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async11573 = (function (f,ch,meta11574){
this.f = f;
this.ch = ch;
this.meta11574 = meta11574;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_11575,meta11574__$1){
var self__ = this;
var _11575__$1 = this;
return (new cljs.core.async.t_cljs$core$async11573(self__.f,self__.ch,meta11574__$1));
}));

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_11575){
var self__ = this;
var _11575__$1 = this;
return self__.meta11574;
}));

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.close_BANG_.call(null,self__.ch);
}));

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.closed_QMARK_.call(null,self__.ch);
}));

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (_,fn1){
var self__ = this;
var ___$1 = this;
var ret = cljs.core.async.impl.protocols.take_BANG_.call(null,self__.ch,(function (){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async11576 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Handler}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async11576 = (function (f,ch,meta11574,_,fn1,meta11577){
this.f = f;
this.ch = ch;
this.meta11574 = meta11574;
this._ = _;
this.fn1 = fn1;
this.meta11577 = meta11577;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async11576.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_11578,meta11577__$1){
var self__ = this;
var _11578__$1 = this;
return (new cljs.core.async.t_cljs$core$async11576(self__.f,self__.ch,self__.meta11574,self__._,self__.fn1,meta11577__$1));
}));

(cljs.core.async.t_cljs$core$async11576.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_11578){
var self__ = this;
var _11578__$1 = this;
return self__.meta11577;
}));

(cljs.core.async.t_cljs$core$async11576.prototype.cljs$core$async$impl$protocols$Handler$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11576.prototype.cljs$core$async$impl$protocols$Handler$active_QMARK_$arity$1 = (function (___$1){
var self__ = this;
var ___$2 = this;
return cljs.core.async.impl.protocols.active_QMARK_.call(null,self__.fn1);
}));

(cljs.core.async.t_cljs$core$async11576.prototype.cljs$core$async$impl$protocols$Handler$blockable_QMARK_$arity$1 = (function (___$1){
var self__ = this;
var ___$2 = this;
return true;
}));

(cljs.core.async.t_cljs$core$async11576.prototype.cljs$core$async$impl$protocols$Handler$commit$arity$1 = (function (___$1){
var self__ = this;
var ___$2 = this;
var f1 = cljs.core.async.impl.protocols.commit.call(null,self__.fn1);
return (function (p1__11572_SHARP_){
return f1.call(null,(((p1__11572_SHARP_ == null))?null:self__.f.call(null,p1__11572_SHARP_)));
});
}));

(cljs.core.async.t_cljs$core$async11576.getBasis = (function (){
return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta11574","meta11574",144828616,null),cljs.core.with_meta(new cljs.core.Symbol(null,"_","_",-1201019570,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"tag","tag",-1290361223),new cljs.core.Symbol("cljs.core.async","t_cljs$core$async11573","cljs.core.async/t_cljs$core$async11573",-139737926,null)], null)),new cljs.core.Symbol(null,"fn1","fn1",895834444,null),new cljs.core.Symbol(null,"meta11577","meta11577",1094771276,null)], null);
}));

(cljs.core.async.t_cljs$core$async11576.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async11576.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11576");

(cljs.core.async.t_cljs$core$async11576.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async11576");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async11576.
 */
cljs.core.async.__GT_t_cljs$core$async11576 = (function cljs$core$async$map_LT__$___GT_t_cljs$core$async11576(f__$1,ch__$1,meta11574__$1,___$2,fn1__$1,meta11577){
return (new cljs.core.async.t_cljs$core$async11576(f__$1,ch__$1,meta11574__$1,___$2,fn1__$1,meta11577));
});

}

return (new cljs.core.async.t_cljs$core$async11576(self__.f,self__.ch,self__.meta11574,___$1,fn1,cljs.core.PersistentArrayMap.EMPTY));
})()
);
if(cljs.core.truth_((function (){var and__4174__auto__ = ret;
if(cljs.core.truth_(and__4174__auto__)){
return (!((cljs.core.deref.call(null,ret) == null)));
} else {
return and__4174__auto__;
}
})())){
return cljs.core.async.impl.channels.box.call(null,self__.f.call(null,cljs.core.deref.call(null,ret)));
} else {
return ret;
}
}));

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11573.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = (function (_,val,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.put_BANG_.call(null,self__.ch,val,fn1);
}));

(cljs.core.async.t_cljs$core$async11573.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta11574","meta11574",144828616,null)], null);
}));

(cljs.core.async.t_cljs$core$async11573.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async11573.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11573");

(cljs.core.async.t_cljs$core$async11573.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async11573");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async11573.
 */
cljs.core.async.__GT_t_cljs$core$async11573 = (function cljs$core$async$map_LT__$___GT_t_cljs$core$async11573(f__$1,ch__$1,meta11574){
return (new cljs.core.async.t_cljs$core$async11573(f__$1,ch__$1,meta11574));
});

}

return (new cljs.core.async.t_cljs$core$async11573(f,ch,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.map_GT_ = (function cljs$core$async$map_GT_(f,ch){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async11579 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Channel}
 * @implements {cljs.core.async.impl.protocols.WritePort}
 * @implements {cljs.core.async.impl.protocols.ReadPort}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async11579 = (function (f,ch,meta11580){
this.f = f;
this.ch = ch;
this.meta11580 = meta11580;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_11581,meta11580__$1){
var self__ = this;
var _11581__$1 = this;
return (new cljs.core.async.t_cljs$core$async11579(self__.f,self__.ch,meta11580__$1));
}));

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_11581){
var self__ = this;
var _11581__$1 = this;
return self__.meta11580;
}));

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.close_BANG_.call(null,self__.ch);
}));

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (_,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.take_BANG_.call(null,self__.ch,fn1);
}));

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11579.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = (function (_,val,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.put_BANG_.call(null,self__.ch,self__.f.call(null,val),fn1);
}));

(cljs.core.async.t_cljs$core$async11579.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"f","f",43394975,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta11580","meta11580",215412493,null)], null);
}));

(cljs.core.async.t_cljs$core$async11579.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async11579.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11579");

(cljs.core.async.t_cljs$core$async11579.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async11579");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async11579.
 */
cljs.core.async.__GT_t_cljs$core$async11579 = (function cljs$core$async$map_GT__$___GT_t_cljs$core$async11579(f__$1,ch__$1,meta11580){
return (new cljs.core.async.t_cljs$core$async11579(f__$1,ch__$1,meta11580));
});

}

return (new cljs.core.async.t_cljs$core$async11579(f,ch,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.filter_GT_ = (function cljs$core$async$filter_GT_(p,ch){
if((typeof cljs !== 'undefined') && (typeof cljs.core !== 'undefined') && (typeof cljs.core.async !== 'undefined') && (typeof cljs.core.async.t_cljs$core$async11582 !== 'undefined')){
} else {

/**
* @constructor
 * @implements {cljs.core.async.impl.protocols.Channel}
 * @implements {cljs.core.async.impl.protocols.WritePort}
 * @implements {cljs.core.async.impl.protocols.ReadPort}
 * @implements {cljs.core.IMeta}
 * @implements {cljs.core.IWithMeta}
*/
cljs.core.async.t_cljs$core$async11582 = (function (p,ch,meta11583){
this.p = p;
this.ch = ch;
this.meta11583 = meta11583;
this.cljs$lang$protocol_mask$partition0$ = 393216;
this.cljs$lang$protocol_mask$partition1$ = 0;
});
(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_11584,meta11583__$1){
var self__ = this;
var _11584__$1 = this;
return (new cljs.core.async.t_cljs$core$async11582(self__.p,self__.ch,meta11583__$1));
}));

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_11584){
var self__ = this;
var _11584__$1 = this;
return self__.meta11583;
}));

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$Channel$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$Channel$close_BANG_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.close_BANG_.call(null,self__.ch);
}));

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$Channel$closed_QMARK_$arity$1 = (function (_){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.closed_QMARK_.call(null,self__.ch);
}));

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (_,fn1){
var self__ = this;
var ___$1 = this;
return cljs.core.async.impl.protocols.take_BANG_.call(null,self__.ch,fn1);
}));

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$WritePort$ = cljs.core.PROTOCOL_SENTINEL);

(cljs.core.async.t_cljs$core$async11582.prototype.cljs$core$async$impl$protocols$WritePort$put_BANG_$arity$3 = (function (_,val,fn1){
var self__ = this;
var ___$1 = this;
if(cljs.core.truth_(self__.p.call(null,val))){
return cljs.core.async.impl.protocols.put_BANG_.call(null,self__.ch,val,fn1);
} else {
return cljs.core.async.impl.channels.box.call(null,cljs.core.not.call(null,cljs.core.async.impl.protocols.closed_QMARK_.call(null,self__.ch)));
}
}));

(cljs.core.async.t_cljs$core$async11582.getBasis = (function (){
return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,"p","p",1791580836,null),new cljs.core.Symbol(null,"ch","ch",1085813622,null),new cljs.core.Symbol(null,"meta11583","meta11583",220464919,null)], null);
}));

(cljs.core.async.t_cljs$core$async11582.cljs$lang$type = true);

(cljs.core.async.t_cljs$core$async11582.cljs$lang$ctorStr = "cljs.core.async/t_cljs$core$async11582");

(cljs.core.async.t_cljs$core$async11582.cljs$lang$ctorPrWriter = (function (this__4428__auto__,writer__4429__auto__,opt__4430__auto__){
return cljs.core._write.call(null,writer__4429__auto__,"cljs.core.async/t_cljs$core$async11582");
}));

/**
 * Positional factory function for cljs.core.async/t_cljs$core$async11582.
 */
cljs.core.async.__GT_t_cljs$core$async11582 = (function cljs$core$async$filter_GT__$___GT_t_cljs$core$async11582(p__$1,ch__$1,meta11583){
return (new cljs.core.async.t_cljs$core$async11582(p__$1,ch__$1,meta11583));
});

}

return (new cljs.core.async.t_cljs$core$async11582(p,ch,cljs.core.PersistentArrayMap.EMPTY));
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.remove_GT_ = (function cljs$core$async$remove_GT_(p,ch){
return cljs.core.async.filter_GT_.call(null,cljs.core.complement.call(null,p),ch);
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.filter_LT_ = (function cljs$core$async$filter_LT_(var_args){
var G__11586 = arguments.length;
switch (G__11586) {
case 2:
return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$2 = (function (p,ch){
return cljs.core.async.filter_LT_.call(null,p,ch,null);
}));

(cljs.core.async.filter_LT_.cljs$core$IFn$_invoke$arity$3 = (function (p,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__9874__auto___11626 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11607){
var state_val_11608 = (state_11607[(1)]);
if((state_val_11608 === (7))){
var inst_11603 = (state_11607[(2)]);
var state_11607__$1 = state_11607;
var statearr_11609_11627 = state_11607__$1;
(statearr_11609_11627[(2)] = inst_11603);

(statearr_11609_11627[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (1))){
var state_11607__$1 = state_11607;
var statearr_11610_11628 = state_11607__$1;
(statearr_11610_11628[(2)] = null);

(statearr_11610_11628[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (4))){
var inst_11589 = (state_11607[(7)]);
var inst_11589__$1 = (state_11607[(2)]);
var inst_11590 = (inst_11589__$1 == null);
var state_11607__$1 = (function (){var statearr_11611 = state_11607;
(statearr_11611[(7)] = inst_11589__$1);

return statearr_11611;
})();
if(cljs.core.truth_(inst_11590)){
var statearr_11612_11629 = state_11607__$1;
(statearr_11612_11629[(1)] = (5));

} else {
var statearr_11613_11630 = state_11607__$1;
(statearr_11613_11630[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (6))){
var inst_11589 = (state_11607[(7)]);
var inst_11594 = p.call(null,inst_11589);
var state_11607__$1 = state_11607;
if(cljs.core.truth_(inst_11594)){
var statearr_11614_11631 = state_11607__$1;
(statearr_11614_11631[(1)] = (8));

} else {
var statearr_11615_11632 = state_11607__$1;
(statearr_11615_11632[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (3))){
var inst_11605 = (state_11607[(2)]);
var state_11607__$1 = state_11607;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11607__$1,inst_11605);
} else {
if((state_val_11608 === (2))){
var state_11607__$1 = state_11607;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11607__$1,(4),ch);
} else {
if((state_val_11608 === (11))){
var inst_11597 = (state_11607[(2)]);
var state_11607__$1 = state_11607;
var statearr_11616_11633 = state_11607__$1;
(statearr_11616_11633[(2)] = inst_11597);

(statearr_11616_11633[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (9))){
var state_11607__$1 = state_11607;
var statearr_11617_11634 = state_11607__$1;
(statearr_11617_11634[(2)] = null);

(statearr_11617_11634[(1)] = (10));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (5))){
var inst_11592 = cljs.core.async.close_BANG_.call(null,out);
var state_11607__$1 = state_11607;
var statearr_11618_11635 = state_11607__$1;
(statearr_11618_11635[(2)] = inst_11592);

(statearr_11618_11635[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (10))){
var inst_11600 = (state_11607[(2)]);
var state_11607__$1 = (function (){var statearr_11619 = state_11607;
(statearr_11619[(8)] = inst_11600);

return statearr_11619;
})();
var statearr_11620_11636 = state_11607__$1;
(statearr_11620_11636[(2)] = null);

(statearr_11620_11636[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11608 === (8))){
var inst_11589 = (state_11607[(7)]);
var state_11607__$1 = state_11607;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11607__$1,(11),out,inst_11589);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11621 = [null,null,null,null,null,null,null,null,null];
(statearr_11621[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11621[(1)] = (1));

return statearr_11621;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11607){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11607);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11622){if((e11622 instanceof Object)){
var ex__9861__auto__ = e11622;
var statearr_11623_11637 = state_11607;
(statearr_11623_11637[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11607);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11622;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11638 = state_11607;
state_11607 = G__11638;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11607){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11607);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11624 = f__9875__auto__.call(null);
(statearr_11624[(6)] = c__9874__auto___11626);

return statearr_11624;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.filter_LT_.cljs$lang$maxFixedArity = 3);

/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.remove_LT_ = (function cljs$core$async$remove_LT_(var_args){
var G__11640 = arguments.length;
switch (G__11640) {
case 2:
return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$2 = (function (p,ch){
return cljs.core.async.remove_LT_.call(null,p,ch,null);
}));

(cljs.core.async.remove_LT_.cljs$core$IFn$_invoke$arity$3 = (function (p,ch,buf_or_n){
return cljs.core.async.filter_LT_.call(null,cljs.core.complement.call(null,p),ch,buf_or_n);
}));

(cljs.core.async.remove_LT_.cljs$lang$maxFixedArity = 3);

cljs.core.async.mapcat_STAR_ = (function cljs$core$async$mapcat_STAR_(f,in$,out){
var c__9874__auto__ = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11703){
var state_val_11704 = (state_11703[(1)]);
if((state_val_11704 === (7))){
var inst_11699 = (state_11703[(2)]);
var state_11703__$1 = state_11703;
var statearr_11705_11743 = state_11703__$1;
(statearr_11705_11743[(2)] = inst_11699);

(statearr_11705_11743[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (20))){
var inst_11669 = (state_11703[(7)]);
var inst_11680 = (state_11703[(2)]);
var inst_11681 = cljs.core.next.call(null,inst_11669);
var inst_11655 = inst_11681;
var inst_11656 = null;
var inst_11657 = (0);
var inst_11658 = (0);
var state_11703__$1 = (function (){var statearr_11706 = state_11703;
(statearr_11706[(8)] = inst_11656);

(statearr_11706[(9)] = inst_11657);

(statearr_11706[(10)] = inst_11680);

(statearr_11706[(11)] = inst_11655);

(statearr_11706[(12)] = inst_11658);

return statearr_11706;
})();
var statearr_11707_11744 = state_11703__$1;
(statearr_11707_11744[(2)] = null);

(statearr_11707_11744[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (1))){
var state_11703__$1 = state_11703;
var statearr_11708_11745 = state_11703__$1;
(statearr_11708_11745[(2)] = null);

(statearr_11708_11745[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (4))){
var inst_11644 = (state_11703[(13)]);
var inst_11644__$1 = (state_11703[(2)]);
var inst_11645 = (inst_11644__$1 == null);
var state_11703__$1 = (function (){var statearr_11709 = state_11703;
(statearr_11709[(13)] = inst_11644__$1);

return statearr_11709;
})();
if(cljs.core.truth_(inst_11645)){
var statearr_11710_11746 = state_11703__$1;
(statearr_11710_11746[(1)] = (5));

} else {
var statearr_11711_11747 = state_11703__$1;
(statearr_11711_11747[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (15))){
var state_11703__$1 = state_11703;
var statearr_11715_11748 = state_11703__$1;
(statearr_11715_11748[(2)] = null);

(statearr_11715_11748[(1)] = (16));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (21))){
var state_11703__$1 = state_11703;
var statearr_11716_11749 = state_11703__$1;
(statearr_11716_11749[(2)] = null);

(statearr_11716_11749[(1)] = (23));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (13))){
var inst_11656 = (state_11703[(8)]);
var inst_11657 = (state_11703[(9)]);
var inst_11655 = (state_11703[(11)]);
var inst_11658 = (state_11703[(12)]);
var inst_11665 = (state_11703[(2)]);
var inst_11666 = (inst_11658 + (1));
var tmp11712 = inst_11656;
var tmp11713 = inst_11657;
var tmp11714 = inst_11655;
var inst_11655__$1 = tmp11714;
var inst_11656__$1 = tmp11712;
var inst_11657__$1 = tmp11713;
var inst_11658__$1 = inst_11666;
var state_11703__$1 = (function (){var statearr_11717 = state_11703;
(statearr_11717[(8)] = inst_11656__$1);

(statearr_11717[(9)] = inst_11657__$1);

(statearr_11717[(11)] = inst_11655__$1);

(statearr_11717[(12)] = inst_11658__$1);

(statearr_11717[(14)] = inst_11665);

return statearr_11717;
})();
var statearr_11718_11750 = state_11703__$1;
(statearr_11718_11750[(2)] = null);

(statearr_11718_11750[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (22))){
var state_11703__$1 = state_11703;
var statearr_11719_11751 = state_11703__$1;
(statearr_11719_11751[(2)] = null);

(statearr_11719_11751[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (6))){
var inst_11644 = (state_11703[(13)]);
var inst_11653 = f.call(null,inst_11644);
var inst_11654 = cljs.core.seq.call(null,inst_11653);
var inst_11655 = inst_11654;
var inst_11656 = null;
var inst_11657 = (0);
var inst_11658 = (0);
var state_11703__$1 = (function (){var statearr_11720 = state_11703;
(statearr_11720[(8)] = inst_11656);

(statearr_11720[(9)] = inst_11657);

(statearr_11720[(11)] = inst_11655);

(statearr_11720[(12)] = inst_11658);

return statearr_11720;
})();
var statearr_11721_11752 = state_11703__$1;
(statearr_11721_11752[(2)] = null);

(statearr_11721_11752[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (17))){
var inst_11669 = (state_11703[(7)]);
var inst_11673 = cljs.core.chunk_first.call(null,inst_11669);
var inst_11674 = cljs.core.chunk_rest.call(null,inst_11669);
var inst_11675 = cljs.core.count.call(null,inst_11673);
var inst_11655 = inst_11674;
var inst_11656 = inst_11673;
var inst_11657 = inst_11675;
var inst_11658 = (0);
var state_11703__$1 = (function (){var statearr_11722 = state_11703;
(statearr_11722[(8)] = inst_11656);

(statearr_11722[(9)] = inst_11657);

(statearr_11722[(11)] = inst_11655);

(statearr_11722[(12)] = inst_11658);

return statearr_11722;
})();
var statearr_11723_11753 = state_11703__$1;
(statearr_11723_11753[(2)] = null);

(statearr_11723_11753[(1)] = (8));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (3))){
var inst_11701 = (state_11703[(2)]);
var state_11703__$1 = state_11703;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11703__$1,inst_11701);
} else {
if((state_val_11704 === (12))){
var inst_11689 = (state_11703[(2)]);
var state_11703__$1 = state_11703;
var statearr_11724_11754 = state_11703__$1;
(statearr_11724_11754[(2)] = inst_11689);

(statearr_11724_11754[(1)] = (9));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (2))){
var state_11703__$1 = state_11703;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11703__$1,(4),in$);
} else {
if((state_val_11704 === (23))){
var inst_11697 = (state_11703[(2)]);
var state_11703__$1 = state_11703;
var statearr_11725_11755 = state_11703__$1;
(statearr_11725_11755[(2)] = inst_11697);

(statearr_11725_11755[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (19))){
var inst_11684 = (state_11703[(2)]);
var state_11703__$1 = state_11703;
var statearr_11726_11756 = state_11703__$1;
(statearr_11726_11756[(2)] = inst_11684);

(statearr_11726_11756[(1)] = (16));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (11))){
var inst_11655 = (state_11703[(11)]);
var inst_11669 = (state_11703[(7)]);
var inst_11669__$1 = cljs.core.seq.call(null,inst_11655);
var state_11703__$1 = (function (){var statearr_11727 = state_11703;
(statearr_11727[(7)] = inst_11669__$1);

return statearr_11727;
})();
if(inst_11669__$1){
var statearr_11728_11757 = state_11703__$1;
(statearr_11728_11757[(1)] = (14));

} else {
var statearr_11729_11758 = state_11703__$1;
(statearr_11729_11758[(1)] = (15));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (9))){
var inst_11691 = (state_11703[(2)]);
var inst_11692 = cljs.core.async.impl.protocols.closed_QMARK_.call(null,out);
var state_11703__$1 = (function (){var statearr_11730 = state_11703;
(statearr_11730[(15)] = inst_11691);

return statearr_11730;
})();
if(cljs.core.truth_(inst_11692)){
var statearr_11731_11759 = state_11703__$1;
(statearr_11731_11759[(1)] = (21));

} else {
var statearr_11732_11760 = state_11703__$1;
(statearr_11732_11760[(1)] = (22));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (5))){
var inst_11647 = cljs.core.async.close_BANG_.call(null,out);
var state_11703__$1 = state_11703;
var statearr_11733_11761 = state_11703__$1;
(statearr_11733_11761[(2)] = inst_11647);

(statearr_11733_11761[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (14))){
var inst_11669 = (state_11703[(7)]);
var inst_11671 = cljs.core.chunked_seq_QMARK_.call(null,inst_11669);
var state_11703__$1 = state_11703;
if(inst_11671){
var statearr_11734_11762 = state_11703__$1;
(statearr_11734_11762[(1)] = (17));

} else {
var statearr_11735_11763 = state_11703__$1;
(statearr_11735_11763[(1)] = (18));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (16))){
var inst_11687 = (state_11703[(2)]);
var state_11703__$1 = state_11703;
var statearr_11736_11764 = state_11703__$1;
(statearr_11736_11764[(2)] = inst_11687);

(statearr_11736_11764[(1)] = (12));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11704 === (10))){
var inst_11656 = (state_11703[(8)]);
var inst_11658 = (state_11703[(12)]);
var inst_11663 = cljs.core._nth.call(null,inst_11656,inst_11658);
var state_11703__$1 = state_11703;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11703__$1,(13),out,inst_11663);
} else {
if((state_val_11704 === (18))){
var inst_11669 = (state_11703[(7)]);
var inst_11678 = cljs.core.first.call(null,inst_11669);
var state_11703__$1 = state_11703;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11703__$1,(20),out,inst_11678);
} else {
if((state_val_11704 === (8))){
var inst_11657 = (state_11703[(9)]);
var inst_11658 = (state_11703[(12)]);
var inst_11660 = (inst_11658 < inst_11657);
var inst_11661 = inst_11660;
var state_11703__$1 = state_11703;
if(cljs.core.truth_(inst_11661)){
var statearr_11737_11765 = state_11703__$1;
(statearr_11737_11765[(1)] = (10));

} else {
var statearr_11738_11766 = state_11703__$1;
(statearr_11738_11766[(1)] = (11));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$mapcat_STAR__$_state_machine__9858__auto__ = null;
var cljs$core$async$mapcat_STAR__$_state_machine__9858__auto____0 = (function (){
var statearr_11739 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11739[(0)] = cljs$core$async$mapcat_STAR__$_state_machine__9858__auto__);

(statearr_11739[(1)] = (1));

return statearr_11739;
});
var cljs$core$async$mapcat_STAR__$_state_machine__9858__auto____1 = (function (state_11703){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11703);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11740){if((e11740 instanceof Object)){
var ex__9861__auto__ = e11740;
var statearr_11741_11767 = state_11703;
(statearr_11741_11767[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11703);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11740;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11768 = state_11703;
state_11703 = G__11768;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$mapcat_STAR__$_state_machine__9858__auto__ = function(state_11703){
switch(arguments.length){
case 0:
return cljs$core$async$mapcat_STAR__$_state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$mapcat_STAR__$_state_machine__9858__auto____1.call(this,state_11703);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$mapcat_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$mapcat_STAR__$_state_machine__9858__auto____0;
cljs$core$async$mapcat_STAR__$_state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$mapcat_STAR__$_state_machine__9858__auto____1;
return cljs$core$async$mapcat_STAR__$_state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11742 = f__9875__auto__.call(null);
(statearr_11742[(6)] = c__9874__auto__);

return statearr_11742;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));

return c__9874__auto__;
});
/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.mapcat_LT_ = (function cljs$core$async$mapcat_LT_(var_args){
var G__11770 = arguments.length;
switch (G__11770) {
case 2:
return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$2 = (function (f,in$){
return cljs.core.async.mapcat_LT_.call(null,f,in$,null);
}));

(cljs.core.async.mapcat_LT_.cljs$core$IFn$_invoke$arity$3 = (function (f,in$,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
cljs.core.async.mapcat_STAR_.call(null,f,in$,out);

return out;
}));

(cljs.core.async.mapcat_LT_.cljs$lang$maxFixedArity = 3);

/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.mapcat_GT_ = (function cljs$core$async$mapcat_GT_(var_args){
var G__11773 = arguments.length;
switch (G__11773) {
case 2:
return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$2 = (function (f,out){
return cljs.core.async.mapcat_GT_.call(null,f,out,null);
}));

(cljs.core.async.mapcat_GT_.cljs$core$IFn$_invoke$arity$3 = (function (f,out,buf_or_n){
var in$ = cljs.core.async.chan.call(null,buf_or_n);
cljs.core.async.mapcat_STAR_.call(null,f,in$,out);

return in$;
}));

(cljs.core.async.mapcat_GT_.cljs$lang$maxFixedArity = 3);

/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.unique = (function cljs$core$async$unique(var_args){
var G__11776 = arguments.length;
switch (G__11776) {
case 1:
return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.unique.cljs$core$IFn$_invoke$arity$1 = (function (ch){
return cljs.core.async.unique.call(null,ch,null);
}));

(cljs.core.async.unique.cljs$core$IFn$_invoke$arity$2 = (function (ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__9874__auto___11823 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11800){
var state_val_11801 = (state_11800[(1)]);
if((state_val_11801 === (7))){
var inst_11795 = (state_11800[(2)]);
var state_11800__$1 = state_11800;
var statearr_11802_11824 = state_11800__$1;
(statearr_11802_11824[(2)] = inst_11795);

(statearr_11802_11824[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (1))){
var inst_11777 = null;
var state_11800__$1 = (function (){var statearr_11803 = state_11800;
(statearr_11803[(7)] = inst_11777);

return statearr_11803;
})();
var statearr_11804_11825 = state_11800__$1;
(statearr_11804_11825[(2)] = null);

(statearr_11804_11825[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (4))){
var inst_11780 = (state_11800[(8)]);
var inst_11780__$1 = (state_11800[(2)]);
var inst_11781 = (inst_11780__$1 == null);
var inst_11782 = cljs.core.not.call(null,inst_11781);
var state_11800__$1 = (function (){var statearr_11805 = state_11800;
(statearr_11805[(8)] = inst_11780__$1);

return statearr_11805;
})();
if(inst_11782){
var statearr_11806_11826 = state_11800__$1;
(statearr_11806_11826[(1)] = (5));

} else {
var statearr_11807_11827 = state_11800__$1;
(statearr_11807_11827[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (6))){
var state_11800__$1 = state_11800;
var statearr_11808_11828 = state_11800__$1;
(statearr_11808_11828[(2)] = null);

(statearr_11808_11828[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (3))){
var inst_11797 = (state_11800[(2)]);
var inst_11798 = cljs.core.async.close_BANG_.call(null,out);
var state_11800__$1 = (function (){var statearr_11809 = state_11800;
(statearr_11809[(9)] = inst_11797);

return statearr_11809;
})();
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11800__$1,inst_11798);
} else {
if((state_val_11801 === (2))){
var state_11800__$1 = state_11800;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11800__$1,(4),ch);
} else {
if((state_val_11801 === (11))){
var inst_11780 = (state_11800[(8)]);
var inst_11789 = (state_11800[(2)]);
var inst_11777 = inst_11780;
var state_11800__$1 = (function (){var statearr_11810 = state_11800;
(statearr_11810[(7)] = inst_11777);

(statearr_11810[(10)] = inst_11789);

return statearr_11810;
})();
var statearr_11811_11829 = state_11800__$1;
(statearr_11811_11829[(2)] = null);

(statearr_11811_11829[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (9))){
var inst_11780 = (state_11800[(8)]);
var state_11800__$1 = state_11800;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11800__$1,(11),out,inst_11780);
} else {
if((state_val_11801 === (5))){
var inst_11777 = (state_11800[(7)]);
var inst_11780 = (state_11800[(8)]);
var inst_11784 = cljs.core._EQ_.call(null,inst_11780,inst_11777);
var state_11800__$1 = state_11800;
if(inst_11784){
var statearr_11813_11830 = state_11800__$1;
(statearr_11813_11830[(1)] = (8));

} else {
var statearr_11814_11831 = state_11800__$1;
(statearr_11814_11831[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (10))){
var inst_11792 = (state_11800[(2)]);
var state_11800__$1 = state_11800;
var statearr_11815_11832 = state_11800__$1;
(statearr_11815_11832[(2)] = inst_11792);

(statearr_11815_11832[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11801 === (8))){
var inst_11777 = (state_11800[(7)]);
var tmp11812 = inst_11777;
var inst_11777__$1 = tmp11812;
var state_11800__$1 = (function (){var statearr_11816 = state_11800;
(statearr_11816[(7)] = inst_11777__$1);

return statearr_11816;
})();
var statearr_11817_11833 = state_11800__$1;
(statearr_11817_11833[(2)] = null);

(statearr_11817_11833[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11818 = [null,null,null,null,null,null,null,null,null,null,null];
(statearr_11818[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11818[(1)] = (1));

return statearr_11818;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11800){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11800);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11819){if((e11819 instanceof Object)){
var ex__9861__auto__ = e11819;
var statearr_11820_11834 = state_11800;
(statearr_11820_11834[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11800);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11819;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11835 = state_11800;
state_11800 = G__11835;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11800){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11800);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11821 = f__9875__auto__.call(null);
(statearr_11821[(6)] = c__9874__auto___11823);

return statearr_11821;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.unique.cljs$lang$maxFixedArity = 2);

/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.partition = (function cljs$core$async$partition(var_args){
var G__11837 = arguments.length;
switch (G__11837) {
case 2:
return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.partition.cljs$core$IFn$_invoke$arity$2 = (function (n,ch){
return cljs.core.async.partition.call(null,n,ch,null);
}));

(cljs.core.async.partition.cljs$core$IFn$_invoke$arity$3 = (function (n,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__9874__auto___11903 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11875){
var state_val_11876 = (state_11875[(1)]);
if((state_val_11876 === (7))){
var inst_11871 = (state_11875[(2)]);
var state_11875__$1 = state_11875;
var statearr_11877_11904 = state_11875__$1;
(statearr_11877_11904[(2)] = inst_11871);

(statearr_11877_11904[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (1))){
var inst_11838 = (new Array(n));
var inst_11839 = inst_11838;
var inst_11840 = (0);
var state_11875__$1 = (function (){var statearr_11878 = state_11875;
(statearr_11878[(7)] = inst_11840);

(statearr_11878[(8)] = inst_11839);

return statearr_11878;
})();
var statearr_11879_11905 = state_11875__$1;
(statearr_11879_11905[(2)] = null);

(statearr_11879_11905[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (4))){
var inst_11843 = (state_11875[(9)]);
var inst_11843__$1 = (state_11875[(2)]);
var inst_11844 = (inst_11843__$1 == null);
var inst_11845 = cljs.core.not.call(null,inst_11844);
var state_11875__$1 = (function (){var statearr_11880 = state_11875;
(statearr_11880[(9)] = inst_11843__$1);

return statearr_11880;
})();
if(inst_11845){
var statearr_11881_11906 = state_11875__$1;
(statearr_11881_11906[(1)] = (5));

} else {
var statearr_11882_11907 = state_11875__$1;
(statearr_11882_11907[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (15))){
var inst_11865 = (state_11875[(2)]);
var state_11875__$1 = state_11875;
var statearr_11883_11908 = state_11875__$1;
(statearr_11883_11908[(2)] = inst_11865);

(statearr_11883_11908[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (13))){
var state_11875__$1 = state_11875;
var statearr_11884_11909 = state_11875__$1;
(statearr_11884_11909[(2)] = null);

(statearr_11884_11909[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (6))){
var inst_11840 = (state_11875[(7)]);
var inst_11861 = (inst_11840 > (0));
var state_11875__$1 = state_11875;
if(cljs.core.truth_(inst_11861)){
var statearr_11885_11910 = state_11875__$1;
(statearr_11885_11910[(1)] = (12));

} else {
var statearr_11886_11911 = state_11875__$1;
(statearr_11886_11911[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (3))){
var inst_11873 = (state_11875[(2)]);
var state_11875__$1 = state_11875;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11875__$1,inst_11873);
} else {
if((state_val_11876 === (12))){
var inst_11839 = (state_11875[(8)]);
var inst_11863 = cljs.core.vec.call(null,inst_11839);
var state_11875__$1 = state_11875;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11875__$1,(15),out,inst_11863);
} else {
if((state_val_11876 === (2))){
var state_11875__$1 = state_11875;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11875__$1,(4),ch);
} else {
if((state_val_11876 === (11))){
var inst_11855 = (state_11875[(2)]);
var inst_11856 = (new Array(n));
var inst_11839 = inst_11856;
var inst_11840 = (0);
var state_11875__$1 = (function (){var statearr_11887 = state_11875;
(statearr_11887[(10)] = inst_11855);

(statearr_11887[(7)] = inst_11840);

(statearr_11887[(8)] = inst_11839);

return statearr_11887;
})();
var statearr_11888_11912 = state_11875__$1;
(statearr_11888_11912[(2)] = null);

(statearr_11888_11912[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (9))){
var inst_11839 = (state_11875[(8)]);
var inst_11853 = cljs.core.vec.call(null,inst_11839);
var state_11875__$1 = state_11875;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11875__$1,(11),out,inst_11853);
} else {
if((state_val_11876 === (5))){
var inst_11843 = (state_11875[(9)]);
var inst_11840 = (state_11875[(7)]);
var inst_11839 = (state_11875[(8)]);
var inst_11848 = (state_11875[(11)]);
var inst_11847 = (inst_11839[inst_11840] = inst_11843);
var inst_11848__$1 = (inst_11840 + (1));
var inst_11849 = (inst_11848__$1 < n);
var state_11875__$1 = (function (){var statearr_11889 = state_11875;
(statearr_11889[(12)] = inst_11847);

(statearr_11889[(11)] = inst_11848__$1);

return statearr_11889;
})();
if(cljs.core.truth_(inst_11849)){
var statearr_11890_11913 = state_11875__$1;
(statearr_11890_11913[(1)] = (8));

} else {
var statearr_11891_11914 = state_11875__$1;
(statearr_11891_11914[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (14))){
var inst_11868 = (state_11875[(2)]);
var inst_11869 = cljs.core.async.close_BANG_.call(null,out);
var state_11875__$1 = (function (){var statearr_11893 = state_11875;
(statearr_11893[(13)] = inst_11868);

return statearr_11893;
})();
var statearr_11894_11915 = state_11875__$1;
(statearr_11894_11915[(2)] = inst_11869);

(statearr_11894_11915[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (10))){
var inst_11859 = (state_11875[(2)]);
var state_11875__$1 = state_11875;
var statearr_11895_11916 = state_11875__$1;
(statearr_11895_11916[(2)] = inst_11859);

(statearr_11895_11916[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11876 === (8))){
var inst_11839 = (state_11875[(8)]);
var inst_11848 = (state_11875[(11)]);
var tmp11892 = inst_11839;
var inst_11839__$1 = tmp11892;
var inst_11840 = inst_11848;
var state_11875__$1 = (function (){var statearr_11896 = state_11875;
(statearr_11896[(7)] = inst_11840);

(statearr_11896[(8)] = inst_11839__$1);

return statearr_11896;
})();
var statearr_11897_11917 = state_11875__$1;
(statearr_11897_11917[(2)] = null);

(statearr_11897_11917[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11898 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11898[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11898[(1)] = (1));

return statearr_11898;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11875){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11875);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11899){if((e11899 instanceof Object)){
var ex__9861__auto__ = e11899;
var statearr_11900_11918 = state_11875;
(statearr_11900_11918[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11875);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11899;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__11919 = state_11875;
state_11875 = G__11919;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11875){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11875);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11901 = f__9875__auto__.call(null);
(statearr_11901[(6)] = c__9874__auto___11903);

return statearr_11901;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.partition.cljs$lang$maxFixedArity = 3);

/**
 * Deprecated - this function will be removed. Use transducer instead
 */
cljs.core.async.partition_by = (function cljs$core$async$partition_by(var_args){
var G__11921 = arguments.length;
switch (G__11921) {
case 2:
return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

(cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$2 = (function (f,ch){
return cljs.core.async.partition_by.call(null,f,ch,null);
}));

(cljs.core.async.partition_by.cljs$core$IFn$_invoke$arity$3 = (function (f,ch,buf_or_n){
var out = cljs.core.async.chan.call(null,buf_or_n);
var c__9874__auto___11991 = cljs.core.async.chan.call(null,(1));
cljs.core.async.impl.dispatch.run.call(null,(function (){
var f__9875__auto__ = (function (){var switch__9857__auto__ = (function (state_11963){
var state_val_11964 = (state_11963[(1)]);
if((state_val_11964 === (7))){
var inst_11959 = (state_11963[(2)]);
var state_11963__$1 = state_11963;
var statearr_11965_11992 = state_11963__$1;
(statearr_11965_11992[(2)] = inst_11959);

(statearr_11965_11992[(1)] = (3));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (1))){
var inst_11922 = [];
var inst_11923 = inst_11922;
var inst_11924 = new cljs.core.Keyword("cljs.core.async","nothing","cljs.core.async/nothing",-69252123);
var state_11963__$1 = (function (){var statearr_11966 = state_11963;
(statearr_11966[(7)] = inst_11923);

(statearr_11966[(8)] = inst_11924);

return statearr_11966;
})();
var statearr_11967_11993 = state_11963__$1;
(statearr_11967_11993[(2)] = null);

(statearr_11967_11993[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (4))){
var inst_11927 = (state_11963[(9)]);
var inst_11927__$1 = (state_11963[(2)]);
var inst_11928 = (inst_11927__$1 == null);
var inst_11929 = cljs.core.not.call(null,inst_11928);
var state_11963__$1 = (function (){var statearr_11968 = state_11963;
(statearr_11968[(9)] = inst_11927__$1);

return statearr_11968;
})();
if(inst_11929){
var statearr_11969_11994 = state_11963__$1;
(statearr_11969_11994[(1)] = (5));

} else {
var statearr_11970_11995 = state_11963__$1;
(statearr_11970_11995[(1)] = (6));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (15))){
var inst_11953 = (state_11963[(2)]);
var state_11963__$1 = state_11963;
var statearr_11971_11996 = state_11963__$1;
(statearr_11971_11996[(2)] = inst_11953);

(statearr_11971_11996[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (13))){
var state_11963__$1 = state_11963;
var statearr_11972_11997 = state_11963__$1;
(statearr_11972_11997[(2)] = null);

(statearr_11972_11997[(1)] = (14));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (6))){
var inst_11923 = (state_11963[(7)]);
var inst_11948 = inst_11923.length;
var inst_11949 = (inst_11948 > (0));
var state_11963__$1 = state_11963;
if(cljs.core.truth_(inst_11949)){
var statearr_11973_11998 = state_11963__$1;
(statearr_11973_11998[(1)] = (12));

} else {
var statearr_11974_11999 = state_11963__$1;
(statearr_11974_11999[(1)] = (13));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (3))){
var inst_11961 = (state_11963[(2)]);
var state_11963__$1 = state_11963;
return cljs.core.async.impl.ioc_helpers.return_chan.call(null,state_11963__$1,inst_11961);
} else {
if((state_val_11964 === (12))){
var inst_11923 = (state_11963[(7)]);
var inst_11951 = cljs.core.vec.call(null,inst_11923);
var state_11963__$1 = state_11963;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11963__$1,(15),out,inst_11951);
} else {
if((state_val_11964 === (2))){
var state_11963__$1 = state_11963;
return cljs.core.async.impl.ioc_helpers.take_BANG_.call(null,state_11963__$1,(4),ch);
} else {
if((state_val_11964 === (11))){
var inst_11927 = (state_11963[(9)]);
var inst_11931 = (state_11963[(10)]);
var inst_11941 = (state_11963[(2)]);
var inst_11942 = [];
var inst_11943 = inst_11942.push(inst_11927);
var inst_11923 = inst_11942;
var inst_11924 = inst_11931;
var state_11963__$1 = (function (){var statearr_11975 = state_11963;
(statearr_11975[(11)] = inst_11941);

(statearr_11975[(12)] = inst_11943);

(statearr_11975[(7)] = inst_11923);

(statearr_11975[(8)] = inst_11924);

return statearr_11975;
})();
var statearr_11976_12000 = state_11963__$1;
(statearr_11976_12000[(2)] = null);

(statearr_11976_12000[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (9))){
var inst_11923 = (state_11963[(7)]);
var inst_11939 = cljs.core.vec.call(null,inst_11923);
var state_11963__$1 = state_11963;
return cljs.core.async.impl.ioc_helpers.put_BANG_.call(null,state_11963__$1,(11),out,inst_11939);
} else {
if((state_val_11964 === (5))){
var inst_11927 = (state_11963[(9)]);
var inst_11931 = (state_11963[(10)]);
var inst_11924 = (state_11963[(8)]);
var inst_11931__$1 = f.call(null,inst_11927);
var inst_11932 = cljs.core._EQ_.call(null,inst_11931__$1,inst_11924);
var inst_11933 = cljs.core.keyword_identical_QMARK_.call(null,inst_11924,new cljs.core.Keyword("cljs.core.async","nothing","cljs.core.async/nothing",-69252123));
var inst_11934 = ((inst_11932) || (inst_11933));
var state_11963__$1 = (function (){var statearr_11977 = state_11963;
(statearr_11977[(10)] = inst_11931__$1);

return statearr_11977;
})();
if(cljs.core.truth_(inst_11934)){
var statearr_11978_12001 = state_11963__$1;
(statearr_11978_12001[(1)] = (8));

} else {
var statearr_11979_12002 = state_11963__$1;
(statearr_11979_12002[(1)] = (9));

}

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (14))){
var inst_11956 = (state_11963[(2)]);
var inst_11957 = cljs.core.async.close_BANG_.call(null,out);
var state_11963__$1 = (function (){var statearr_11981 = state_11963;
(statearr_11981[(13)] = inst_11956);

return statearr_11981;
})();
var statearr_11982_12003 = state_11963__$1;
(statearr_11982_12003[(2)] = inst_11957);

(statearr_11982_12003[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (10))){
var inst_11946 = (state_11963[(2)]);
var state_11963__$1 = state_11963;
var statearr_11983_12004 = state_11963__$1;
(statearr_11983_12004[(2)] = inst_11946);

(statearr_11983_12004[(1)] = (7));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
if((state_val_11964 === (8))){
var inst_11927 = (state_11963[(9)]);
var inst_11923 = (state_11963[(7)]);
var inst_11931 = (state_11963[(10)]);
var inst_11936 = inst_11923.push(inst_11927);
var tmp11980 = inst_11923;
var inst_11923__$1 = tmp11980;
var inst_11924 = inst_11931;
var state_11963__$1 = (function (){var statearr_11984 = state_11963;
(statearr_11984[(14)] = inst_11936);

(statearr_11984[(7)] = inst_11923__$1);

(statearr_11984[(8)] = inst_11924);

return statearr_11984;
})();
var statearr_11985_12005 = state_11963__$1;
(statearr_11985_12005[(2)] = null);

(statearr_11985_12005[(1)] = (2));


return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
return null;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
});
return (function() {
var cljs$core$async$state_machine__9858__auto__ = null;
var cljs$core$async$state_machine__9858__auto____0 = (function (){
var statearr_11986 = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
(statearr_11986[(0)] = cljs$core$async$state_machine__9858__auto__);

(statearr_11986[(1)] = (1));

return statearr_11986;
});
var cljs$core$async$state_machine__9858__auto____1 = (function (state_11963){
while(true){
var ret_value__9859__auto__ = (function (){try{while(true){
var result__9860__auto__ = switch__9857__auto__.call(null,state_11963);
if(cljs.core.keyword_identical_QMARK_.call(null,result__9860__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
continue;
} else {
return result__9860__auto__;
}
break;
}
}catch (e11987){if((e11987 instanceof Object)){
var ex__9861__auto__ = e11987;
var statearr_11988_12006 = state_11963;
(statearr_11988_12006[(5)] = ex__9861__auto__);


cljs.core.async.impl.ioc_helpers.process_exception.call(null,state_11963);

return new cljs.core.Keyword(null,"recur","recur",-437573268);
} else {
throw e11987;

}
}})();
if(cljs.core.keyword_identical_QMARK_.call(null,ret_value__9859__auto__,new cljs.core.Keyword(null,"recur","recur",-437573268))){
var G__12007 = state_11963;
state_11963 = G__12007;
continue;
} else {
return ret_value__9859__auto__;
}
break;
}
});
cljs$core$async$state_machine__9858__auto__ = function(state_11963){
switch(arguments.length){
case 0:
return cljs$core$async$state_machine__9858__auto____0.call(this);
case 1:
return cljs$core$async$state_machine__9858__auto____1.call(this,state_11963);
}
throw(new Error('Invalid arity: ' + arguments.length));
};
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$0 = cljs$core$async$state_machine__9858__auto____0;
cljs$core$async$state_machine__9858__auto__.cljs$core$IFn$_invoke$arity$1 = cljs$core$async$state_machine__9858__auto____1;
return cljs$core$async$state_machine__9858__auto__;
})()
})();
var state__9876__auto__ = (function (){var statearr_11989 = f__9875__auto__.call(null);
(statearr_11989[(6)] = c__9874__auto___11991);

return statearr_11989;
})();
return cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped.call(null,state__9876__auto__);
}));


return out;
}));

(cljs.core.async.partition_by.cljs$lang$maxFixedArity = 3);


//# sourceMappingURL=async.js.map
