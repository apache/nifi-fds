// Compiled by ClojureScript 1.10.597 {:target :nodejs}
goog.provide('cljs.repl');
goog.require('cljs.core');
goog.require('cljs.spec.alpha');
goog.require('goog.string');
goog.require('goog.string.format');
cljs.repl.print_doc = (function cljs$repl$print_doc(p__8108){
var map__8109 = p__8108;
var map__8109__$1 = (((((!((map__8109 == null))))?(((((map__8109.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8109.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8109):map__8109);
var m = map__8109__$1;
var n = cljs.core.get.call(null,map__8109__$1,new cljs.core.Keyword(null,"ns","ns",441598760));
var nm = cljs.core.get.call(null,map__8109__$1,new cljs.core.Keyword(null,"name","name",1843675177));
cljs.core.println.call(null,"-------------------------");

cljs.core.println.call(null,(function (){var or__4185__auto__ = new cljs.core.Keyword(null,"spec","spec",347520401).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return [(function (){var temp__5735__auto__ = new cljs.core.Keyword(null,"ns","ns",441598760).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(temp__5735__auto__)){
var ns = temp__5735__auto__;
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),"/"].join('');
} else {
return null;
}
})(),cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(m))].join('');
}
})());

if(cljs.core.truth_(new cljs.core.Keyword(null,"protocol","protocol",652470118).cljs$core$IFn$_invoke$arity$1(m))){
cljs.core.println.call(null,"Protocol");
} else {
}

if(cljs.core.truth_(new cljs.core.Keyword(null,"forms","forms",2045992350).cljs$core$IFn$_invoke$arity$1(m))){
var seq__8111_8143 = cljs.core.seq.call(null,new cljs.core.Keyword(null,"forms","forms",2045992350).cljs$core$IFn$_invoke$arity$1(m));
var chunk__8112_8144 = null;
var count__8113_8145 = (0);
var i__8114_8146 = (0);
while(true){
if((i__8114_8146 < count__8113_8145)){
var f_8147 = cljs.core._nth.call(null,chunk__8112_8144,i__8114_8146);
cljs.core.println.call(null,"  ",f_8147);


var G__8148 = seq__8111_8143;
var G__8149 = chunk__8112_8144;
var G__8150 = count__8113_8145;
var G__8151 = (i__8114_8146 + (1));
seq__8111_8143 = G__8148;
chunk__8112_8144 = G__8149;
count__8113_8145 = G__8150;
i__8114_8146 = G__8151;
continue;
} else {
var temp__5735__auto___8152 = cljs.core.seq.call(null,seq__8111_8143);
if(temp__5735__auto___8152){
var seq__8111_8153__$1 = temp__5735__auto___8152;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__8111_8153__$1)){
var c__4609__auto___8154 = cljs.core.chunk_first.call(null,seq__8111_8153__$1);
var G__8155 = cljs.core.chunk_rest.call(null,seq__8111_8153__$1);
var G__8156 = c__4609__auto___8154;
var G__8157 = cljs.core.count.call(null,c__4609__auto___8154);
var G__8158 = (0);
seq__8111_8143 = G__8155;
chunk__8112_8144 = G__8156;
count__8113_8145 = G__8157;
i__8114_8146 = G__8158;
continue;
} else {
var f_8159 = cljs.core.first.call(null,seq__8111_8153__$1);
cljs.core.println.call(null,"  ",f_8159);


var G__8160 = cljs.core.next.call(null,seq__8111_8153__$1);
var G__8161 = null;
var G__8162 = (0);
var G__8163 = (0);
seq__8111_8143 = G__8160;
chunk__8112_8144 = G__8161;
count__8113_8145 = G__8162;
i__8114_8146 = G__8163;
continue;
}
} else {
}
}
break;
}
} else {
if(cljs.core.truth_(new cljs.core.Keyword(null,"arglists","arglists",1661989754).cljs$core$IFn$_invoke$arity$1(m))){
var arglists_8164 = new cljs.core.Keyword(null,"arglists","arglists",1661989754).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_((function (){var or__4185__auto__ = new cljs.core.Keyword(null,"macro","macro",-867863404).cljs$core$IFn$_invoke$arity$1(m);
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return new cljs.core.Keyword(null,"repl-special-function","repl-special-function",1262603725).cljs$core$IFn$_invoke$arity$1(m);
}
})())){
cljs.core.prn.call(null,arglists_8164);
} else {
cljs.core.prn.call(null,((cljs.core._EQ_.call(null,new cljs.core.Symbol(null,"quote","quote",1377916282,null),cljs.core.first.call(null,arglists_8164)))?cljs.core.second.call(null,arglists_8164):arglists_8164));
}
} else {
}
}

if(cljs.core.truth_(new cljs.core.Keyword(null,"special-form","special-form",-1326536374).cljs$core$IFn$_invoke$arity$1(m))){
cljs.core.println.call(null,"Special Form");

cljs.core.println.call(null," ",new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m));

if(cljs.core.contains_QMARK_.call(null,m,new cljs.core.Keyword(null,"url","url",276297046))){
if(cljs.core.truth_(new cljs.core.Keyword(null,"url","url",276297046).cljs$core$IFn$_invoke$arity$1(m))){
return cljs.core.println.call(null,["\n  Please see http://clojure.org/",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,"url","url",276297046).cljs$core$IFn$_invoke$arity$1(m))].join(''));
} else {
return null;
}
} else {
return cljs.core.println.call(null,["\n  Please see http://clojure.org/special_forms#",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,"name","name",1843675177).cljs$core$IFn$_invoke$arity$1(m))].join(''));
}
} else {
if(cljs.core.truth_(new cljs.core.Keyword(null,"macro","macro",-867863404).cljs$core$IFn$_invoke$arity$1(m))){
cljs.core.println.call(null,"Macro");
} else {
}

if(cljs.core.truth_(new cljs.core.Keyword(null,"spec","spec",347520401).cljs$core$IFn$_invoke$arity$1(m))){
cljs.core.println.call(null,"Spec");
} else {
}

if(cljs.core.truth_(new cljs.core.Keyword(null,"repl-special-function","repl-special-function",1262603725).cljs$core$IFn$_invoke$arity$1(m))){
cljs.core.println.call(null,"REPL Special Function");
} else {
}

cljs.core.println.call(null," ",new cljs.core.Keyword(null,"doc","doc",1913296891).cljs$core$IFn$_invoke$arity$1(m));

if(cljs.core.truth_(new cljs.core.Keyword(null,"protocol","protocol",652470118).cljs$core$IFn$_invoke$arity$1(m))){
var seq__8115_8165 = cljs.core.seq.call(null,new cljs.core.Keyword(null,"methods","methods",453930866).cljs$core$IFn$_invoke$arity$1(m));
var chunk__8116_8166 = null;
var count__8117_8167 = (0);
var i__8118_8168 = (0);
while(true){
if((i__8118_8168 < count__8117_8167)){
var vec__8129_8169 = cljs.core._nth.call(null,chunk__8116_8166,i__8118_8168);
var name_8170 = cljs.core.nth.call(null,vec__8129_8169,(0),null);
var map__8132_8171 = cljs.core.nth.call(null,vec__8129_8169,(1),null);
var map__8132_8172__$1 = (((((!((map__8132_8171 == null))))?(((((map__8132_8171.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8132_8171.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8132_8171):map__8132_8171);
var doc_8173 = cljs.core.get.call(null,map__8132_8172__$1,new cljs.core.Keyword(null,"doc","doc",1913296891));
var arglists_8174 = cljs.core.get.call(null,map__8132_8172__$1,new cljs.core.Keyword(null,"arglists","arglists",1661989754));
cljs.core.println.call(null);

cljs.core.println.call(null," ",name_8170);

cljs.core.println.call(null," ",arglists_8174);

if(cljs.core.truth_(doc_8173)){
cljs.core.println.call(null," ",doc_8173);
} else {
}


var G__8175 = seq__8115_8165;
var G__8176 = chunk__8116_8166;
var G__8177 = count__8117_8167;
var G__8178 = (i__8118_8168 + (1));
seq__8115_8165 = G__8175;
chunk__8116_8166 = G__8176;
count__8117_8167 = G__8177;
i__8118_8168 = G__8178;
continue;
} else {
var temp__5735__auto___8179 = cljs.core.seq.call(null,seq__8115_8165);
if(temp__5735__auto___8179){
var seq__8115_8180__$1 = temp__5735__auto___8179;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__8115_8180__$1)){
var c__4609__auto___8181 = cljs.core.chunk_first.call(null,seq__8115_8180__$1);
var G__8182 = cljs.core.chunk_rest.call(null,seq__8115_8180__$1);
var G__8183 = c__4609__auto___8181;
var G__8184 = cljs.core.count.call(null,c__4609__auto___8181);
var G__8185 = (0);
seq__8115_8165 = G__8182;
chunk__8116_8166 = G__8183;
count__8117_8167 = G__8184;
i__8118_8168 = G__8185;
continue;
} else {
var vec__8134_8186 = cljs.core.first.call(null,seq__8115_8180__$1);
var name_8187 = cljs.core.nth.call(null,vec__8134_8186,(0),null);
var map__8137_8188 = cljs.core.nth.call(null,vec__8134_8186,(1),null);
var map__8137_8189__$1 = (((((!((map__8137_8188 == null))))?(((((map__8137_8188.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8137_8188.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8137_8188):map__8137_8188);
var doc_8190 = cljs.core.get.call(null,map__8137_8189__$1,new cljs.core.Keyword(null,"doc","doc",1913296891));
var arglists_8191 = cljs.core.get.call(null,map__8137_8189__$1,new cljs.core.Keyword(null,"arglists","arglists",1661989754));
cljs.core.println.call(null);

cljs.core.println.call(null," ",name_8187);

cljs.core.println.call(null," ",arglists_8191);

if(cljs.core.truth_(doc_8190)){
cljs.core.println.call(null," ",doc_8190);
} else {
}


var G__8192 = cljs.core.next.call(null,seq__8115_8180__$1);
var G__8193 = null;
var G__8194 = (0);
var G__8195 = (0);
seq__8115_8165 = G__8192;
chunk__8116_8166 = G__8193;
count__8117_8167 = G__8194;
i__8118_8168 = G__8195;
continue;
}
} else {
}
}
break;
}
} else {
}

if(cljs.core.truth_(n)){
var temp__5735__auto__ = cljs.spec.alpha.get_spec.call(null,cljs.core.symbol.call(null,cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.ns_name.call(null,n)),cljs.core.name.call(null,nm)));
if(cljs.core.truth_(temp__5735__auto__)){
var fnspec = temp__5735__auto__;
cljs.core.print.call(null,"Spec");

var seq__8139 = cljs.core.seq.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"args","args",1315556576),new cljs.core.Keyword(null,"ret","ret",-468222814),new cljs.core.Keyword(null,"fn","fn",-1175266204)], null));
var chunk__8140 = null;
var count__8141 = (0);
var i__8142 = (0);
while(true){
if((i__8142 < count__8141)){
var role = cljs.core._nth.call(null,chunk__8140,i__8142);
var temp__5735__auto___8196__$1 = cljs.core.get.call(null,fnspec,role);
if(cljs.core.truth_(temp__5735__auto___8196__$1)){
var spec_8197 = temp__5735__auto___8196__$1;
cljs.core.print.call(null,["\n ",cljs.core.name.call(null,role),":"].join(''),cljs.spec.alpha.describe.call(null,spec_8197));
} else {
}


var G__8198 = seq__8139;
var G__8199 = chunk__8140;
var G__8200 = count__8141;
var G__8201 = (i__8142 + (1));
seq__8139 = G__8198;
chunk__8140 = G__8199;
count__8141 = G__8200;
i__8142 = G__8201;
continue;
} else {
var temp__5735__auto____$1 = cljs.core.seq.call(null,seq__8139);
if(temp__5735__auto____$1){
var seq__8139__$1 = temp__5735__auto____$1;
if(cljs.core.chunked_seq_QMARK_.call(null,seq__8139__$1)){
var c__4609__auto__ = cljs.core.chunk_first.call(null,seq__8139__$1);
var G__8202 = cljs.core.chunk_rest.call(null,seq__8139__$1);
var G__8203 = c__4609__auto__;
var G__8204 = cljs.core.count.call(null,c__4609__auto__);
var G__8205 = (0);
seq__8139 = G__8202;
chunk__8140 = G__8203;
count__8141 = G__8204;
i__8142 = G__8205;
continue;
} else {
var role = cljs.core.first.call(null,seq__8139__$1);
var temp__5735__auto___8206__$2 = cljs.core.get.call(null,fnspec,role);
if(cljs.core.truth_(temp__5735__auto___8206__$2)){
var spec_8207 = temp__5735__auto___8206__$2;
cljs.core.print.call(null,["\n ",cljs.core.name.call(null,role),":"].join(''),cljs.spec.alpha.describe.call(null,spec_8207));
} else {
}


var G__8208 = cljs.core.next.call(null,seq__8139__$1);
var G__8209 = null;
var G__8210 = (0);
var G__8211 = (0);
seq__8139 = G__8208;
chunk__8140 = G__8209;
count__8141 = G__8210;
i__8142 = G__8211;
continue;
}
} else {
return null;
}
}
break;
}
} else {
return null;
}
} else {
return null;
}
}
});
/**
 * Constructs a data representation for a Error with keys:
 *  :cause - root cause message
 *  :phase - error phase
 *  :via - cause chain, with cause keys:
 *           :type - exception class symbol
 *           :message - exception message
 *           :data - ex-data
 *           :at - top stack element
 *  :trace - root cause stack elements
 */
cljs.repl.Error__GT_map = (function cljs$repl$Error__GT_map(o){
var base = (function (t){
return cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"type","type",1174270348),(((t instanceof cljs.core.ExceptionInfo))?new cljs.core.Symbol(null,"ExceptionInfo","ExceptionInfo",294935087,null):(((t instanceof Error))?cljs.core.symbol.call(null,"js",t.name):null
))], null),(function (){var temp__5735__auto__ = cljs.core.ex_message.call(null,t);
if(cljs.core.truth_(temp__5735__auto__)){
var msg = temp__5735__auto__;
return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"message","message",-406056002),msg], null);
} else {
return null;
}
})(),(function (){var temp__5735__auto__ = cljs.core.ex_data.call(null,t);
if(cljs.core.truth_(temp__5735__auto__)){
var ed = temp__5735__auto__;
return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"data","data",-232669377),ed], null);
} else {
return null;
}
})());
});
var via = (function (){var via = cljs.core.PersistentVector.EMPTY;
var t = o;
while(true){
if(cljs.core.truth_(t)){
var G__8212 = cljs.core.conj.call(null,via,t);
var G__8213 = cljs.core.ex_cause.call(null,t);
via = G__8212;
t = G__8213;
continue;
} else {
return via;
}
break;
}
})();
var root = cljs.core.peek.call(null,via);
return cljs.core.merge.call(null,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,"via","via",-1904457336),cljs.core.vec.call(null,cljs.core.map.call(null,base,via)),new cljs.core.Keyword(null,"trace","trace",-1082747415),null], null),(function (){var temp__5735__auto__ = cljs.core.ex_message.call(null,root);
if(cljs.core.truth_(temp__5735__auto__)){
var root_msg = temp__5735__auto__;
return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"cause","cause",231901252),root_msg], null);
} else {
return null;
}
})(),(function (){var temp__5735__auto__ = cljs.core.ex_data.call(null,root);
if(cljs.core.truth_(temp__5735__auto__)){
var data = temp__5735__auto__;
return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"data","data",-232669377),data], null);
} else {
return null;
}
})(),(function (){var temp__5735__auto__ = new cljs.core.Keyword("clojure.error","phase","clojure.error/phase",275140358).cljs$core$IFn$_invoke$arity$1(cljs.core.ex_data.call(null,o));
if(cljs.core.truth_(temp__5735__auto__)){
var phase = temp__5735__auto__;
return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"phase","phase",575722892),phase], null);
} else {
return null;
}
})());
});
/**
 * Returns an analysis of the phase, error, cause, and location of an error that occurred
 *   based on Throwable data, as returned by Throwable->map. All attributes other than phase
 *   are optional:
 *  :clojure.error/phase - keyword phase indicator, one of:
 *    :read-source :compile-syntax-check :compilation :macro-syntax-check :macroexpansion
 *    :execution :read-eval-result :print-eval-result
 *  :clojure.error/source - file name (no path)
 *  :clojure.error/line - integer line number
 *  :clojure.error/column - integer column number
 *  :clojure.error/symbol - symbol being expanded/compiled/invoked
 *  :clojure.error/class - cause exception class symbol
 *  :clojure.error/cause - cause exception message
 *  :clojure.error/spec - explain-data for spec error
 */
cljs.repl.ex_triage = (function cljs$repl$ex_triage(datafied_throwable){
var map__8216 = datafied_throwable;
var map__8216__$1 = (((((!((map__8216 == null))))?(((((map__8216.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8216.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8216):map__8216);
var via = cljs.core.get.call(null,map__8216__$1,new cljs.core.Keyword(null,"via","via",-1904457336));
var trace = cljs.core.get.call(null,map__8216__$1,new cljs.core.Keyword(null,"trace","trace",-1082747415));
var phase = cljs.core.get.call(null,map__8216__$1,new cljs.core.Keyword(null,"phase","phase",575722892),new cljs.core.Keyword(null,"execution","execution",253283524));
var map__8217 = cljs.core.last.call(null,via);
var map__8217__$1 = (((((!((map__8217 == null))))?(((((map__8217.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8217.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8217):map__8217);
var type = cljs.core.get.call(null,map__8217__$1,new cljs.core.Keyword(null,"type","type",1174270348));
var message = cljs.core.get.call(null,map__8217__$1,new cljs.core.Keyword(null,"message","message",-406056002));
var data = cljs.core.get.call(null,map__8217__$1,new cljs.core.Keyword(null,"data","data",-232669377));
var map__8218 = data;
var map__8218__$1 = (((((!((map__8218 == null))))?(((((map__8218.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8218.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8218):map__8218);
var problems = cljs.core.get.call(null,map__8218__$1,new cljs.core.Keyword("cljs.spec.alpha","problems","cljs.spec.alpha/problems",447400814));
var fn = cljs.core.get.call(null,map__8218__$1,new cljs.core.Keyword("cljs.spec.alpha","fn","cljs.spec.alpha/fn",408600443));
var caller = cljs.core.get.call(null,map__8218__$1,new cljs.core.Keyword("cljs.spec.test.alpha","caller","cljs.spec.test.alpha/caller",-398302390));
var map__8219 = new cljs.core.Keyword(null,"data","data",-232669377).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null,via));
var map__8219__$1 = (((((!((map__8219 == null))))?(((((map__8219.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8219.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8219):map__8219);
var top_data = map__8219__$1;
var source = cljs.core.get.call(null,map__8219__$1,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397));
return cljs.core.assoc.call(null,(function (){var G__8224 = phase;
var G__8224__$1 = (((G__8224 instanceof cljs.core.Keyword))?G__8224.fqn:null);
switch (G__8224__$1) {
case "read-source":
var map__8225 = data;
var map__8225__$1 = (((((!((map__8225 == null))))?(((((map__8225.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8225.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8225):map__8225);
var line = cljs.core.get.call(null,map__8225__$1,new cljs.core.Keyword("clojure.error","line","clojure.error/line",-1816287471));
var column = cljs.core.get.call(null,map__8225__$1,new cljs.core.Keyword("clojure.error","column","clojure.error/column",304721553));
var G__8227 = cljs.core.merge.call(null,new cljs.core.Keyword(null,"data","data",-232669377).cljs$core$IFn$_invoke$arity$1(cljs.core.second.call(null,via)),top_data);
var G__8227__$1 = (cljs.core.truth_(source)?cljs.core.assoc.call(null,G__8227,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397),source):G__8227);
var G__8227__$2 = (cljs.core.truth_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["NO_SOURCE_PATH",null,"NO_SOURCE_FILE",null], null), null).call(null,source))?cljs.core.dissoc.call(null,G__8227__$1,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397)):G__8227__$1);
if(cljs.core.truth_(message)){
return cljs.core.assoc.call(null,G__8227__$2,new cljs.core.Keyword("clojure.error","cause","clojure.error/cause",-1879175742),message);
} else {
return G__8227__$2;
}

break;
case "compile-syntax-check":
case "compilation":
case "macro-syntax-check":
case "macroexpansion":
var G__8228 = top_data;
var G__8228__$1 = (cljs.core.truth_(source)?cljs.core.assoc.call(null,G__8228,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397),source):G__8228);
var G__8228__$2 = (cljs.core.truth_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["NO_SOURCE_PATH",null,"NO_SOURCE_FILE",null], null), null).call(null,source))?cljs.core.dissoc.call(null,G__8228__$1,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397)):G__8228__$1);
var G__8228__$3 = (cljs.core.truth_(type)?cljs.core.assoc.call(null,G__8228__$2,new cljs.core.Keyword("clojure.error","class","clojure.error/class",278435890),type):G__8228__$2);
var G__8228__$4 = (cljs.core.truth_(message)?cljs.core.assoc.call(null,G__8228__$3,new cljs.core.Keyword("clojure.error","cause","clojure.error/cause",-1879175742),message):G__8228__$3);
if(cljs.core.truth_(problems)){
return cljs.core.assoc.call(null,G__8228__$4,new cljs.core.Keyword("clojure.error","spec","clojure.error/spec",2055032595),data);
} else {
return G__8228__$4;
}

break;
case "read-eval-result":
case "print-eval-result":
var vec__8229 = cljs.core.first.call(null,trace);
var source__$1 = cljs.core.nth.call(null,vec__8229,(0),null);
var method = cljs.core.nth.call(null,vec__8229,(1),null);
var file = cljs.core.nth.call(null,vec__8229,(2),null);
var line = cljs.core.nth.call(null,vec__8229,(3),null);
var G__8232 = top_data;
var G__8232__$1 = (cljs.core.truth_(line)?cljs.core.assoc.call(null,G__8232,new cljs.core.Keyword("clojure.error","line","clojure.error/line",-1816287471),line):G__8232);
var G__8232__$2 = (cljs.core.truth_(file)?cljs.core.assoc.call(null,G__8232__$1,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397),file):G__8232__$1);
var G__8232__$3 = (cljs.core.truth_((function (){var and__4174__auto__ = source__$1;
if(cljs.core.truth_(and__4174__auto__)){
return method;
} else {
return and__4174__auto__;
}
})())?cljs.core.assoc.call(null,G__8232__$2,new cljs.core.Keyword("clojure.error","symbol","clojure.error/symbol",1544821994),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[source__$1,method],null))):G__8232__$2);
var G__8232__$4 = (cljs.core.truth_(type)?cljs.core.assoc.call(null,G__8232__$3,new cljs.core.Keyword("clojure.error","class","clojure.error/class",278435890),type):G__8232__$3);
if(cljs.core.truth_(message)){
return cljs.core.assoc.call(null,G__8232__$4,new cljs.core.Keyword("clojure.error","cause","clojure.error/cause",-1879175742),message);
} else {
return G__8232__$4;
}

break;
case "execution":
var vec__8233 = cljs.core.first.call(null,trace);
var source__$1 = cljs.core.nth.call(null,vec__8233,(0),null);
var method = cljs.core.nth.call(null,vec__8233,(1),null);
var file = cljs.core.nth.call(null,vec__8233,(2),null);
var line = cljs.core.nth.call(null,vec__8233,(3),null);
var file__$1 = cljs.core.first.call(null,cljs.core.remove.call(null,(function (p1__8215_SHARP_){
var or__4185__auto__ = (p1__8215_SHARP_ == null);
if(or__4185__auto__){
return or__4185__auto__;
} else {
return new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["NO_SOURCE_PATH",null,"NO_SOURCE_FILE",null], null), null).call(null,p1__8215_SHARP_);
}
}),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,"file","file",-1269645878).cljs$core$IFn$_invoke$arity$1(caller),file], null)));
var err_line = (function (){var or__4185__auto__ = new cljs.core.Keyword(null,"line","line",212345235).cljs$core$IFn$_invoke$arity$1(caller);
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return line;
}
})();
var G__8236 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("clojure.error","class","clojure.error/class",278435890),type], null);
var G__8236__$1 = (cljs.core.truth_(err_line)?cljs.core.assoc.call(null,G__8236,new cljs.core.Keyword("clojure.error","line","clojure.error/line",-1816287471),err_line):G__8236);
var G__8236__$2 = (cljs.core.truth_(message)?cljs.core.assoc.call(null,G__8236__$1,new cljs.core.Keyword("clojure.error","cause","clojure.error/cause",-1879175742),message):G__8236__$1);
var G__8236__$3 = (cljs.core.truth_((function (){var or__4185__auto__ = fn;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
var and__4174__auto__ = source__$1;
if(cljs.core.truth_(and__4174__auto__)){
return method;
} else {
return and__4174__auto__;
}
}
})())?cljs.core.assoc.call(null,G__8236__$2,new cljs.core.Keyword("clojure.error","symbol","clojure.error/symbol",1544821994),(function (){var or__4185__auto__ = fn;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[source__$1,method],null));
}
})()):G__8236__$2);
var G__8236__$4 = (cljs.core.truth_(file__$1)?cljs.core.assoc.call(null,G__8236__$3,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397),file__$1):G__8236__$3);
if(cljs.core.truth_(problems)){
return cljs.core.assoc.call(null,G__8236__$4,new cljs.core.Keyword("clojure.error","spec","clojure.error/spec",2055032595),data);
} else {
return G__8236__$4;
}

break;
default:
throw (new Error(["No matching clause: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__8224__$1)].join('')));

}
})(),new cljs.core.Keyword("clojure.error","phase","clojure.error/phase",275140358),phase);
});
/**
 * Returns a string from exception data, as produced by ex-triage.
 *   The first line summarizes the exception phase and location.
 *   The subsequent lines describe the cause.
 */
cljs.repl.ex_str = (function cljs$repl$ex_str(p__8240){
var map__8241 = p__8240;
var map__8241__$1 = (((((!((map__8241 == null))))?(((((map__8241.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__8241.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.call(null,cljs.core.hash_map,map__8241):map__8241);
var triage_data = map__8241__$1;
var phase = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","phase","clojure.error/phase",275140358));
var source = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","source","clojure.error/source",-2011936397));
var line = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","line","clojure.error/line",-1816287471));
var column = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","column","clojure.error/column",304721553));
var symbol = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","symbol","clojure.error/symbol",1544821994));
var class$ = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","class","clojure.error/class",278435890));
var cause = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","cause","clojure.error/cause",-1879175742));
var spec = cljs.core.get.call(null,map__8241__$1,new cljs.core.Keyword("clojure.error","spec","clojure.error/spec",2055032595));
var loc = [cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4185__auto__ = source;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return "<cljs repl>";
}
})()),":",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__4185__auto__ = line;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return (1);
}
})()),(cljs.core.truth_(column)?[":",cljs.core.str.cljs$core$IFn$_invoke$arity$1(column)].join(''):"")].join('');
var class_name = cljs.core.name.call(null,(function (){var or__4185__auto__ = class$;
if(cljs.core.truth_(or__4185__auto__)){
return or__4185__auto__;
} else {
return "";
}
})());
var simple_class = class_name;
var cause_type = ((cljs.core.contains_QMARK_.call(null,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, ["RuntimeException",null,"Exception",null], null), null),simple_class))?"":[" (",simple_class,")"].join(''));
var format = goog.string.format;
var G__8243 = phase;
var G__8243__$1 = (((G__8243 instanceof cljs.core.Keyword))?G__8243.fqn:null);
switch (G__8243__$1) {
case "read-source":
return format.call(null,"Syntax error reading source at (%s).\n%s\n",loc,cause);

break;
case "macro-syntax-check":
return format.call(null,"Syntax error macroexpanding %sat (%s).\n%s",(cljs.core.truth_(symbol)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(symbol)," "].join(''):""),loc,(cljs.core.truth_(spec)?(function (){var sb__4720__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR__orig_val__8244_8253 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR__orig_val__8245_8254 = cljs.core._STAR_print_fn_STAR_;
var _STAR_print_newline_STAR__temp_val__8246_8255 = true;
var _STAR_print_fn_STAR__temp_val__8247_8256 = (function (x__4721__auto__){
return sb__4720__auto__.append(x__4721__auto__);
});
(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__8246_8255);

(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__8247_8256);

try{cljs.spec.alpha.explain_out.call(null,cljs.core.update.call(null,spec,new cljs.core.Keyword("cljs.spec.alpha","problems","cljs.spec.alpha/problems",447400814),(function (probs){
return cljs.core.map.call(null,(function (p1__8238_SHARP_){
return cljs.core.dissoc.call(null,p1__8238_SHARP_,new cljs.core.Keyword(null,"in","in",-1531184865));
}),probs);
}))
);
}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__8245_8254);

(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__8244_8253);
}
return cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4720__auto__);
})():format.call(null,"%s\n",cause)));

break;
case "macroexpansion":
return format.call(null,"Unexpected error%s macroexpanding %sat (%s).\n%s\n",cause_type,(cljs.core.truth_(symbol)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(symbol)," "].join(''):""),loc,cause);

break;
case "compile-syntax-check":
return format.call(null,"Syntax error%s compiling %sat (%s).\n%s\n",cause_type,(cljs.core.truth_(symbol)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(symbol)," "].join(''):""),loc,cause);

break;
case "compilation":
return format.call(null,"Unexpected error%s compiling %sat (%s).\n%s\n",cause_type,(cljs.core.truth_(symbol)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(symbol)," "].join(''):""),loc,cause);

break;
case "read-eval-result":
return format.call(null,"Error reading eval result%s at %s (%s).\n%s\n",cause_type,symbol,loc,cause);

break;
case "print-eval-result":
return format.call(null,"Error printing return value%s at %s (%s).\n%s\n",cause_type,symbol,loc,cause);

break;
case "execution":
if(cljs.core.truth_(spec)){
return format.call(null,"Execution error - invalid arguments to %s at (%s).\n%s",symbol,loc,(function (){var sb__4720__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR__orig_val__8248_8257 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR__orig_val__8249_8258 = cljs.core._STAR_print_fn_STAR_;
var _STAR_print_newline_STAR__temp_val__8250_8259 = true;
var _STAR_print_fn_STAR__temp_val__8251_8260 = (function (x__4721__auto__){
return sb__4720__auto__.append(x__4721__auto__);
});
(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__temp_val__8250_8259);

(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__temp_val__8251_8260);

try{cljs.spec.alpha.explain_out.call(null,cljs.core.update.call(null,spec,new cljs.core.Keyword("cljs.spec.alpha","problems","cljs.spec.alpha/problems",447400814),(function (probs){
return cljs.core.map.call(null,(function (p1__8239_SHARP_){
return cljs.core.dissoc.call(null,p1__8239_SHARP_,new cljs.core.Keyword(null,"in","in",-1531184865));
}),probs);
}))
);
}finally {(cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR__orig_val__8249_8258);

(cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR__orig_val__8248_8257);
}
return cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4720__auto__);
})());
} else {
return format.call(null,"Execution error%s at %s(%s).\n%s\n",cause_type,(cljs.core.truth_(symbol)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(symbol)," "].join(''):""),loc,cause);
}

break;
default:
throw (new Error(["No matching clause: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__8243__$1)].join('')));

}
});
cljs.repl.error__GT_str = (function cljs$repl$error__GT_str(error){
return cljs.repl.ex_str.call(null,cljs.repl.ex_triage.call(null,cljs.repl.Error__GT_map.call(null,error)));
});

//# sourceMappingURL=repl.js.map
