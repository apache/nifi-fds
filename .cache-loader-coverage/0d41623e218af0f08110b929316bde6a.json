{"remainingRequest":"/Users/jaslan/Development/nifi-fds/angular-url-loader.js!/Users/jaslan/Development/nifi-fds/node_modules/babel-loader/lib/index.js??ref--7-2!/Users/jaslan/Development/nifi-fds/platform/core/common/services/fds-storage.service.js","dependencies":[{"path":"/Users/jaslan/Development/nifi-fds/platform/core/common/services/fds-storage.service.js","mtime":1562689731033},{"path":"/Users/jaslan/Development/nifi-fds/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jaslan/Development/nifi-fds/angular-url-loader.js","mtime":1562689731025},{"path":"/Users/jaslan/Development/nifi-fds/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyoKICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZSBvciBtb3JlCiAqIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGUgZGlzdHJpYnV0ZWQgd2l0aAogKiB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuCiAqIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlIHRvIFlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wCiAqICh0aGUgIkxpY2Vuc2UiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoCiAqIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiAqCiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCi8vIFN0b3JlIGl0ZW1zIGZvciB0d28gZGF5cyBiZWZvcmUgYmVpbmcgZWxpZ2libGUgZm9yIHJlbW92YWwuCnZhciBNSUxMSVNfUEVSX0RBWSA9IDg2NDAwMDAwOwp2YXIgVFdPX0RBWVMgPSBNSUxMSVNfUEVSX0RBWSAqIDI7Cgp2YXIgaXNVbmRlZmluZWQgPSBmdW5jdGlvbiBpc1VuZGVmaW5lZChvYmopIHsKICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCc7Cn07Cgp2YXIgaXNOdWxsID0gZnVuY3Rpb24gaXNOdWxsKG9iaikgewogIHJldHVybiBvYmogPT09IG51bGw7Cn07Cgp2YXIgaXNEZWZpbmVkQW5kTm90TnVsbCA9IGZ1bmN0aW9uIGlzRGVmaW5lZEFuZE5vdE51bGwob2JqKSB7CiAgcmV0dXJuICFpc1VuZGVmaW5lZChvYmopICYmICFpc051bGwob2JqKTsKfTsKLyoqCiAqIENoZWNrcyB0aGUgZXhwaXJhdGlvbiBmb3IgdGhlIHNwZWNpZmllZCBlbnRyeS4KICoKICogQHBhcmFtIHtvYmplY3R9IGVudHJ5CiAqIEByZXR1cm5zIHtib29sZWFufQogKi8KCgp2YXIgY2hlY2tFeHBpcmF0aW9uID0gZnVuY3Rpb24gY2hlY2tFeHBpcmF0aW9uKGVudHJ5KSB7CiAgaWYgKGlzRGVmaW5lZEFuZE5vdE51bGwoZW50cnkuZXhwaXJlcykpIHsKICAgIC8vIGdldCB0aGUgZXhwaXJhdGlvbgogICAgdmFyIGV4cGlyZXMgPSBuZXcgRGF0ZShlbnRyeS5leHBpcmVzKTsKICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpOyAvLyByZXR1cm4gd2hldGhlciB0aGUgZXhwaXJhdGlvbiBkYXRlIGhhcyBwYXNzZWQKCiAgICByZXR1cm4gZXhwaXJlcy52YWx1ZU9mKCkgPCBub3cudmFsdWVPZigpOwogIH0KCiAgcmV0dXJuIGZhbHNlOwp9OwovKioKICogR2V0cyBhbiBlbnR5IGZvciB0aGUga2V5LiBUaGUgZW50cnkgZXhwaXJhdGlvbiBpcyBub3QgY2hlY2tlZC4KICoKICogQHBhcmFtIHtzdHJpbmd9IGtleQogKi8KCgp2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiBnZXRFbnRyeShrZXkpIHsKICB0cnkgewogICAgLy8gcGFyc2UgdGhlIGVudHJ5CiAgICB2YXIgZW50cnkgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpOyAvLyBlbnN1cmUgdGhlIGVudHJ5IGFuZCBpdGVtIGFyZSBwcmVzZW50CgogICAgaWYgKGlzRGVmaW5lZEFuZE5vdE51bGwoZW50cnkpKSB7CiAgICAgIHJldHVybiBlbnRyeTsKICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9IGNhdGNoIChlKSB7CiAgICByZXR1cm4gbnVsbDsKICB9Cn07Ci8qKgogKiBGZHNTdG9yYWdlU2VydmljZSBjb25zdHJ1Y3Rvci4KICogQGNvbnN0cnVjdG9yCiAqLwoKCmZ1bmN0aW9uIEZkc1N0b3JhZ2VTZXJ2aWNlKCkge30KCkZkc1N0b3JhZ2VTZXJ2aWNlLnByb3RvdHlwZSA9IHsKICBjb25zdHJ1Y3RvcjogRmRzU3RvcmFnZVNlcnZpY2UsCgogIC8qKgogICAqIEluaXRpYWxpemVzIHRoZSBzdG9yYWdlLiBJdGVtcyB3aWxsIGJlIHBlcnNpc3RlZCBmb3IgdHdvIGRheXMuIE9uY2UgdGhlIHNjcmlwdHMgcnVucwogICAqIHRoZXJlYWZ0ZXIsIGFsbCBlbGlnaWJsZSBpdGVtcyB3aWxsIGJlIHJlbW92ZWQuIFRoaXMgc3RyYXRlZ3kgZG9lcyBub3Qgc3VwcG9ydCBwZXJzaXN0ZW5jZS4KICAgKi8KICBpbml0OiBmdW5jdGlvbiBpbml0KCkgewogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhbFN0b3JhZ2UubGVuZ3RoOyBpKyspIHsKICAgICAgdHJ5IHsKICAgICAgICAvLyBnZXQgdGhlIG5leHQgaXRlbQogICAgICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2Uua2V5KGkpOyAvLyBhdHRlbXB0IHRvIGdldCB0aGUgaXRlbSB3aGljaCB3aWxsIGV4cGlyZSBpZiBuZWNlc3NhcnkKCiAgICAgICAgdGhpcy5nZXRJdGVtKGtleSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBEbyBub3RoaW5nCiAgICAgIH0KICAgIH0KICB9LAoKICAvKioKICAgKiBTdG9yZXMgdGhlIHNwZWNpZmllZCBpdGVtLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGtleQogICAqIEBwYXJhbSB7b2JqZWN0fSBpdGVtCiAgICogQHBhcmFtIHtpbnRlZ2VyfSBleHBpcmVzCiAgICovCiAgc2V0SXRlbTogZnVuY3Rpb24gc2V0SXRlbShrZXksIGl0ZW0sIGV4cGlyZXMpIHsKICAgIC8vIGNhbGN1bGF0ZSB0aGUgZXhwaXJhdGlvbgogICAgZXhwaXJlcyA9IGlzRGVmaW5lZEFuZE5vdE51bGwoZXhwaXJlcykgPyBleHBpcmVzIDogbmV3IERhdGUoKS52YWx1ZU9mKCkgKyBUV09fREFZUzsgLy8gY3JlYXRlIHRoZSBlbnRyeQoKICAgIHZhciBlbnRyeSA9IHsKICAgICAgZXhwaXJlczogZXhwaXJlcywKICAgICAgaXRlbTogaXRlbQogICAgfTsgLy8gc3RvcmUgdGhlIGl0ZW0KCiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KGVudHJ5KSk7CiAgfSwKCiAgLyoqCiAgICogUmV0dXJucyB3aGV0aGVyIHRoZXJlIGlzIGFuIGVudHJ5IGZvciB0aGlzIGtleS4gVGhpcyB3aWxsIG5vdCBjaGVjayB0aGUgZXhwaXJhdGlvbi4gSWYKICAgKiB0aGUgZW50cnkgaXMgZXhwaXJlZCwgaXQgd2lsbCByZXR1cm4gbnVsbCBvbiBhIHN1YnNlcXVlbnQgZ2V0SXRlbSBpbnZvY2F0aW9uLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGtleQogICAqIEByZXR1cm5zIHtib29sZWFufQogICAqLwogIGhhc0l0ZW06IGZ1bmN0aW9uIGhhc0l0ZW0oa2V5KSB7CiAgICByZXR1cm4gZ2V0RW50cnkoa2V5KSAhPT0gbnVsbDsKICB9LAoKICAvKioKICAgKiBHZXRzIHRoZSBpdGVtIHdpdGggdGhlIHNwZWNpZmllZCBrZXkuIElmIGFuIGl0ZW0gd2l0aCB0aGlzIGtleSBkb2VzCiAgICogbm90IGV4aXN0LCBudWxsIGlzIHJldHVybmVkLiBJZiBhbiBpdGVtIGV4aXN0cyBidXQgY2Fubm90IGJlIHBhcnNlZAogICAqIG9yIGlzIG1hbGZvcm1lZC91bnJlY29nbml6ZWQsIG51bGwgaXMgcmV0dXJuZWQuCiAgICoKICAgKiBAcGFyYW0ge3R5cGV9IGtleQogICAqLwogIGdldEl0ZW06IGZ1bmN0aW9uIGdldEl0ZW0oa2V5KSB7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeShrZXkpOwoKICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0gLy8gaWYgdGhlIGVudHJ5IGlzIGV4cGlyZWQsIGRyb3AgaXQgYW5kIHJldHVybiBudWxsCgoKICAgIGlmIChjaGVja0V4cGlyYXRpb24oZW50cnkpKSB7CiAgICAgIHRoaXMucmVtb3ZlSXRlbShrZXkpOwogICAgICByZXR1cm4gbnVsbDsKICAgIH0gLy8gaWYgdGhlIGVudHJ5IGhhcyB0aGUgc3BlY2lmaWVkIGZpZWxkIHJldHVybiBpdHMgdmFsdWUKCgogICAgaWYgKGlzRGVmaW5lZEFuZE5vdE51bGwoZW50cnlbJ2l0ZW0nXSkpIHsKICAgICAgcmV0dXJuIGVudHJ5WydpdGVtJ107CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfSwKCiAgLyoqCiAgICogR2V0cyB0aGUgZXhwaXJhdGlvbiBmb3IgdGhlIHNwZWNpZmllZCBpdGVtLiBUaGlzIHdpbGwgbm90IGNoZWNrIHRoZSBleHBpcmF0aW9uLiBJZgogICAqIHRoZSBlbnRyeSBpcyBleHBpcmVkLCBpdCB3aWxsIHJldHVybiBudWxsIG9uIGEgc3Vic2VxdWVudCBnZXRJdGVtIGludm9jYXRpb24uCiAgICoKICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5CiAgICogQHJldHVybnMge2ludGVnZXJ9CiAgICovCiAgZ2V0SXRlbUV4cGlyYXRpb246IGZ1bmN0aW9uIGdldEl0ZW1FeHBpcmF0aW9uKGtleSkgewogICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkoa2V5KTsKCiAgICBpZiAoZW50cnkgPT09IG51bGwpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9IC8vIGlmIHRoZSBlbnRyeSBoYXMgdGhlIHNwZWNpZmllZCBmaWVsZCByZXR1cm4gaXRzIHZhbHVlCgoKICAgIGlmIChpc0RlZmluZWRBbmROb3ROdWxsKGVudHJ5WydleHBpcmVzJ10pKSB7CiAgICAgIHJldHVybiBlbnRyeVsnZXhwaXJlcyddOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0sCgogIC8qKgogICAqIEV4dHJhY3RzIHRoZSBzdWJqZWN0IGZyb20gdGhlIHNwZWNpZmllZCBqd3QuIElmIHRoZSBqd3QgaXMgbm90IGFzIGV4cGVjdGVkCiAgICogYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLgogICAqCiAgICogQHBhcmFtIHtzdHJpbmd9IGp3dAogICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICovCiAgZ2V0Snd0UGF5bG9hZDogZnVuY3Rpb24gZ2V0Snd0UGF5bG9hZChqd3QpIHsKICAgIGlmIChpc0RlZmluZWRBbmROb3ROdWxsKGp3dCkpIHsKICAgICAgdmFyIHNlZ21lbnRzID0gand0LnNwbGl0KC9cLi8pOwoKICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCAhPT0gMykgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfQoKICAgICAgdmFyIHJhd1BheWxvYWQgPSB3aW5kb3cuYXRvYihzZWdtZW50c1sxXSk7CiAgICAgIHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShyYXdQYXlsb2FkKTsKCiAgICAgIGlmIChpc0RlZmluZWRBbmROb3ROdWxsKHBheWxvYWQpKSB7CiAgICAgICAgcmV0dXJuIHBheWxvYWQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBudWxsOwogICAgfQoKICAgIHJldHVybiBudWxsOwogIH0sCgogIC8qKgogICAqIFJlbW92ZXMgdGhlIGl0ZW0gd2l0aCB0aGUgc3BlY2lmaWVkIGtleS4KICAgKgogICAqIEBwYXJhbSB7dHlwZX0ga2V5CiAgICovCiAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gcmVtb3ZlSXRlbShrZXkpIHsKICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7CiAgfQp9OwpGZHNTdG9yYWdlU2VydmljZS5wYXJhbWV0ZXJzID0gW107CmV4cG9ydCBkZWZhdWx0IEZkc1N0b3JhZ2VTZXJ2aWNlOw=="}]}